/**
 * Decision Lens API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.7
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Activities', 'model/ErrorResponse', 'model/Group', 'model/Groups', 'model/Portfolios', 'model/ProvisionGroupRequest', 'model/ProvisionGroupResponse', 'model/Users'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/Activities'), require('../model/ErrorResponse'), require('../model/Group'), require('../model/Groups'), require('../model/Portfolios'), require('../model/ProvisionGroupRequest'), require('../model/ProvisionGroupResponse'), require('../model/Users'));
  } else {
    // Browser globals (root is window)
    if (!root.DecisionLensApi) {
      root.DecisionLensApi = {};
    }
    root.DecisionLensApi.GroupsApi = factory(root.DecisionLensApi.ApiClient, root.DecisionLensApi.Activities, root.DecisionLensApi.ErrorResponse, root.DecisionLensApi.Group, root.DecisionLensApi.Groups, root.DecisionLensApi.Portfolios, root.DecisionLensApi.ProvisionGroupRequest, root.DecisionLensApi.ProvisionGroupResponse, root.DecisionLensApi.Users);
  }
}(this, function(ApiClient, Activities, ErrorResponse, Group, Groups, Portfolios, ProvisionGroupRequest, ProvisionGroupResponse, Users) {
  'use strict';

  /**
   * Groups service.
   * @module api/GroupsApi
   * @version 1.0
   */

  /**
   * Constructs a new GroupsApi. 
   * @alias module:api/GroupsApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the createGroup operation.
     * @callback module:api/GroupsApi~createGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Group} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new group. System Administator operation.
     * @param {module:model/Group} group Group to create
     * @param {module:api/GroupsApi~createGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Group}
     */
    this.createGroup = function(group, callback) {
      var postBody = group;

      // verify the required parameter 'group' is set
      if (group === undefined || group === null) {
        throw new Error("Missing the required parameter 'group' when calling createGroup");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Group;

      return this.apiClient.callApi(
        '/groups', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getActivitiesForGroup operation.
     * @callback module:api/GroupsApi~getActivitiesForGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Activities} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get activities for group. System Administator operation.
     * @param {String} id Group id
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit Pagination limit
     * @param {Number} opts.offset Pagination offset
     * @param {String} opts.match Semi-colon delimited list of expressions to include in the response only the items in a collections that satisfy the expression(s). All other items should be exluded.
     * @param {module:api/GroupsApi~getActivitiesForGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Activities}
     */
    this.getActivitiesForGroup = function(id, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getActivitiesForGroup");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset'],
        'match': opts['match'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Activities;

      return this.apiClient.callApi(
        '/groups/{id}/activities', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getGroups operation.
     * @callback module:api/GroupsApi~getGroupsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Groups} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get groups. System Administator operation.
     * @param {Object} opts Optional parameters
     * @param {String} opts.expand JSON string containing an array expand specifications for fields.  An expand specification must have a path and includes optional properties match, unique, allPossible, limit, offset, orderBy.
     * @param {Number} opts.limit Pagination limit
     * @param {Number} opts.offset Pagination offset
     * @param {String} opts.match Semi-colon delimited list of expressions to include in the response only the items in a collections that satisfy the expression(s). All other items should be exluded.
     * @param {module:api/GroupsApi~getGroupsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Groups}
     */
    this.getGroups = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'expand': opts['expand'],
        'limit': opts['limit'],
        'offset': opts['offset'],
        'match': opts['match'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Groups;

      return this.apiClient.callApi(
        '/groups', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getPortfoliosForGroup operation.
     * @callback module:api/GroupsApi~getPortfoliosForGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Portfolios} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get portfolios for group. Group administrator operation.
     * @param {String} id Group id
     * @param {Object} opts Optional parameters
     * @param {String} opts.expand JSON string containing an array expand specifications for fields.  An expand specification must have a path and includes optional properties match, unique, allPossible, limit, offset, orderBy.
     * @param {Number} opts.limit Pagination limit
     * @param {Number} opts.offset Pagination offset
     * @param {String} opts.orderBy Comma delimited list of order by expressions. Use &#39;-&#39; in front of expression for reverse order.
     * @param {String} opts.match Semi-colon delimited list of expressions to include in the response only the items in a collections that satisfy the expression(s). All other items should be exluded.
     * @param {module:api/GroupsApi~getPortfoliosForGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Portfolios}
     */
    this.getPortfoliosForGroup = function(id, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getPortfoliosForGroup");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
        'expand': opts['expand'],
        'limit': opts['limit'],
        'offset': opts['offset'],
        'orderBy': opts['orderBy'],
        'match': opts['match'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Portfolios;

      return this.apiClient.callApi(
        '/groups/{id}/portfolios', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getUsersForGroup operation.
     * @callback module:api/GroupsApi~getUsersForGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Users} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get users for group. System Administator operation.
     * @param {String} id Group id
     * @param {Object} opts Optional parameters
     * @param {String} opts.expand JSON string containing an array expand specifications for fields.  An expand specification must have a path and includes optional properties match, unique, allPossible, limit, offset, orderBy.
     * @param {Number} opts.limit Pagination limit
     * @param {Number} opts.offset Pagination offset
     * @param {String} opts.match Semi-colon delimited list of expressions to include in the response only the items in a collections that satisfy the expression(s). All other items should be exluded.
     * @param {module:api/GroupsApi~getUsersForGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Users}
     */
    this.getUsersForGroup = function(id, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getUsersForGroup");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
        'expand': opts['expand'],
        'limit': opts['limit'],
        'offset': opts['offset'],
        'match': opts['match'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Users;

      return this.apiClient.callApi(
        '/groups/{id}/users', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the provisionGroup operation.
     * @callback module:api/GroupsApi~provisionGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProvisionGroupResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Provision a group (tenant).
     * @param {module:model/ProvisionGroupRequest} provisionGroupRequest Provision a Group
     * @param {module:api/GroupsApi~provisionGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProvisionGroupResponse}
     */
    this.provisionGroup = function(provisionGroupRequest, callback) {
      var postBody = provisionGroupRequest;

      // verify the required parameter 'provisionGroupRequest' is set
      if (provisionGroupRequest === undefined || provisionGroupRequest === null) {
        throw new Error("Missing the required parameter 'provisionGroupRequest' when calling provisionGroup");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ProvisionGroupResponse;

      return this.apiClient.callApi(
        '/groups/provision', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
