/**
 * Decision Lens API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.7
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/ErrorResponse', 'model/Source'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/ErrorResponse'), require('../model/Source'));
  } else {
    // Browser globals (root is window)
    if (!root.DecisionLensApi) {
      root.DecisionLensApi = {};
    }
    root.DecisionLensApi.SourcesApi = factory(root.DecisionLensApi.ApiClient, root.DecisionLensApi.ErrorResponse, root.DecisionLensApi.Source);
  }
}(this, function(ApiClient, ErrorResponse, Source) {
  'use strict';

  /**
   * Sources service.
   * @module api/SourcesApi
   * @version 1.0
   */

  /**
   * Constructs a new SourcesApi. 
   * @alias module:api/SourcesApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the fetchDataForSource operation.
     * @callback module:api/SourcesApi~fetchDataForSourceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Source} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fetch data for source.
     * @param {String} id Source id
     * @param {Object} opts Optional parameters
     * @param {String} opts.priorityScenario Priority Scenario name
     * @param {module:api/SourcesApi~fetchDataForSourceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Source}
     */
    this.fetchDataForSource = function(id, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling fetchDataForSource");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
        'priorityScenario': opts['priorityScenario'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Source;

      return this.apiClient.callApi(
        '/sources/{id}/fetchData', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the sendDataForSource operation.
     * @callback module:api/SourcesApi~sendDataForSourceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Source} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Send data for source.
     * @param {String} id Source id
     * @param {Array.<module:model/String>} statuses Statuses
     * @param {module:api/SourcesApi~sendDataForSourceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Source}
     */
    this.sendDataForSource = function(id, statuses, callback) {
      var postBody = statuses;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling sendDataForSource");
      }

      // verify the required parameter 'statuses' is set
      if (statuses === undefined || statuses === null) {
        throw new Error("Missing the required parameter 'statuses' when calling sendDataForSource");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = ['application/json'];
      var accepts = [];
      var returnType = Source;

      return this.apiClient.callApi(
        '/sources/{id}/sendData', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
