/**
 * Decision Lens API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.7
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/ErrorResponse', 'model/KloudlessFile', 'model/Mappings', 'model/Spreadsheet'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/ErrorResponse'), require('../model/KloudlessFile'), require('../model/Mappings'), require('../model/Spreadsheet'));
  } else {
    // Browser globals (root is window)
    if (!root.DecisionLensApi) {
      root.DecisionLensApi = {};
    }
    root.DecisionLensApi.SpreadsheetApi = factory(root.DecisionLensApi.ApiClient, root.DecisionLensApi.ErrorResponse, root.DecisionLensApi.KloudlessFile, root.DecisionLensApi.Mappings, root.DecisionLensApi.Spreadsheet);
  }
}(this, function(ApiClient, ErrorResponse, KloudlessFile, Mappings, Spreadsheet) {
  'use strict';

  /**
   * Spreadsheet service.
   * @module api/SpreadsheetApi
   * @version 1.0
   */

  /**
   * Constructs a new SpreadsheetApi. 
   * @alias module:api/SpreadsheetApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the createSpreadsheet operation.
     * @callback module:api/SpreadsheetApi~createSpreadsheetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Spreadsheet} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates spreadsheet from file upload.
     * @param {File} file xls or xlsx file upload
     * @param {module:api/SpreadsheetApi~createSpreadsheetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Spreadsheet}
     */
    this.createSpreadsheet = function(file, callback) {
      var postBody = null;

      // verify the required parameter 'file' is set
      if (file === undefined || file === null) {
        throw new Error("Missing the required parameter 'file' when calling createSpreadsheet");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'file': file
      };

      var authNames = ['OAuth2'];
      var contentTypes = ['multipart/form-data'];
      var accepts = ['application/json'];
      var returnType = Spreadsheet;

      return this.apiClient.callApi(
        '/spreadsheet', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createSpreadsheetForKloudlessFile operation.
     * @callback module:api/SpreadsheetApi~createSpreadsheetForKloudlessFileCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Spreadsheet} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates spreadsheet from kloudless file
     * @param {module:model/KloudlessFile} kloudlessFile kloudless file
     * @param {module:api/SpreadsheetApi~createSpreadsheetForKloudlessFileCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Spreadsheet}
     */
    this.createSpreadsheetForKloudlessFile = function(kloudlessFile, callback) {
      var postBody = kloudlessFile;

      // verify the required parameter 'kloudlessFile' is set
      if (kloudlessFile === undefined || kloudlessFile === null) {
        throw new Error("Missing the required parameter 'kloudlessFile' when calling createSpreadsheetForKloudlessFile");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Spreadsheet;

      return this.apiClient.callApi(
        '/spreadsheet/kloudless', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteSpreadsheet operation.
     * @callback module:api/SpreadsheetApi~deleteSpreadsheetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete spreadsheet and mappings
     * @param {String} id spreadsheet id
     * @param {module:api/SpreadsheetApi~deleteSpreadsheetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteSpreadsheet = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteSpreadsheet");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/spreadsheet/{id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getMappingsForSpreadsheet operation.
     * @callback module:api/SpreadsheetApi~getMappingsForSpreadsheetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Mappings} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get mappings for spreadsheet
     * @param {String} id spreadsheet id
     * @param {Object} opts Optional parameters
     * @param {String} opts.sheetName 
     * @param {Object} opts.importType Whether import PROJECT or COST data. Defaults to PROJECT
     * @param {String} opts.expand JSON string containing an array expand specifications for fields.  An expand specification must have a path and includes optional properties match, unique, allPossible, limit, offset, orderBy.
     * @param {Boolean} opts.columnsOnly return columns only the case for cost import (default to true)
     * @param {module:api/SpreadsheetApi~getMappingsForSpreadsheetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Mappings}
     */
    this.getMappingsForSpreadsheet = function(id, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getMappingsForSpreadsheet");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
        'sheetName': opts['sheetName'],
        'importType': opts['importType'],
        'expand': opts['expand'],
        'columnsOnly': opts['columnsOnly'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Mappings;

      return this.apiClient.callApi(
        '/spreadsheet/{id}/mappings', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getSpreadsheet operation.
     * @callback module:api/SpreadsheetApi~getSpreadsheetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Spreadsheet} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get spreadsheet
     * @param {String} id spreadsheet id
     * @param {module:api/SpreadsheetApi~getSpreadsheetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Spreadsheet}
     */
    this.getSpreadsheet = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getSpreadsheet");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Spreadsheet;

      return this.apiClient.callApi(
        '/spreadsheet/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
