/**
 * Decision Lens API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.7
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/ErrorResponse', 'model/Field', 'model/Fields', 'model/Operations', 'model/PatchItem'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/ErrorResponse'), require('../model/Field'), require('../model/Fields'), require('../model/Operations'), require('../model/PatchItem'));
  } else {
    // Browser globals (root is window)
    if (!root.DecisionLensApi) {
      root.DecisionLensApi = {};
    }
    root.DecisionLensApi.BudgetFieldsApi = factory(root.DecisionLensApi.ApiClient, root.DecisionLensApi.ErrorResponse, root.DecisionLensApi.Field, root.DecisionLensApi.Fields, root.DecisionLensApi.Operations, root.DecisionLensApi.PatchItem);
  }
}(this, function(ApiClient, ErrorResponse, Field, Fields, Operations, PatchItem) {
  'use strict';

  /**
   * BudgetFields service.
   * @module api/BudgetFieldsApi
   * @version 1.0
   */

  /**
   * Constructs a new BudgetFieldsApi. 
   * @alias module:api/BudgetFieldsApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the createBudgetField operation.
     * @callback module:api/BudgetFieldsApi~createBudgetFieldCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Field>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new budget field
     * @param {module:model/Field} body Budget field to create
     * @param {Object} opts Optional parameters
     * @param {String} opts.expand JSON string containing an array expand specifications for fields.  An expand specification must have a path and includes optional properties match, unique, allPossible, limit, offset, orderBy.
     * @param {module:api/BudgetFieldsApi~createBudgetFieldCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Field>}
     */
    this.createBudgetField = function(body, opts, callback) {
      opts = opts || {};
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createBudgetField");
      }


      var pathParams = {
      };
      var queryParams = {
        'expand': opts['expand'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [Field];

      return this.apiClient.callApi(
        '/fields/budgets', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteBudgetField operation.
     * @callback module:api/BudgetFieldsApi~deleteBudgetFieldCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a budget field
     * @param {String} id Budget field id
     * @param {module:api/BudgetFieldsApi~deleteBudgetFieldCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteBudgetField = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteBudgetField");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/fields/budgets/{id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getBudgetField operation.
     * @callback module:api/BudgetFieldsApi~getBudgetFieldCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Field} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves a budget field
     * @param {String} id Budget field id
     * @param {Object} opts Optional parameters
     * @param {String} opts.expand JSON string containing an array expand specifications for fields.  An expand specification must have a path and includes optional properties match, unique, allPossible, limit, offset, orderBy.
     * @param {module:api/BudgetFieldsApi~getBudgetFieldCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Field}
     */
    this.getBudgetField = function(id, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getBudgetField");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
        'expand': opts['expand'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Field;

      return this.apiClient.callApi(
        '/fields/budgets/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getBudgetFieldsForPortfolio operation.
     * @callback module:api/BudgetFieldsApi~getBudgetFieldsForPortfolioCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Fields} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves budget fields for a portfolio.
     * @param {String} portfolioId Portfolio id
     * @param {Object} opts Optional parameters
     * @param {String} opts.expand JSON string containing an array expand specifications for fields.  An expand specification must have a path and includes optional properties match, unique, allPossible, limit, offset, orderBy.
     * @param {Number} opts.limit Pagination limit
     * @param {Number} opts.offset Pagination offset
     * @param {String} opts.orderBy Comma delimited list of order by expressions. Use &#39;-&#39; in front of expression for reverse order.
     * @param {String} opts.match Semi-colon delimited list of expressions to include in the response only the items in a collections that satisfy the expression(s). All other items should be exluded.
     * @param {module:api/BudgetFieldsApi~getBudgetFieldsForPortfolioCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Fields}
     */
    this.getBudgetFieldsForPortfolio = function(portfolioId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'portfolioId' is set
      if (portfolioId === undefined || portfolioId === null) {
        throw new Error("Missing the required parameter 'portfolioId' when calling getBudgetFieldsForPortfolio");
      }


      var pathParams = {
      };
      var queryParams = {
        'portfolioId': portfolioId,
        'expand': opts['expand'],
        'limit': opts['limit'],
        'offset': opts['offset'],
        'orderBy': opts['orderBy'],
        'match': opts['match'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Fields;

      return this.apiClient.callApi(
        '/fields/budgets', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateBudgetField operation.
     * @callback module:api/BudgetFieldsApi~updateBudgetFieldCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Field>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a budget field utilizing JSON Patch Operations.
     * @param {String} id Budget field id
     * @param {module:model/Operations} body JSON Patch Operations to update budget field.
     * @param {Object} opts Optional parameters
     * @param {String} opts.expand JSON string containing an array expand specifications for fields.  An expand specification must have a path and includes optional properties match, unique, allPossible, limit, offset, orderBy.
     * @param {module:api/BudgetFieldsApi~updateBudgetFieldCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Field>}
     */
    this.updateBudgetField = function(id, body, opts, callback) {
      opts = opts || {};
      var postBody = body;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateBudgetField");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateBudgetField");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
        'expand': opts['expand'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = ['application/json-patch+json'];
      var accepts = ['application/json'];
      var returnType = [Field];

      return this.apiClient.callApi(
        '/fields/budgets/{id}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateBudgetFields operation.
     * @callback module:api/BudgetFieldsApi~updateBudgetFieldsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Field>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update budget fields
     * @param {Array.<module:model/PatchItem>} body JSON Patch Operations to update multiple budgeet fields.
     * @param {Object} opts Optional parameters
     * @param {String} opts.expand JSON string containing an array expand specifications for fields.  An expand specification must have a path and includes optional properties match, unique, allPossible, limit, offset, orderBy.
     * @param {module:api/BudgetFieldsApi~updateBudgetFieldsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Field>}
     */
    this.updateBudgetFields = function(body, opts, callback) {
      opts = opts || {};
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateBudgetFields");
      }


      var pathParams = {
      };
      var queryParams = {
        'expand': opts['expand'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = ['application/json-patch+json'];
      var accepts = ['application/json'];
      var returnType = [Field];

      return this.apiClient.callApi(
        '/fields/budgets', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
