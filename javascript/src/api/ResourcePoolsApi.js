/**
 * Decision Lens API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.7
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/ErrorResponse', 'model/ResourcePool', 'model/ResourcePoolBudgetAmountPatchItem', 'model/ResourcePools'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/ErrorResponse'), require('../model/ResourcePool'), require('../model/ResourcePoolBudgetAmountPatchItem'), require('../model/ResourcePools'));
  } else {
    // Browser globals (root is window)
    if (!root.DecisionLensApi) {
      root.DecisionLensApi = {};
    }
    root.DecisionLensApi.ResourcePoolsApi = factory(root.DecisionLensApi.ApiClient, root.DecisionLensApi.ErrorResponse, root.DecisionLensApi.ResourcePool, root.DecisionLensApi.ResourcePoolBudgetAmountPatchItem, root.DecisionLensApi.ResourcePools);
  }
}(this, function(ApiClient, ErrorResponse, ResourcePool, ResourcePoolBudgetAmountPatchItem, ResourcePools) {
  'use strict';

  /**
   * ResourcePools service.
   * @module api/ResourcePoolsApi
   * @version 1.0
   */

  /**
   * Constructs a new ResourcePoolsApi. 
   * @alias module:api/ResourcePoolsApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the getResourcePool operation.
     * @callback module:api/ResourcePoolsApi~getResourcePoolCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResourcePool} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves a resource pool.
     * @param {String} id Resource Pool id
     * @param {Object} opts Optional parameters
     * @param {String} opts.portfolioPlanId Portfolio Plan id
     * @param {module:api/ResourcePoolsApi~getResourcePoolCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResourcePool}
     */
    this.getResourcePool = function(id, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getResourcePool");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
        'portfolioPlanId': opts['portfolioPlanId'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ResourcePool;

      return this.apiClient.callApi(
        '/resourcePools/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getResourcePoolsForPortfolioPlan operation.
     * @callback module:api/ResourcePoolsApi~getResourcePoolsForPortfolioPlanCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResourcePools} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fetch resource pools for portfolio plan
     * @param {String} portfolioPlanId Portfolio Plan id
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.planOverridesOnly Returns only plan overrides. default is false. (default to false)
     * @param {String} opts.expand JSON string containing an array expand specifications for fields.  An expand specification must have a path and includes optional properties match, unique, allPossible, limit, offset, orderBy.
     * @param {Number} opts.limit Pagination limit
     * @param {Number} opts.offset Pagination offset
     * @param {String} opts.orderBy Comma delimited list of order by expressions. Use &#39;-&#39; in front of expression for reverse order.
     * @param {String} opts.match Semi-colon delimited list of expressions to include in the response only the items in a collections that satisfy the expression(s). All other items should be exluded.
     * @param {module:api/ResourcePoolsApi~getResourcePoolsForPortfolioPlanCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResourcePools}
     */
    this.getResourcePoolsForPortfolioPlan = function(portfolioPlanId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'portfolioPlanId' is set
      if (portfolioPlanId === undefined || portfolioPlanId === null) {
        throw new Error("Missing the required parameter 'portfolioPlanId' when calling getResourcePoolsForPortfolioPlan");
      }


      var pathParams = {
      };
      var queryParams = {
        'portfolioPlanId': portfolioPlanId,
        'planOverridesOnly': opts['planOverridesOnly'],
        'expand': opts['expand'],
        'limit': opts['limit'],
        'offset': opts['offset'],
        'orderBy': opts['orderBy'],
        'match': opts['match'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ResourcePools;

      return this.apiClient.callApi(
        '/resourcePools', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateResourcePoolBudgetAmountsForPortfolioPlan operation.
     * @callback module:api/ResourcePoolsApi~updateResourcePoolBudgetAmountsForPortfolioPlanCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ResourcePool>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update resource pool budget amounts in a portfolio plan
     * @param {String} portfolioPlanId Portfolio Plan id
     * @param {Array.<module:model/ResourcePoolBudgetAmountPatchItem>} body JSON Patch Operations to update multiple resource pool budget amounts
     * @param {module:api/ResourcePoolsApi~updateResourcePoolBudgetAmountsForPortfolioPlanCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ResourcePool>}
     */
    this.updateResourcePoolBudgetAmountsForPortfolioPlan = function(portfolioPlanId, body, callback) {
      var postBody = body;

      // verify the required parameter 'portfolioPlanId' is set
      if (portfolioPlanId === undefined || portfolioPlanId === null) {
        throw new Error("Missing the required parameter 'portfolioPlanId' when calling updateResourcePoolBudgetAmountsForPortfolioPlan");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateResourcePoolBudgetAmountsForPortfolioPlan");
      }


      var pathParams = {
      };
      var queryParams = {
        'portfolioPlanId': portfolioPlanId,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = ['application/json-patch+json'];
      var accepts = ['application/json'];
      var returnType = [ResourcePool];

      return this.apiClient.callApi(
        '/resourcePools', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
