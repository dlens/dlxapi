/**
 * Decision Lens API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.7
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Activities', 'model/CustomName', 'model/ErrorResponse', 'model/FieldValue', 'model/FieldValuePatchItem', 'model/Operations', 'model/Portfolio', 'model/Portfolios', 'model/Projects', 'model/ResourcePool', 'model/ResourcePoolBudgetAmountPatchItem', 'model/ResourcePools', 'model/Source', 'model/SpreadsheetReport'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/Activities'), require('../model/CustomName'), require('../model/ErrorResponse'), require('../model/FieldValue'), require('../model/FieldValuePatchItem'), require('../model/Operations'), require('../model/Portfolio'), require('../model/Portfolios'), require('../model/Projects'), require('../model/ResourcePool'), require('../model/ResourcePoolBudgetAmountPatchItem'), require('../model/ResourcePools'), require('../model/Source'), require('../model/SpreadsheetReport'));
  } else {
    // Browser globals (root is window)
    if (!root.DecisionLensApi) {
      root.DecisionLensApi = {};
    }
    root.DecisionLensApi.PortfoliosApi = factory(root.DecisionLensApi.ApiClient, root.DecisionLensApi.Activities, root.DecisionLensApi.CustomName, root.DecisionLensApi.ErrorResponse, root.DecisionLensApi.FieldValue, root.DecisionLensApi.FieldValuePatchItem, root.DecisionLensApi.Operations, root.DecisionLensApi.Portfolio, root.DecisionLensApi.Portfolios, root.DecisionLensApi.Projects, root.DecisionLensApi.ResourcePool, root.DecisionLensApi.ResourcePoolBudgetAmountPatchItem, root.DecisionLensApi.ResourcePools, root.DecisionLensApi.Source, root.DecisionLensApi.SpreadsheetReport);
  }
}(this, function(ApiClient, Activities, CustomName, ErrorResponse, FieldValue, FieldValuePatchItem, Operations, Portfolio, Portfolios, Projects, ResourcePool, ResourcePoolBudgetAmountPatchItem, ResourcePools, Source, SpreadsheetReport) {
  'use strict';

  /**
   * Portfolios service.
   * @module api/PortfoliosApi
   * @version 1.0
   */

  /**
   * Constructs a new PortfoliosApi. 
   * @alias module:api/PortfoliosApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the archivePortfolio operation.
     * @callback module:api/PortfoliosApi~archivePortfolioCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Portfolio} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Archive a portfolio.
     * @param {String} id Portfolio id
     * @param {module:api/PortfoliosApi~archivePortfolioCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Portfolio}
     */
    this.archivePortfolio = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling archivePortfolio");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Portfolio;

      return this.apiClient.callApi(
        '/portfolios/{id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createPortfolio operation.
     * @callback module:api/PortfoliosApi~createPortfolioCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Portfolio} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new portfolio.
     * @param {module:model/Portfolio} body Portfolio to create
     * @param {module:api/PortfoliosApi~createPortfolioCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Portfolio}
     */
    this.createPortfolio = function(body, callback) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createPortfolio");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Portfolio;

      return this.apiClient.callApi(
        '/portfolios', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the downloadSpreadsheetTemplate operation.
     * @callback module:api/PortfoliosApi~downloadSpreadsheetTemplateCallback
     * @param {String} error Error message, if any.
     * @param {'Blob'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Download spreadsheet template for portfolio
     * @param {String} portfolioId Portfolio id
     * @param {module:api/PortfoliosApi~downloadSpreadsheetTemplateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'Blob'}
     */
    this.downloadSpreadsheetTemplate = function(portfolioId, callback) {
      var postBody = null;

      // verify the required parameter 'portfolioId' is set
      if (portfolioId === undefined || portfolioId === null) {
        throw new Error("Missing the required parameter 'portfolioId' when calling downloadSpreadsheetTemplate");
      }


      var pathParams = {
        'portfolioId': portfolioId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = [];
      var accepts = ['application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'];
      var returnType = 'Blob';

      return this.apiClient.callApi(
        '/portfolios/{portfolioId}/spreadsheet/template', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the exportPortfolioData operation.
     * @callback module:api/PortfoliosApi~exportPortfolioDataCallback
     * @param {String} error Error message, if any.
     * @param {'Blob'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Export portfolio data in JSON format
     * @param {String} id Portfolio id
     * @param {module:api/PortfoliosApi~exportPortfolioDataCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'Blob'}
     */
    this.exportPortfolioData = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling exportPortfolioData");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = 'Blob';

      return this.apiClient.callApi(
        '/portfolios/{id}/pod', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getPortfolio operation.
     * @callback module:api/PortfoliosApi~getPortfolioCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Portfolio} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves a portfolio.
     * @param {String} id Portfolio id
     * @param {Object} opts Optional parameters
     * @param {String} opts.expand JSON string containing an array expand specifications for fields.  An expand specification must have a path and includes optional properties match, unique, allPossible, limit, offset, orderBy.
     * @param {module:api/PortfoliosApi~getPortfolioCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Portfolio}
     */
    this.getPortfolio = function(id, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getPortfolio");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
        'expand': opts['expand'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Portfolio;

      return this.apiClient.callApi(
        '/portfolios/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getPortfolioActivities operation.
     * @callback module:api/PortfoliosApi~getPortfolioActivitiesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Activities} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves portfolio activities log.
     * @param {String} id Portfolio id
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit Pagination limit
     * @param {Number} opts.offset Pagination offset
     * @param {String} opts.match Semi-colon delimited list of expressions to include in the response only the items in a collections that satisfy the expression(s). All other items should be exluded.
     * @param {module:api/PortfoliosApi~getPortfolioActivitiesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Activities}
     */
    this.getPortfolioActivities = function(id, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getPortfolioActivities");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset'],
        'match': opts['match'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Activities;

      return this.apiClient.callApi(
        '/portfolios/{id}/activities', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getPortfolioResourcePools operation.
     * @callback module:api/PortfoliosApi~getPortfolioResourcePoolsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResourcePools} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * (Deprecated. Use getResourcePoolsForPortfolioPlan) Retrieves resource pools in a portfolio.
     * @param {String} id Portfolio id
     * @param {Object} opts Optional parameters
     * @param {String} opts.expand JSON string containing an array expand specifications for fields.  An expand specification must have a path and includes optional properties match, unique, allPossible, limit, offset, orderBy.
     * @param {Number} opts.limit Pagination limit
     * @param {Number} opts.offset Pagination offset
     * @param {String} opts.orderBy Comma delimited list of order by expressions. Use &#39;-&#39; in front of expression for reverse order.
     * @param {String} opts.match Semi-colon delimited list of expressions to include in the response only the items in a collections that satisfy the expression(s). All other items should be exluded.
     * @param {module:api/PortfoliosApi~getPortfolioResourcePoolsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResourcePools}
     */
    this.getPortfolioResourcePools = function(id, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getPortfolioResourcePools");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
        'expand': opts['expand'],
        'limit': opts['limit'],
        'offset': opts['offset'],
        'orderBy': opts['orderBy'],
        'match': opts['match'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ResourcePools;

      return this.apiClient.callApi(
        '/portfolios/{id}/resourcePools', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getPortfolios operation.
     * @callback module:api/PortfoliosApi~getPortfoliosCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Portfolios} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get portfolios.
     * @param {Object} opts Optional parameters
     * @param {String} opts.expand JSON string containing an array expand specifications for fields.  An expand specification must have a path and includes optional properties match, unique, allPossible, limit, offset, orderBy.
     * @param {Number} opts.limit Pagination limit
     * @param {Number} opts.offset Pagination offset
     * @param {String} opts.orderBy Comma delimited list of order by expressions. Use &#39;-&#39; in front of expression for reverse order.
     * @param {String} opts.match Semi-colon delimited list of expressions to include in the response only the items in a collections that satisfy the expression(s). All other items should be exluded.
     * @param {module:api/PortfoliosApi~getPortfoliosCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Portfolios}
     */
    this.getPortfolios = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'expand': opts['expand'],
        'limit': opts['limit'],
        'offset': opts['offset'],
        'orderBy': opts['orderBy'],
        'match': opts['match'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Portfolios;

      return this.apiClient.callApi(
        '/portfolios', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getProjectsForPortfolio operation.
     * @callback module:api/PortfoliosApi~getProjectsForPortfolioCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Projects} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves projects for portfolio
     * @param {String} portfolioId Portfolio id
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit Pagination limit
     * @param {Number} opts.offset Pagination offset
     * @param {module:api/PortfoliosApi~getProjectsForPortfolioCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Projects}
     */
    this.getProjectsForPortfolio = function(portfolioId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'portfolioId' is set
      if (portfolioId === undefined || portfolioId === null) {
        throw new Error("Missing the required parameter 'portfolioId' when calling getProjectsForPortfolio");
      }


      var pathParams = {
        'portfolioId': portfolioId
      };
      var queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Projects;

      return this.apiClient.callApi(
        '/portfolios/{portfolioId}/projects', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getSpreadsheetReportForPortfolio operation.
     * @callback module:api/PortfoliosApi~getSpreadsheetReportForPortfolioCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SpreadsheetReport} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves spreadsheet report for portfolio
     * @param {String} portfolioId Portfolio id
     * @param {String} spreadsheetId Spreadsheet id
     * @param {String} sheetName Spreadsheet name
     * @param {Object} opts Optional parameters
     * @param {Object} opts.importType Import type
     * @param {String} opts.expand JSON string containing an array expand specifications for fields.  An expand specification must have a path and includes optional properties match, unique, allPossible, limit, offset, orderBy.
     * @param {module:api/PortfoliosApi~getSpreadsheetReportForPortfolioCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SpreadsheetReport}
     */
    this.getSpreadsheetReportForPortfolio = function(portfolioId, spreadsheetId, sheetName, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'portfolioId' is set
      if (portfolioId === undefined || portfolioId === null) {
        throw new Error("Missing the required parameter 'portfolioId' when calling getSpreadsheetReportForPortfolio");
      }

      // verify the required parameter 'spreadsheetId' is set
      if (spreadsheetId === undefined || spreadsheetId === null) {
        throw new Error("Missing the required parameter 'spreadsheetId' when calling getSpreadsheetReportForPortfolio");
      }

      // verify the required parameter 'sheetName' is set
      if (sheetName === undefined || sheetName === null) {
        throw new Error("Missing the required parameter 'sheetName' when calling getSpreadsheetReportForPortfolio");
      }


      var pathParams = {
        'portfolioId': portfolioId,
        'spreadsheetId': spreadsheetId
      };
      var queryParams = {
        'sheetName': sheetName,
        'importType': opts['importType'],
        'expand': opts['expand'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = SpreadsheetReport;

      return this.apiClient.callApi(
        '/portfolios/{portfolioId}/spreadsheet/{spreadsheetId}/report', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the importPortfolioData operation.
     * @callback module:api/PortfoliosApi~importPortfolioDataCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Portfolio} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Import portfolio data in JSON format
     * @param {String} id Portfolio id
     * @param {Object} opts Optional parameters
     * @param {File} opts.podFile The pod file to upload.
     * @param {String} opts.templateName pod template name to load
     * @param {module:api/PortfoliosApi~importPortfolioDataCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Portfolio}
     */
    this.importPortfolioData = function(id, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling importPortfolioData");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
        'templateName': opts['templateName'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'podFile': opts['podFile']
      };

      var authNames = ['OAuth2'];
      var contentTypes = ['multipart/form-data'];
      var accepts = ['application/json'];
      var returnType = Portfolio;

      return this.apiClient.callApi(
        '/portfolios/{id}/pod', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the regenerateUserRegistrationToken operation.
     * @callback module:api/PortfoliosApi~regenerateUserRegistrationTokenCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Portfolio} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Generates a new registration token
     * @param {String} id Portfolio id
     * @param {module:api/PortfoliosApi~regenerateUserRegistrationTokenCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Portfolio}
     */
    this.regenerateUserRegistrationToken = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling regenerateUserRegistrationToken");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Portfolio;

      return this.apiClient.callApi(
        '/portfolios/{id}/regenerateUserRegistrationToken', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the saveSpreadsheetForPortfolio operation.
     * @callback module:api/PortfoliosApi~saveSpreadsheetForPortfolioCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SpreadsheetReport} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Saves spreadsheet for portfolio
     * @param {String} portfolioId Portfolio id
     * @param {String} spreadsheetId Spreadsheet id
     * @param {String} sheetName Spreadsheet name
     * @param {Object} opts Optional parameters
     * @param {Object} opts.importType Import type
     * @param {module:api/PortfoliosApi~saveSpreadsheetForPortfolioCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SpreadsheetReport}
     */
    this.saveSpreadsheetForPortfolio = function(portfolioId, spreadsheetId, sheetName, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'portfolioId' is set
      if (portfolioId === undefined || portfolioId === null) {
        throw new Error("Missing the required parameter 'portfolioId' when calling saveSpreadsheetForPortfolio");
      }

      // verify the required parameter 'spreadsheetId' is set
      if (spreadsheetId === undefined || spreadsheetId === null) {
        throw new Error("Missing the required parameter 'spreadsheetId' when calling saveSpreadsheetForPortfolio");
      }

      // verify the required parameter 'sheetName' is set
      if (sheetName === undefined || sheetName === null) {
        throw new Error("Missing the required parameter 'sheetName' when calling saveSpreadsheetForPortfolio");
      }


      var pathParams = {
        'portfolioId': portfolioId,
        'spreadsheetId': spreadsheetId
      };
      var queryParams = {
        'sheetName': sheetName,
        'importType': opts['importType'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = SpreadsheetReport;

      return this.apiClient.callApi(
        '/portfolios/{portfolioId}/spreadsheet/{spreadsheetId}', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the saveSpreadsheetSourceForPortfolio operation.
     * @callback module:api/PortfoliosApi~saveSpreadsheetSourceForPortfolioCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Source} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Save spreadsheet source for a portfolio
     * @param {String} id Portfolio id
     * @param {File} file 
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.saveZeroAsBlank 
     * @param {module:api/PortfoliosApi~saveSpreadsheetSourceForPortfolioCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Source}
     */
    this.saveSpreadsheetSourceForPortfolio = function(id, file, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling saveSpreadsheetSourceForPortfolio");
      }

      // verify the required parameter 'file' is set
      if (file === undefined || file === null) {
        throw new Error("Missing the required parameter 'file' when calling saveSpreadsheetSourceForPortfolio");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
        'saveZeroAsBlank': opts['saveZeroAsBlank'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'file': file
      };

      var authNames = ['OAuth2'];
      var contentTypes = ['multipart/form-data'];
      var accepts = ['application/json'];
      var returnType = Source;

      return this.apiClient.callApi(
        '/portfolios/{id}/sources/spreadsheet', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the setCustomNames operation.
     * @callback module:api/PortfoliosApi~setCustomNamesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CustomName>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates custom names for portfolio
     * @param {String} portfolioId Portfolio id
     * @param {Array.<module:model/CustomName>} customNames Custom names
     * @param {module:api/PortfoliosApi~setCustomNamesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CustomName>}
     */
    this.setCustomNames = function(portfolioId, customNames, callback) {
      var postBody = customNames;

      // verify the required parameter 'portfolioId' is set
      if (portfolioId === undefined || portfolioId === null) {
        throw new Error("Missing the required parameter 'portfolioId' when calling setCustomNames");
      }

      // verify the required parameter 'customNames' is set
      if (customNames === undefined || customNames === null) {
        throw new Error("Missing the required parameter 'customNames' when calling setCustomNames");
      }


      var pathParams = {
        'portfolioId': portfolioId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [CustomName];

      return this.apiClient.callApi(
        '/portfolios/{portfolioId}/customNames', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updatePortfolio operation.
     * @callback module:api/PortfoliosApi~updatePortfolioCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Portfolio} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a portfolio.
     * @param {String} id Portfolio id
     * @param {module:model/Operations} body JSON Patch Operations to update a portfolio.
     * @param {Object} opts Optional parameters
     * @param {String} opts.expand JSON string containing an array expand specifications for fields.  An expand specification must have a path and includes optional properties match, unique, allPossible, limit, offset, orderBy.
     * @param {module:api/PortfoliosApi~updatePortfolioCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Portfolio}
     */
    this.updatePortfolio = function(id, body, opts, callback) {
      opts = opts || {};
      var postBody = body;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updatePortfolio");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updatePortfolio");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
        'expand': opts['expand'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = ['application/json-patch+json'];
      var accepts = ['application/json'];
      var returnType = Portfolio;

      return this.apiClient.callApi(
        '/portfolios/{id}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updatePortfolioFieldValues operation.
     * @callback module:api/PortfoliosApi~updatePortfolioFieldValuesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/FieldValue>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update field values in a portfolio
     * @param {Object} id Portfolio id
     * @param {Array.<module:model/FieldValuePatchItem>} body JSON Patch Operations to update multiple field values.
     * @param {Object} opts Optional parameters
     * @param {String} opts.expand JSON string containing an array expand specifications for fields.  An expand specification must have a path and includes optional properties match, unique, allPossible, limit, offset, orderBy.
     * @param {module:api/PortfoliosApi~updatePortfolioFieldValuesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/FieldValue>}
     */
    this.updatePortfolioFieldValues = function(id, body, opts, callback) {
      opts = opts || {};
      var postBody = body;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updatePortfolioFieldValues");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updatePortfolioFieldValues");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
        'expand': opts['expand'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = ['application/json-patch+json'];
      var accepts = ['application/json'];
      var returnType = [FieldValue];

      return this.apiClient.callApi(
        '/portfolios/{id}/fieldValues', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updatePortfolioResourcePoolBudgetAmounts operation.
     * @callback module:api/PortfoliosApi~updatePortfolioResourcePoolBudgetAmountsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ResourcePool>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * (Deprecated. Use updateResourcePoolBudgetAmountsForPortfolioPlan) Update resource pool budget amounts in a portfolio
     * @param {Object} id Portfolio id
     * @param {Array.<module:model/ResourcePoolBudgetAmountPatchItem>} body JSON Patch Operations to update multiple resource pool budget amounts
     * @param {module:api/PortfoliosApi~updatePortfolioResourcePoolBudgetAmountsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ResourcePool>}
     */
    this.updatePortfolioResourcePoolBudgetAmounts = function(id, body, callback) {
      var postBody = body;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updatePortfolioResourcePoolBudgetAmounts");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updatePortfolioResourcePoolBudgetAmounts");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = ['application/json-patch+json'];
      var accepts = ['application/json'];
      var returnType = [ResourcePool];

      return this.apiClient.callApi(
        '/portfolios/{id}/resourcePoolBudgetAmounts', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
