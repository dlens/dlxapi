/**
 * Decision Lens API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.7
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/CategoryOption', 'model/CategoryOptions', 'model/ErrorResponse'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/CategoryOption'), require('../model/CategoryOptions'), require('../model/ErrorResponse'));
  } else {
    // Browser globals (root is window)
    if (!root.DecisionLensApi) {
      root.DecisionLensApi = {};
    }
    root.DecisionLensApi.DefaultApi = factory(root.DecisionLensApi.ApiClient, root.DecisionLensApi.CategoryOption, root.DecisionLensApi.CategoryOptions, root.DecisionLensApi.ErrorResponse);
  }
}(this, function(ApiClient, CategoryOption, CategoryOptions, ErrorResponse) {
  'use strict';

  /**
   * Default service.
   * @module api/DefaultApi
   * @version 1.0
   */

  /**
   * Constructs a new DefaultApi. 
   * @alias module:api/DefaultApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the createCategoryOption operation.
     * @callback module:api/DefaultApi~createCategoryOptionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CategoryOption} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new category
     * @param {module:model/CategoryOption} body Category option to create
     * @param {module:api/DefaultApi~createCategoryOptionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CategoryOption}
     */
    this.createCategoryOption = function(body, callback) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createCategoryOption");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = CategoryOption;

      return this.apiClient.callApi(
        '/fields/{fieldId}/categoryOption', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createCategoryOptions operation.
     * @callback module:api/DefaultApi~createCategoryOptionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CategoryOptions} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates new category options
     * @param {module:model/CategoryOptions} body Category options to create
     * @param {module:api/DefaultApi~createCategoryOptionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CategoryOptions}
     */
    this.createCategoryOptions = function(body, callback) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createCategoryOptions");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = CategoryOptions;

      return this.apiClient.callApi(
        '/fields/{fieldId}/categoryOptions', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteCategoryOption operation.
     * @callback module:api/DefaultApi~deleteCategoryOptionCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a single category option
     * @param {String} fieldId Field id
     * @param {String} categoryOptionId Category Option ID
     * @param {module:api/DefaultApi~deleteCategoryOptionCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteCategoryOption = function(fieldId, categoryOptionId, callback) {
      var postBody = null;

      // verify the required parameter 'fieldId' is set
      if (fieldId === undefined || fieldId === null) {
        throw new Error("Missing the required parameter 'fieldId' when calling deleteCategoryOption");
      }

      // verify the required parameter 'categoryOptionId' is set
      if (categoryOptionId === undefined || categoryOptionId === null) {
        throw new Error("Missing the required parameter 'categoryOptionId' when calling deleteCategoryOption");
      }


      var pathParams = {
        'fieldId': fieldId,
        'categoryOptionId': categoryOptionId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/fields/{fieldId}/categoryOptions/{categoryOptionId}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getCategoryOption operation.
     * @callback module:api/DefaultApi~getCategoryOptionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CategoryOption} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves a category
     * @param {String} fieldId Field id
     * @param {String} categoryOptionId Category Option id
     * @param {module:api/DefaultApi~getCategoryOptionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CategoryOption}
     */
    this.getCategoryOption = function(fieldId, categoryOptionId, callback) {
      var postBody = null;

      // verify the required parameter 'fieldId' is set
      if (fieldId === undefined || fieldId === null) {
        throw new Error("Missing the required parameter 'fieldId' when calling getCategoryOption");
      }

      // verify the required parameter 'categoryOptionId' is set
      if (categoryOptionId === undefined || categoryOptionId === null) {
        throw new Error("Missing the required parameter 'categoryOptionId' when calling getCategoryOption");
      }


      var pathParams = {
        'fieldId': fieldId,
        'categoryOptionId': categoryOptionId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = CategoryOption;

      return this.apiClient.callApi(
        '/fields/{fieldId}/categoryOptions/{categoryOptionId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getCategoryOptionsForField operation.
     * @callback module:api/DefaultApi~getCategoryOptionsForFieldCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CategoryOptions} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves categories for a field
     * @param {String} fieldId Field id
     * @param {module:api/DefaultApi~getCategoryOptionsForFieldCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CategoryOptions}
     */
    this.getCategoryOptionsForField = function(fieldId, callback) {
      var postBody = null;

      // verify the required parameter 'fieldId' is set
      if (fieldId === undefined || fieldId === null) {
        throw new Error("Missing the required parameter 'fieldId' when calling getCategoryOptionsForField");
      }


      var pathParams = {
        'fieldId': fieldId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = CategoryOptions;

      return this.apiClient.callApi(
        '/fields/{fieldId}/categoryOptions', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateCategoryOption operation.
     * @callback module:api/DefaultApi~updateCategoryOptionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CategoryOption} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a single category
     * @param {String} fieldId Field id
     * @param {String} categoryOptionId Category Option id
     * @param {module:model/CategoryOption} body JSON Patch operations to update value field.
     * @param {module:api/DefaultApi~updateCategoryOptionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CategoryOption}
     */
    this.updateCategoryOption = function(fieldId, categoryOptionId, body, callback) {
      var postBody = body;

      // verify the required parameter 'fieldId' is set
      if (fieldId === undefined || fieldId === null) {
        throw new Error("Missing the required parameter 'fieldId' when calling updateCategoryOption");
      }

      // verify the required parameter 'categoryOptionId' is set
      if (categoryOptionId === undefined || categoryOptionId === null) {
        throw new Error("Missing the required parameter 'categoryOptionId' when calling updateCategoryOption");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateCategoryOption");
      }


      var pathParams = {
        'fieldId': fieldId,
        'categoryOptionId': categoryOptionId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = ['application/json-patch+json'];
      var accepts = ['application/json'];
      var returnType = CategoryOption;

      return this.apiClient.callApi(
        '/fields/{fieldId}/categoryOptions/{categoryOptionId}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
