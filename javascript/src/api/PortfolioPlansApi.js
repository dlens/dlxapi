/**
 * Decision Lens API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.7
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Activities', 'model/AddUsersRequest', 'model/BudgetAllocations', 'model/ErrorResponse', 'model/ExportConfig', 'model/FieldValue', 'model/FieldValuePatchItem', 'model/MinifiedProjects', 'model/Operations', 'model/PatchItem', 'model/PortfolioPlan', 'model/PortfolioPlanUser', 'model/PortfolioPlanUsers', 'model/PortfolioPlans', 'model/Project', 'model/Projects', 'model/Recommendation', 'model/Recommendations', 'model/ResourcePoolFieldValue', 'model/ResourcePoolFieldValuePatchItem'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/Activities'), require('../model/AddUsersRequest'), require('../model/BudgetAllocations'), require('../model/ErrorResponse'), require('../model/ExportConfig'), require('../model/FieldValue'), require('../model/FieldValuePatchItem'), require('../model/MinifiedProjects'), require('../model/Operations'), require('../model/PatchItem'), require('../model/PortfolioPlan'), require('../model/PortfolioPlanUser'), require('../model/PortfolioPlanUsers'), require('../model/PortfolioPlans'), require('../model/Project'), require('../model/Projects'), require('../model/Recommendation'), require('../model/Recommendations'), require('../model/ResourcePoolFieldValue'), require('../model/ResourcePoolFieldValuePatchItem'));
  } else {
    // Browser globals (root is window)
    if (!root.DecisionLensApi) {
      root.DecisionLensApi = {};
    }
    root.DecisionLensApi.PortfolioPlansApi = factory(root.DecisionLensApi.ApiClient, root.DecisionLensApi.Activities, root.DecisionLensApi.AddUsersRequest, root.DecisionLensApi.BudgetAllocations, root.DecisionLensApi.ErrorResponse, root.DecisionLensApi.ExportConfig, root.DecisionLensApi.FieldValue, root.DecisionLensApi.FieldValuePatchItem, root.DecisionLensApi.MinifiedProjects, root.DecisionLensApi.Operations, root.DecisionLensApi.PatchItem, root.DecisionLensApi.PortfolioPlan, root.DecisionLensApi.PortfolioPlanUser, root.DecisionLensApi.PortfolioPlanUsers, root.DecisionLensApi.PortfolioPlans, root.DecisionLensApi.Project, root.DecisionLensApi.Projects, root.DecisionLensApi.Recommendation, root.DecisionLensApi.Recommendations, root.DecisionLensApi.ResourcePoolFieldValue, root.DecisionLensApi.ResourcePoolFieldValuePatchItem);
  }
}(this, function(ApiClient, Activities, AddUsersRequest, BudgetAllocations, ErrorResponse, ExportConfig, FieldValue, FieldValuePatchItem, MinifiedProjects, Operations, PatchItem, PortfolioPlan, PortfolioPlanUser, PortfolioPlanUsers, PortfolioPlans, Project, Projects, Recommendation, Recommendations, ResourcePoolFieldValue, ResourcePoolFieldValuePatchItem) {
  'use strict';

  /**
   * PortfolioPlans service.
   * @module api/PortfolioPlansApi
   * @version 1.0
   */

  /**
   * Constructs a new PortfolioPlansApi. 
   * @alias module:api/PortfolioPlansApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the addPortfolioPlanUsers operation.
     * @callback module:api/PortfolioPlansApi~addPortfolioPlanUsersCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/PortfolioPlanUser>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add users to a portfolio plan.
     * @param {String} id Portfolio plan id
     * @param {Object} opts Optional parameters
     * @param {module:model/AddUsersRequest} opts.body Email ids and personal message
     * @param {module:api/PortfolioPlansApi~addPortfolioPlanUsersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/PortfolioPlanUser>}
     */
    this.addPortfolioPlanUsers = function(id, opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling addPortfolioPlanUsers");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [PortfolioPlanUser];

      return this.apiClient.callApi(
        '/portfolioPlans/{id}/users', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the applyRecommendationsForPortfolioPlan operation.
     * @callback module:api/PortfolioPlansApi~applyRecommendationsForPortfolioPlanCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/FieldValue>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Apply recommendations of a portfolio plan.
     * @param {String} id Portfolio plan id
     * @param {Array.<module:model/Recommendation>} body JSON Recommendation Objects to apply to a portfolio plan.
     * @param {module:api/PortfolioPlansApi~applyRecommendationsForPortfolioPlanCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/FieldValue>}
     */
    this.applyRecommendationsForPortfolioPlan = function(id, body, callback) {
      var postBody = body;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling applyRecommendationsForPortfolioPlan");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling applyRecommendationsForPortfolioPlan");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [FieldValue];

      return this.apiClient.callApi(
        '/portfolioPlans/{id}/recommendations', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createPortfolioPlan operation.
     * @callback module:api/PortfolioPlansApi~createPortfolioPlanCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PortfolioPlan} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a portfolio plan
     * @param {module:model/PortfolioPlan} body portfolio plan
     * @param {Object} opts Optional parameters
     * @param {String} opts.expand JSON string containing an array expand specifications for fields.  An expand specification must have a path and includes optional properties match, unique, allPossible, limit, offset, orderBy.
     * @param {module:api/PortfolioPlansApi~createPortfolioPlanCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PortfolioPlan}
     */
    this.createPortfolioPlan = function(body, opts, callback) {
      opts = opts || {};
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createPortfolioPlan");
      }


      var pathParams = {
      };
      var queryParams = {
        'expand': opts['expand'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = PortfolioPlan;

      return this.apiClient.callApi(
        '/portfolioPlans', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createProjectsInPortfolioPlan operation.
     * @callback module:api/PortfolioPlansApi~createProjectsInPortfolioPlanCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Project>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create new projects
     * @param {String} id Portfolio plan id
     * @param {Array.<module:model/Project>} body Projects to create
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.doNotExpand Whether to return collections for each project in the response. Default is to return saved field values. (default to false)
     * @param {module:api/PortfolioPlansApi~createProjectsInPortfolioPlanCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Project>}
     */
    this.createProjectsInPortfolioPlan = function(id, body, opts, callback) {
      opts = opts || {};
      var postBody = body;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling createProjectsInPortfolioPlan");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createProjectsInPortfolioPlan");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
        'doNotExpand': opts['doNotExpand'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [Project];

      return this.apiClient.callApi(
        '/portfolioPlans/{id}/projects', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deletePortfolioPlan operation.
     * @callback module:api/PortfolioPlansApi~deletePortfolioPlanCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes portfolio plan
     * @param {String} id portfolio plan id
     * @param {module:api/PortfolioPlansApi~deletePortfolioPlanCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deletePortfolioPlan = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deletePortfolioPlan");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/portfolioPlans/{id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the exportPortfolioPlan operation.
     * @callback module:api/PortfolioPlansApi~exportPortfolioPlanCallback
     * @param {String} error Error message, if any.
     * @param {'Blob'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Export portfolio plan
     * @param {String} id portfolio plan id
     * @param {Object} exportType export type (PROJECT, SCHEDULE, SPEND_PLAN)
     * @param {Object} exportFormat export format type (XLSX)
     * @param {Object} opts Optional parameters
     * @param {module:model/ExportConfig} opts.exportConfig export configuration object
     * @param {module:api/PortfolioPlansApi~exportPortfolioPlanCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'Blob'}
     */
    this.exportPortfolioPlan = function(id, exportType, exportFormat, opts, callback) {
      opts = opts || {};
      var postBody = opts['exportConfig'];

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling exportPortfolioPlan");
      }

      // verify the required parameter 'exportType' is set
      if (exportType === undefined || exportType === null) {
        throw new Error("Missing the required parameter 'exportType' when calling exportPortfolioPlan");
      }

      // verify the required parameter 'exportFormat' is set
      if (exportFormat === undefined || exportFormat === null) {
        throw new Error("Missing the required parameter 'exportFormat' when calling exportPortfolioPlan");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
        'exportType': exportType,
        'exportFormat': exportFormat,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'];
      var returnType = 'Blob';

      return this.apiClient.callApi(
        '/portfolioPlans/{id}/export', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getBudgetAllocationsForPortfolioPlan operation.
     * @callback module:api/PortfolioPlansApi~getBudgetAllocationsForPortfolioPlanCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BudgetAllocations} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves budget allocations for a portfolio plan.
     * @param {String} id Portfolio plan id
     * @param {Object} opts Optional parameters
     * @param {Number} opts.startTime Start time for the requested data
     * @param {Number} opts.endTime End time for the requested data
     * @param {module:api/PortfolioPlansApi~getBudgetAllocationsForPortfolioPlanCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BudgetAllocations}
     */
    this.getBudgetAllocationsForPortfolioPlan = function(id, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getBudgetAllocationsForPortfolioPlan");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
        'startTime': opts['startTime'],
        'endTime': opts['endTime'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = BudgetAllocations;

      return this.apiClient.callApi(
        '/portfolioPlans/{id}/budgetAllocations', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getMinifiedProjectsForPortfolioPlan operation.
     * @callback module:api/PortfolioPlansApi~getMinifiedProjectsForPortfolioPlanCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MinifiedProjects} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves minified projects contained within a portfolio plan.
     * @param {String} id Portfolio plan id
     * @param {Object} opts Optional parameters
     * @param {String} opts.expand JSON string containing an array expand specifications for fields.  An expand specification must have a path and includes optional properties match, unique, allPossible, limit, offset, orderBy.
     * @param {Number} opts.limit Pagination limit
     * @param {Number} opts.offset Pagination offset
     * @param {String} opts.orderBy Comma delimited list of order by expressions. Use &#39;-&#39; in front of expression for reverse order.
     * @param {String} opts.match Semi-colon delimited list of expressions to include in the response only the items in a collections that satisfy the expression(s). All other items should be exluded.
     * @param {module:api/PortfolioPlansApi~getMinifiedProjectsForPortfolioPlanCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MinifiedProjects}
     */
    this.getMinifiedProjectsForPortfolioPlan = function(id, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getMinifiedProjectsForPortfolioPlan");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
        'expand': opts['expand'],
        'limit': opts['limit'],
        'offset': opts['offset'],
        'orderBy': opts['orderBy'],
        'match': opts['match'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = MinifiedProjects;

      return this.apiClient.callApi(
        '/portfolioPlans/{id}/projects/minify', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getPortfolioPlan operation.
     * @callback module:api/PortfolioPlansApi~getPortfolioPlanCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PortfolioPlan} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves portfolio plan
     * @param {String} id portfolio plan id
     * @param {Object} opts Optional parameters
     * @param {String} opts.expand JSON string containing an array expand specifications for fields.  An expand specification must have a path and includes optional properties match, unique, allPossible, limit, offset, orderBy.
     * @param {module:api/PortfolioPlansApi~getPortfolioPlanCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PortfolioPlan}
     */
    this.getPortfolioPlan = function(id, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getPortfolioPlan");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
        'expand': opts['expand'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = PortfolioPlan;

      return this.apiClient.callApi(
        '/portfolioPlans/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getPortfolioPlanActivities operation.
     * @callback module:api/PortfolioPlansApi~getPortfolioPlanActivitiesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Activities} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves portfolio plan activities log.
     * @param {String} id Portfolio plan id
     * @param {Object} opts Optional parameters
     * @param {String} opts.projectId Use when you want to filter activities for a specific project
     * @param {Number} opts.limit Pagination limit
     * @param {Number} opts.offset Pagination offset
     * @param {String} opts.match Semi-colon delimited list of expressions to include in the response only the items in a collections that satisfy the expression(s). All other items should be exluded.
     * @param {module:api/PortfolioPlansApi~getPortfolioPlanActivitiesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Activities}
     */
    this.getPortfolioPlanActivities = function(id, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getPortfolioPlanActivities");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
        'projectId': opts['projectId'],
        'limit': opts['limit'],
        'offset': opts['offset'],
        'match': opts['match'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Activities;

      return this.apiClient.callApi(
        '/portfolioPlans/{id}/activities', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getPortfolioPlanUsers operation.
     * @callback module:api/PortfolioPlansApi~getPortfolioPlanUsersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PortfolioPlanUsers} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves users in a portfolio plan.
     * @param {String} id Portfolio plan id
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit Pagination limit
     * @param {Number} opts.offset Pagination offset
     * @param {String} opts.orderBy Comma delimited list of order by expressions. Use &#39;-&#39; in front of expression for reverse order.
     * @param {String} opts.match Semi-colon delimited list of expressions to include in the response only the items in a collections that satisfy the expression(s). All other items should be exluded.
     * @param {module:api/PortfolioPlansApi~getPortfolioPlanUsersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PortfolioPlanUsers}
     */
    this.getPortfolioPlanUsers = function(id, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getPortfolioPlanUsers");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset'],
        'orderBy': opts['orderBy'],
        'match': opts['match'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = PortfolioPlanUsers;

      return this.apiClient.callApi(
        '/portfolioPlans/{id}/users', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getPortfolioPlans operation.
     * @callback module:api/PortfolioPlansApi~getPortfolioPlansCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PortfolioPlans} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves portfolio plans
     * @param {String} portfolioId portfolio id
     * @param {Object} opts Optional parameters
     * @param {String} opts.expand JSON string containing an array expand specifications for fields.  An expand specification must have a path and includes optional properties match, unique, allPossible, limit, offset, orderBy.
     * @param {Number} opts.limit Pagination limit
     * @param {Number} opts.offset Pagination offset
     * @param {String} opts.orderBy Comma delimited list of order by expressions. Use &#39;-&#39; in front of expression for reverse order.
     * @param {String} opts.match Semi-colon delimited list of expressions to include in the response only the items in a collections that satisfy the expression(s). All other items should be exluded.
     * @param {module:api/PortfolioPlansApi~getPortfolioPlansCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PortfolioPlans}
     */
    this.getPortfolioPlans = function(portfolioId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'portfolioId' is set
      if (portfolioId === undefined || portfolioId === null) {
        throw new Error("Missing the required parameter 'portfolioId' when calling getPortfolioPlans");
      }


      var pathParams = {
      };
      var queryParams = {
        'portfolioId': portfolioId,
        'expand': opts['expand'],
        'limit': opts['limit'],
        'offset': opts['offset'],
        'orderBy': opts['orderBy'],
        'match': opts['match'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = PortfolioPlans;

      return this.apiClient.callApi(
        '/portfolioPlans', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getProjectForPortfolioPlan operation.
     * @callback module:api/PortfolioPlansApi~getProjectForPortfolioPlanCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Project} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves project contained within a portfolio plan.
     * @param {String} portfolioPlanId Portfolio plan id
     * @param {String} projectId project id
     * @param {module:api/PortfolioPlansApi~getProjectForPortfolioPlanCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Project}
     */
    this.getProjectForPortfolioPlan = function(portfolioPlanId, projectId, callback) {
      var postBody = null;

      // verify the required parameter 'portfolioPlanId' is set
      if (portfolioPlanId === undefined || portfolioPlanId === null) {
        throw new Error("Missing the required parameter 'portfolioPlanId' when calling getProjectForPortfolioPlan");
      }

      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling getProjectForPortfolioPlan");
      }


      var pathParams = {
        'portfolioPlanId': portfolioPlanId,
        'projectId': projectId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Project;

      return this.apiClient.callApi(
        '/portfolioPlans/{portfolioPlanId}/projects/{projectId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getProjectPortfolioPlansForPortfolioPlanAndPortfolio operation.
     * @callback module:api/PortfolioPlansApi~getProjectPortfolioPlansForPortfolioPlanAndPortfolioCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Projects} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves projects for portfolio plan
     * @param {String} portfolioId Portfolio id
     * @param {String} portfolioPlanId Portfolio Plan id
     * @param {Number} positionFrom positionFrom for projects
     * @param {Number} positionTo positionTo for projects
     * @param {module:api/PortfolioPlansApi~getProjectPortfolioPlansForPortfolioPlanAndPortfolioCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Projects}
     */
    this.getProjectPortfolioPlansForPortfolioPlanAndPortfolio = function(portfolioId, portfolioPlanId, positionFrom, positionTo, callback) {
      var postBody = null;

      // verify the required parameter 'portfolioId' is set
      if (portfolioId === undefined || portfolioId === null) {
        throw new Error("Missing the required parameter 'portfolioId' when calling getProjectPortfolioPlansForPortfolioPlanAndPortfolio");
      }

      // verify the required parameter 'portfolioPlanId' is set
      if (portfolioPlanId === undefined || portfolioPlanId === null) {
        throw new Error("Missing the required parameter 'portfolioPlanId' when calling getProjectPortfolioPlansForPortfolioPlanAndPortfolio");
      }

      // verify the required parameter 'positionFrom' is set
      if (positionFrom === undefined || positionFrom === null) {
        throw new Error("Missing the required parameter 'positionFrom' when calling getProjectPortfolioPlansForPortfolioPlanAndPortfolio");
      }

      // verify the required parameter 'positionTo' is set
      if (positionTo === undefined || positionTo === null) {
        throw new Error("Missing the required parameter 'positionTo' when calling getProjectPortfolioPlansForPortfolioPlanAndPortfolio");
      }


      var pathParams = {
        'portfolioId': portfolioId,
        'portfolioPlanId': portfolioPlanId
      };
      var queryParams = {
        'positionFrom': positionFrom,
        'positionTo': positionTo,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Projects;

      return this.apiClient.callApi(
        '/portfolioPlans/{portfolioPlanId}/portfolios/{portfolioId}/projectPortfolioPlans', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getProjectsForPortfolioPlan operation.
     * @callback module:api/PortfolioPlansApi~getProjectsForPortfolioPlanCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Projects} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves projects contained within a portfolio plan. Possible expand paths - (items.fieldValues, contributingUserIds)
     * @param {String} id Portfolio plan id
     * @param {Object} opts Optional parameters
     * @param {String} opts.expand JSON string containing an array expand specifications for fields.  An expand specification must have a path and includes optional properties match, unique, allPossible, limit, offset, orderBy.
     * @param {Number} opts.limit Pagination limit
     * @param {Number} opts.offset Pagination offset
     * @param {String} opts.orderBy Comma delimited list of order by expressions. Use &#39;-&#39; in front of expression for reverse order.
     * @param {String} opts.match Semi-colon delimited list of expressions to include in the response only the items in a collections that satisfy the expression(s). All other items should be exluded.
     * @param {module:api/PortfolioPlansApi~getProjectsForPortfolioPlanCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Projects}
     */
    this.getProjectsForPortfolioPlan = function(id, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getProjectsForPortfolioPlan");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
        'expand': opts['expand'],
        'limit': opts['limit'],
        'offset': opts['offset'],
        'orderBy': opts['orderBy'],
        'match': opts['match'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Projects;

      return this.apiClient.callApi(
        '/portfolioPlans/{id}/projects', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getRecommendationsForPortfolioPlan operation.
     * @callback module:api/PortfolioPlansApi~getRecommendationsForPortfolioPlanCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Recommendations} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves recommendations for a portfolio plan.
     * @param {String} id Portfolio plan id
     * @param {Object} opts Optional parameters
     * @param {Number} opts.startDate Start time period for the time horizon.
     * @param {Number} opts.endDate End time period for the time horizon.
     * @param {Object} opts.planType Plan type (default to OVERALL)
     * @param {module:api/PortfolioPlansApi~getRecommendationsForPortfolioPlanCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Recommendations}
     */
    this.getRecommendationsForPortfolioPlan = function(id, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getRecommendationsForPortfolioPlan");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
        'startDate': opts['startDate'],
        'endDate': opts['endDate'],
        'planType': opts['planType'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Recommendations;

      return this.apiClient.callApi(
        '/portfolioPlans/{id}/recommendations', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getScheduleForPortfolioPlan operation.
     * @callback module:api/PortfolioPlansApi~getScheduleForPortfolioPlanCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Recommendations} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves schedule for portfolio plan. The schedule is stored in a new portfolio plan.
     * @param {String} id Portfolio Plan id
     * @param {Object} opts Optional parameters
     * @param {Number} opts.startDate Start time period for the time horizon.
     * @param {Number} opts.endDate End time period for the time horizon.
     * @param {Number} opts.toleranceLevelPercentage Percentage parameter to allow scheduling values within a deviation, defined by [target*(1 - tolerance), target*(1 + tolerance] bounds. Value should be between 0 and 1. Defaults to 0.1
     * @param {Object} opts.schedulingCriteria Criteria used to function to evaluate different schedules. Defaults to TimePeriodOverBudgetPercent
     * @param {module:api/PortfolioPlansApi~getScheduleForPortfolioPlanCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Recommendations}
     */
    this.getScheduleForPortfolioPlan = function(id, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getScheduleForPortfolioPlan");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
        'startDate': opts['startDate'],
        'endDate': opts['endDate'],
        'toleranceLevelPercentage': opts['toleranceLevelPercentage'],
        'schedulingCriteria': opts['schedulingCriteria'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Recommendations;

      return this.apiClient.callApi(
        '/portfolioPlans/{id}/schedule', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the rebaselinePortfolioPlan operation.
     * @callback module:api/PortfolioPlansApi~rebaselinePortfolioPlanCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PortfolioPlan} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Rebaseline a portfolio plan.
     * @param {String} id Portfolio plan id
     * @param {module:api/PortfolioPlansApi~rebaselinePortfolioPlanCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PortfolioPlan}
     */
    this.rebaselinePortfolioPlan = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling rebaselinePortfolioPlan");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = PortfolioPlan;

      return this.apiClient.callApi(
        '/portfolioPlans/{id}/rebaseline', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updatePortfolioPlan operation.
     * @callback module:api/PortfolioPlansApi~updatePortfolioPlanCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PortfolioPlan} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a portfolio plan utilizing JSON Patch Operations. 
     * @param {String} id PortfolioPlan id
     * @param {module:model/Operations} body JSON Patch Operations to update portfolio plan.
     * @param {Object} opts Optional parameters
     * @param {String} opts.expand JSON string containing an array expand specifications for fields.  An expand specification must have a path and includes optional properties match, unique, allPossible, limit, offset, orderBy.
     * @param {module:api/PortfolioPlansApi~updatePortfolioPlanCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PortfolioPlan}
     */
    this.updatePortfolioPlan = function(id, body, opts, callback) {
      opts = opts || {};
      var postBody = body;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updatePortfolioPlan");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updatePortfolioPlan");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
        'expand': opts['expand'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = ['application/json-patch+json'];
      var accepts = ['application/json'];
      var returnType = PortfolioPlan;

      return this.apiClient.callApi(
        '/portfolioPlans/{id}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updatePortfolioPlanBudgetFieldValues operation.
     * @callback module:api/PortfolioPlansApi~updatePortfolioPlanBudgetFieldValuesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ResourcePoolFieldValue>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update field values in a portfolio plan
     * @param {Object} id Portfolio plan id
     * @param {Array.<module:model/ResourcePoolFieldValuePatchItem>} body JSON Patch Operations to update multiple field values.
     * @param {Object} opts Optional parameters
     * @param {String} opts.expand JSON string containing an array expand specifications for fields.  An expand specification must have a path and includes optional properties match, unique, allPossible, limit, offset, orderBy.
     * @param {module:api/PortfolioPlansApi~updatePortfolioPlanBudgetFieldValuesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ResourcePoolFieldValue>}
     */
    this.updatePortfolioPlanBudgetFieldValues = function(id, body, opts, callback) {
      opts = opts || {};
      var postBody = body;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updatePortfolioPlanBudgetFieldValues");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updatePortfolioPlanBudgetFieldValues");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
        'expand': opts['expand'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = ['application/json-patch+json'];
      var accepts = ['application/json'];
      var returnType = [ResourcePoolFieldValue];

      return this.apiClient.callApi(
        '/portfolioPlans/{id}/fieldValues/budgets', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updatePortfolioPlanFieldValues operation.
     * @callback module:api/PortfolioPlansApi~updatePortfolioPlanFieldValuesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/FieldValue>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update field values in a portfolio plan
     * @param {Object} id Portfolio plan id
     * @param {Array.<module:model/FieldValuePatchItem>} body JSON Patch Operations to update multiple field values.
     * @param {Object} opts Optional parameters
     * @param {String} opts.expand JSON string containing an array expand specifications for fields.  An expand specification must have a path and includes optional properties match, unique, allPossible, limit, offset, orderBy.
     * @param {module:api/PortfolioPlansApi~updatePortfolioPlanFieldValuesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/FieldValue>}
     */
    this.updatePortfolioPlanFieldValues = function(id, body, opts, callback) {
      opts = opts || {};
      var postBody = body;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updatePortfolioPlanFieldValues");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updatePortfolioPlanFieldValues");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
        'expand': opts['expand'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = ['application/json-patch+json'];
      var accepts = ['application/json'];
      var returnType = [FieldValue];

      return this.apiClient.callApi(
        '/portfolioPlans/{id}/fieldValues', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updatePortfolioPlanFieldValuesWithZero operation.
     * @callback module:api/PortfolioPlansApi~updatePortfolioPlanFieldValuesWithZeroCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/FieldValue>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * update portfolio plan numeric field values with 0
     * @param {Object} id Portfolio plan id
     * @param {Array.<module:model/FieldValuePatchItem>} body JSON Patch Operations to update multiple field values.
     * @param {Object} opts Optional parameters
     * @param {String} opts.expand JSON string containing an array expand specifications for fields.  An expand specification must have a path and includes optional properties match, unique, allPossible, limit, offset, orderBy.
     * @param {module:api/PortfolioPlansApi~updatePortfolioPlanFieldValuesWithZeroCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/FieldValue>}
     */
    this.updatePortfolioPlanFieldValuesWithZero = function(id, body, opts, callback) {
      opts = opts || {};
      var postBody = body;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updatePortfolioPlanFieldValuesWithZero");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updatePortfolioPlanFieldValuesWithZero");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
        'expand': opts['expand'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = ['application/json-patch+json'];
      var accepts = ['application/json'];
      var returnType = [FieldValue];

      return this.apiClient.callApi(
        '/portfolioPlans/{id}/fieldValues/zero', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updatePortfolioPlanUsers operation.
     * @callback module:api/PortfolioPlansApi~updatePortfolioPlanUsersCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/PortfolioPlanUser>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update users in a portfolio plan
     * @param {Object} id Portfolio plan id
     * @param {Array.<module:model/PatchItem>} body JSON Patch Operations to update multiple portfolio plan users.
     * @param {module:api/PortfolioPlansApi~updatePortfolioPlanUsersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/PortfolioPlanUser>}
     */
    this.updatePortfolioPlanUsers = function(id, body, callback) {
      var postBody = body;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updatePortfolioPlanUsers");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updatePortfolioPlanUsers");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = ['application/json-patch+json'];
      var accepts = ['application/json'];
      var returnType = [PortfolioPlanUser];

      return this.apiClient.callApi(
        '/portfolioPlans/{id}/users', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
