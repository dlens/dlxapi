/**
 * Decision Lens API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.7
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/AddUsersRequest', 'model/ErrorResponse', 'model/MinifiedProjects', 'model/PortfolioPlanUser', 'model/Project', 'model/Projects', 'model/RemoveContributingUsersRequest', 'model/SetDependenciesRequest'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/AddUsersRequest'), require('../model/ErrorResponse'), require('../model/MinifiedProjects'), require('../model/PortfolioPlanUser'), require('../model/Project'), require('../model/Projects'), require('../model/RemoveContributingUsersRequest'), require('../model/SetDependenciesRequest'));
  } else {
    // Browser globals (root is window)
    if (!root.DecisionLensApi) {
      root.DecisionLensApi = {};
    }
    root.DecisionLensApi.ProjectsApi = factory(root.DecisionLensApi.ApiClient, root.DecisionLensApi.AddUsersRequest, root.DecisionLensApi.ErrorResponse, root.DecisionLensApi.MinifiedProjects, root.DecisionLensApi.PortfolioPlanUser, root.DecisionLensApi.Project, root.DecisionLensApi.Projects, root.DecisionLensApi.RemoveContributingUsersRequest, root.DecisionLensApi.SetDependenciesRequest);
  }
}(this, function(ApiClient, AddUsersRequest, ErrorResponse, MinifiedProjects, PortfolioPlanUser, Project, Projects, RemoveContributingUsersRequest, SetDependenciesRequest) {
  'use strict';

  /**
   * Projects service.
   * @module api/ProjectsApi
   * @version 1.0
   */

  /**
   * Constructs a new ProjectsApi. 
   * @alias module:api/ProjectsApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the addContributingUsersForProject operation.
     * @callback module:api/ProjectsApi~addContributingUsersForProjectCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/PortfolioPlanUser>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add users to a project.
     * @param {String} id project id
     * @param {Object} opts Optional parameters
     * @param {module:model/AddUsersRequest} opts.body Email ids and personal message
     * @param {module:api/ProjectsApi~addContributingUsersForProjectCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/PortfolioPlanUser>}
     */
    this.addContributingUsersForProject = function(id, opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling addContributingUsersForProject");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [PortfolioPlanUser];

      return this.apiClient.callApi(
        '/projects/{id}/users', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the copyProject operation.
     * @callback module:api/ProjectsApi~copyProjectCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Project} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a copy of the project, including portfolio data, dependencies, attachments
     * @param {String} id project id
     * @param {Object} opts Optional parameters
     * @param {module:model/Project} opts.body Info to be included in the new project copy; only name will suffice
     * @param {module:api/ProjectsApi~copyProjectCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Project}
     */
    this.copyProject = function(id, opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling copyProject");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Project;

      return this.apiClient.callApi(
        '/projects/{id}/copy', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createProject operation.
     * @callback module:api/ProjectsApi~createProjectCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Project} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new project.
     * @param {String} portfolioId Portfolio id
     * @param {module:model/Project} project Project to create
     * @param {module:api/ProjectsApi~createProjectCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Project}
     */
    this.createProject = function(portfolioId, project, callback) {
      var postBody = project;

      // verify the required parameter 'portfolioId' is set
      if (portfolioId === undefined || portfolioId === null) {
        throw new Error("Missing the required parameter 'portfolioId' when calling createProject");
      }

      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling createProject");
      }


      var pathParams = {
      };
      var queryParams = {
        'portfolioId': portfolioId,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Project;

      return this.apiClient.callApi(
        '/projects', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteFieldValuesForProject operation.
     * @callback module:api/ProjectsApi~deleteFieldValuesForProjectCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes all field values for a certain fields for a particular project
     * @param {String} id project id
     * @param {Array.<String>} fieldIds field ids
     * @param {module:api/ProjectsApi~deleteFieldValuesForProjectCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteFieldValuesForProject = function(id, fieldIds, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteFieldValuesForProject");
      }

      // verify the required parameter 'fieldIds' is set
      if (fieldIds === undefined || fieldIds === null) {
        throw new Error("Missing the required parameter 'fieldIds' when calling deleteFieldValuesForProject");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
        'fieldIds': {
          value: fieldIds,
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/projects/{id}/fieldValues', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteProject operation.
     * @callback module:api/ProjectsApi~deleteProjectCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a project.
     * @param {String} id Project id
     * @param {module:api/ProjectsApi~deleteProjectCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteProject = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteProject");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/projects/{id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteProjects operation.
     * @callback module:api/ProjectsApi~deleteProjectsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete projects.
     * @param {Array.<module:model/String>} projectIds Project ids
     * @param {module:api/ProjectsApi~deleteProjectsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteProjects = function(projectIds, callback) {
      var postBody = projectIds;

      // verify the required parameter 'projectIds' is set
      if (projectIds === undefined || projectIds === null) {
        throw new Error("Missing the required parameter 'projectIds' when calling deleteProjects");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = ['application/json'];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/projects/delete', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getProject operation.
     * @callback module:api/ProjectsApi~getProjectCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Project} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves a project.
     * @param {String} id Project id
     * @param {module:api/ProjectsApi~getProjectCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Project}
     */
    this.getProject = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getProject");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Project;

      return this.apiClient.callApi(
        '/projects/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getProjectForPortfolioPlan operation.
     * @callback module:api/ProjectsApi~getProjectForPortfolioPlanCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Project} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves a project for a portfolioPlan.
     * @param {String} projectId Project id
     * @param {String} portfolioPlanId PortfolioPlan id
     * @param {module:api/ProjectsApi~getProjectForPortfolioPlanCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Project}
     */
    this.getProjectForPortfolioPlan = function(projectId, portfolioPlanId, callback) {
      var postBody = null;

      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling getProjectForPortfolioPlan");
      }

      // verify the required parameter 'portfolioPlanId' is set
      if (portfolioPlanId === undefined || portfolioPlanId === null) {
        throw new Error("Missing the required parameter 'portfolioPlanId' when calling getProjectForPortfolioPlan");
      }


      var pathParams = {
        'projectId': projectId,
        'portfolioPlanId': portfolioPlanId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Project;

      return this.apiClient.callApi(
        '/projects/{projectId}/portfolioPlan/{portfolioPlanId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getProjectsDataForPortfolio operation.
     * @callback module:api/ProjectsApi~getProjectsDataForPortfolioCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MinifiedProjects} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fetch project data for portfolio and data id.
     * @param {String} portfolioId Portfolio Id
     * @param {String} dataId Data Id
     * @param {module:api/ProjectsApi~getProjectsDataForPortfolioCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MinifiedProjects}
     */
    this.getProjectsDataForPortfolio = function(portfolioId, dataId, callback) {
      var postBody = null;

      // verify the required parameter 'portfolioId' is set
      if (portfolioId === undefined || portfolioId === null) {
        throw new Error("Missing the required parameter 'portfolioId' when calling getProjectsDataForPortfolio");
      }

      // verify the required parameter 'dataId' is set
      if (dataId === undefined || dataId === null) {
        throw new Error("Missing the required parameter 'dataId' when calling getProjectsDataForPortfolio");
      }


      var pathParams = {
      };
      var queryParams = {
        'portfolioId': portfolioId,
        'dataId': dataId,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = MinifiedProjects;

      return this.apiClient.callApi(
        '/projects/data', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getProjectsForPortfolio operation.
     * @callback module:api/ProjectsApi~getProjectsForPortfolioCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Projects} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves projects contained within a portfolio. Possible expand paths are - (items.fieldValues, contributingUserIds)
     * @param {String} portfolioId Portfolio id
     * @param {Object} opts Optional parameters
     * @param {String} opts.portfolioPlanId Portfolio plan id. If not specified the portfolio plan will default to current baseline
     * @param {String} opts.expand JSON string containing an array expand specifications for fields.  An expand specification must have a path and includes optional properties match, unique, allPossible, limit, offset, orderBy.
     * @param {Number} opts.limit Pagination limit
     * @param {Number} opts.offset Pagination offset
     * @param {String} opts.orderBy Comma delimited list of order by expressions. Use &#39;-&#39; in front of expression for reverse order.
     * @param {String} opts.match Semi-colon delimited list of expressions to include in the response only the items in a collections that satisfy the expression(s). All other items should be exluded.
     * @param {module:api/ProjectsApi~getProjectsForPortfolioCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Projects}
     */
    this.getProjectsForPortfolio = function(portfolioId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'portfolioId' is set
      if (portfolioId === undefined || portfolioId === null) {
        throw new Error("Missing the required parameter 'portfolioId' when calling getProjectsForPortfolio");
      }


      var pathParams = {
      };
      var queryParams = {
        'portfolioId': portfolioId,
        'portfolioPlanId': opts['portfolioPlanId'],
        'expand': opts['expand'],
        'limit': opts['limit'],
        'offset': opts['offset'],
        'orderBy': opts['orderBy'],
        'match': opts['match'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Projects;

      return this.apiClient.callApi(
        '/projects', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the removeContributingUsersFromProject operation.
     * @callback module:api/ProjectsApi~removeContributingUsersFromProjectCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove contributing users from a project.
     * @param {String} id project id
     * @param {module:model/RemoveContributingUsersRequest} body contributing user ids
     * @param {module:api/ProjectsApi~removeContributingUsersFromProjectCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.removeContributingUsersFromProject = function(id, body, callback) {
      var postBody = body;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling removeContributingUsersFromProject");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling removeContributingUsersFromProject");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/projects/{id}/users', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the setProjectDependencies operation.
     * @callback module:api/ProjectsApi~setProjectDependenciesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Projects} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Adds or removes dependsOn and/or dependant linked projects to a project.
     * @param {String} id project id
     * @param {Object} opts Optional parameters
     * @param {module:model/SetDependenciesRequest} opts.body dependsOn and hasDependent project Ids
     * @param {module:api/ProjectsApi~setProjectDependenciesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Projects}
     */
    this.setProjectDependencies = function(id, opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling setProjectDependencies");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Projects;

      return this.apiClient.callApi(
        '/projects/{id}/dependencies', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
