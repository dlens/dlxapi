/**
 * Decision Lens API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.7
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Attachment', 'model/Attachments', 'model/ErrorResponse', 'model/Operations'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/Attachment'), require('../model/Attachments'), require('../model/ErrorResponse'), require('../model/Operations'));
  } else {
    // Browser globals (root is window)
    if (!root.DecisionLensApi) {
      root.DecisionLensApi = {};
    }
    root.DecisionLensApi.AttachmentsApi = factory(root.DecisionLensApi.ApiClient, root.DecisionLensApi.Attachment, root.DecisionLensApi.Attachments, root.DecisionLensApi.ErrorResponse, root.DecisionLensApi.Operations);
  }
}(this, function(ApiClient, Attachment, Attachments, ErrorResponse, Operations) {
  'use strict';

  /**
   * Attachments service.
   * @module api/AttachmentsApi
   * @version 1.0
   */

  /**
   * Constructs a new AttachmentsApi. 
   * @alias module:api/AttachmentsApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the createAttachment operation.
     * @callback module:api/AttachmentsApi~createAttachmentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Attachment} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new attachment from a file upload
     * @param {File} file File to be uploaded
     * @param {String} portfolioId the portfolio id that the attachment belongs to
     * @param {module:api/AttachmentsApi~createAttachmentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Attachment}
     */
    this.createAttachment = function(file, portfolioId, callback) {
      var postBody = null;

      // verify the required parameter 'file' is set
      if (file === undefined || file === null) {
        throw new Error("Missing the required parameter 'file' when calling createAttachment");
      }

      // verify the required parameter 'portfolioId' is set
      if (portfolioId === undefined || portfolioId === null) {
        throw new Error("Missing the required parameter 'portfolioId' when calling createAttachment");
      }


      var pathParams = {
      };
      var queryParams = {
        'portfolioId': portfolioId,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'file': file
      };

      var authNames = ['OAuth2'];
      var contentTypes = ['multipart/form-data'];
      var accepts = ['application/json'];
      var returnType = Attachment;

      return this.apiClient.callApi(
        '/attachments', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the downloadAttachment operation.
     * @callback module:api/AttachmentsApi~downloadAttachmentCallback
     * @param {String} error Error message, if any.
     * @param {'Blob'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Downloads the file content of an Attachment
     * @param {String} id Attachment id
     * @param {module:api/AttachmentsApi~downloadAttachmentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'Blob'}
     */
    this.downloadAttachment = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling downloadAttachment");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = [];
      var accepts = ['application/octet-stream'];
      var returnType = 'Blob';

      return this.apiClient.callApi(
        '/attachments/{id}/download', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getAttachment operation.
     * @callback module:api/AttachmentsApi~getAttachmentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Attachment} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Attachment by id
     * @param {String} id Attachment id
     * @param {module:api/AttachmentsApi~getAttachmentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Attachment}
     */
    this.getAttachment = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getAttachment");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Attachment;

      return this.apiClient.callApi(
        '/attachments/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getAttachments operation.
     * @callback module:api/AttachmentsApi~getAttachmentsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Attachments} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Attachment by portfolio id
     * @param {String} portfolioId Portfolio id
     * @param {Object} opts Optional parameters
     * @param {Number} opts.offset Pagination offset
     * @param {Number} opts.limit Pagination limit
     * @param {String} opts.orderBy Comma delimited list of order by expressions. Use &#39;-&#39; in front of expression for reverse order.
     * @param {String} opts.match Semi-colon delimited list of expressions to include in the response only the items in a collections that satisfy the expression(s). All other items should be exluded.
     * @param {module:api/AttachmentsApi~getAttachmentsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Attachments}
     */
    this.getAttachments = function(portfolioId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'portfolioId' is set
      if (portfolioId === undefined || portfolioId === null) {
        throw new Error("Missing the required parameter 'portfolioId' when calling getAttachments");
      }


      var pathParams = {
      };
      var queryParams = {
        'portfolioId': portfolioId,
        'offset': opts['offset'],
        'limit': opts['limit'],
        'orderBy': opts['orderBy'],
        'match': opts['match'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Attachments;

      return this.apiClient.callApi(
        '/attachments', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateAttachment operation.
     * @callback module:api/AttachmentsApi~updateAttachmentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Attachment} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a single attachment
     * @param {String} id Attachment ID
     * @param {module:model/Operations} body JSON Patch operations to update value field.
     * @param {module:api/AttachmentsApi~updateAttachmentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Attachment}
     */
    this.updateAttachment = function(id, body, callback) {
      var postBody = body;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateAttachment");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateAttachment");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = ['application/json-patch+json'];
      var accepts = ['application/json'];
      var returnType = Attachment;

      return this.apiClient.callApi(
        '/attachments/{id}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
