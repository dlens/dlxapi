/**
 * Decision Lens API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.7
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/ErrorResponse', 'model/JiraComment', 'model/JiraFieldMapping', 'model/JiraFieldMappings', 'model/JiraInstance', 'model/MappedProject'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/ErrorResponse'), require('../model/JiraComment'), require('../model/JiraFieldMapping'), require('../model/JiraFieldMappings'), require('../model/JiraInstance'), require('../model/MappedProject'));
  } else {
    // Browser globals (root is window)
    if (!root.DecisionLensApi) {
      root.DecisionLensApi = {};
    }
    root.DecisionLensApi.JiraApi = factory(root.DecisionLensApi.ApiClient, root.DecisionLensApi.ErrorResponse, root.DecisionLensApi.JiraComment, root.DecisionLensApi.JiraFieldMapping, root.DecisionLensApi.JiraFieldMappings, root.DecisionLensApi.JiraInstance, root.DecisionLensApi.MappedProject);
  }
}(this, function(ApiClient, ErrorResponse, JiraComment, JiraFieldMapping, JiraFieldMappings, JiraInstance, MappedProject) {
  'use strict';

  /**
   * Jira service.
   * @module api/JiraApi
   * @version 1.0
   */

  /**
   * Constructs a new JiraApi. 
   * @alias module:api/JiraApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the createCommentFromJira operation.
     * @callback module:api/JiraApi~createCommentFromJiraCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a comment in Decision Lens based on a Jira comment.
     * @param {String} id jira instance id
     * @param {module:model/JiraComment} body Comment to create
     * @param {module:api/JiraApi~createCommentFromJiraCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.createCommentFromJira = function(id, body, callback) {
      var postBody = body;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling createCommentFromJira");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createCommentFromJira");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/jira/instance/{id}/comment', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createJiraFieldMapping operation.
     * @callback module:api/JiraApi~createJiraFieldMappingCallback
     * @param {String} error Error message, if any.
     * @param {module:model/JiraFieldMapping} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates jira field mapping.
     * @param {String} id jira instance id
     * @param {module:model/JiraFieldMapping} body Field mapping to create
     * @param {module:api/JiraApi~createJiraFieldMappingCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/JiraFieldMapping}
     */
    this.createJiraFieldMapping = function(id, body, callback) {
      var postBody = body;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling createJiraFieldMapping");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createJiraFieldMapping");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = JiraFieldMapping;

      return this.apiClient.callApi(
        '/jira/instance/{id}/mapping', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the createJiraInstance operation.
     * @callback module:api/JiraApi~createJiraInstanceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/JiraInstance} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates jira instance.
     * @param {module:model/JiraInstance} body Jira instance to create
     * @param {module:api/JiraApi~createJiraInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/JiraInstance}
     */
    this.createJiraInstance = function(body, callback) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createJiraInstance");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = JiraInstance;

      return this.apiClient.callApi(
        '/jira/instance', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteFieldMapping operation.
     * @callback module:api/JiraApi~deleteFieldMappingCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete jira field mapping
     * @param {String} id jira field mapping id
     * @param {module:api/JiraApi~deleteFieldMappingCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteFieldMapping = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteFieldMapping");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/jira/instance/{id}/mapping/{mappingId}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteJiraInstance operation.
     * @callback module:api/JiraApi~deleteJiraInstanceCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete jira instance
     * @param {String} id jira instance id
     * @param {module:api/JiraApi~deleteJiraInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteJiraInstance = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteJiraInstance");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/jira/instance/{id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the disableJiraInstance operation.
     * @callback module:api/JiraApi~disableJiraInstanceCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Disable Jira Instance
     * @param {String} id jira instance id
     * @param {module:api/JiraApi~disableJiraInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.disableJiraInstance = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling disableJiraInstance");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/jira/instance/{id}/disable', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the enableJiraInstance operation.
     * @callback module:api/JiraApi~enableJiraInstanceCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Enable Jira Instance
     * @param {String} id jira instance id
     * @param {module:api/JiraApi~enableJiraInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.enableJiraInstance = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling enableJiraInstance");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/jira/instance/{id}/enable', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getFieldMapping operation.
     * @callback module:api/JiraApi~getFieldMappingCallback
     * @param {String} error Error message, if any.
     * @param {module:model/JiraFieldMapping} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Jira field mapping
     * @param {String} id jira integration instance id
     * @param {String} mappingId jira field mapping id
     * @param {module:api/JiraApi~getFieldMappingCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/JiraFieldMapping}
     */
    this.getFieldMapping = function(id, mappingId, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getFieldMapping");
      }

      // verify the required parameter 'mappingId' is set
      if (mappingId === undefined || mappingId === null) {
        throw new Error("Missing the required parameter 'mappingId' when calling getFieldMapping");
      }


      var pathParams = {
        'id': id,
        'mappingId': mappingId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = JiraFieldMapping;

      return this.apiClient.callApi(
        '/jira/instance/{id}/mapping/{mappingId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getFieldMappings operation.
     * @callback module:api/JiraApi~getFieldMappingsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/JiraFieldMappings} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Jira field mappings for an instance
     * @param {String} id jira instance id
     * @param {module:api/JiraApi~getFieldMappingsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/JiraFieldMappings}
     */
    this.getFieldMappings = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getFieldMappings");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = JiraFieldMappings;

      return this.apiClient.callApi(
        '/jira/instance/{id}/mappings', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getJiraInstance operation.
     * @callback module:api/JiraApi~getJiraInstanceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/JiraInstance} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Jira Instance
     * @param {String} id jira instance id
     * @param {module:api/JiraApi~getJiraInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/JiraInstance}
     */
    this.getJiraInstance = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getJiraInstance");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = JiraInstance;

      return this.apiClient.callApi(
        '/jira/instance/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getMappedProjectForEpic operation.
     * @callback module:api/JiraApi~getMappedProjectForEpicCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MappedProject} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return mapped Decision Lens project for a Jira epic
     * @param {String} id Jira integration instance id
     * @param {String} epicId Epic key from Jira
     * @param {module:api/JiraApi~getMappedProjectForEpicCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MappedProject}
     */
    this.getMappedProjectForEpic = function(id, epicId, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getMappedProjectForEpic");
      }

      // verify the required parameter 'epicId' is set
      if (epicId === undefined || epicId === null) {
        throw new Error("Missing the required parameter 'epicId' when calling getMappedProjectForEpic");
      }


      var pathParams = {
        'id': id,
        'epicId': epicId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = MappedProject;

      return this.apiClient.callApi(
        '/jira/instance/{id}/mappedProject/{epicId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the startSyncForJiraInstance operation.
     * @callback module:api/JiraApi~startSyncForJiraInstanceCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Run synchronization process for Jira Instance
     * @param {String} id jira instance id
     * @param {module:api/JiraApi~startSyncForJiraInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.startSyncForJiraInstance = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling startSyncForJiraInstance");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['OAuth2'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/jira/instance/{id}/sync', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
