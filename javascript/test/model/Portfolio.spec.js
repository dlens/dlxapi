/**
 * Decision Lens API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.7
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.DecisionLensApi);
  }
}(this, function(expect, DecisionLensApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new DecisionLensApi.Portfolio();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('Portfolio', function() {
    it('should create an instance of Portfolio', function() {
      // uncomment below and update the code to test Portfolio
      //var instance = new DecisionLensApi.Portfolio();
      //expect(instance).to.be.a(DecisionLensApi.Portfolio);
    });

    it('should have the property name (base name: "name")', function() {
      // uncomment below and update the code to test the property name
      //var instance = new DecisionLensApi.Portfolio();
      //expect(instance).to.be();
    });

    it('should have the property description (base name: "description")', function() {
      // uncomment below and update the code to test the property description
      //var instance = new DecisionLensApi.Portfolio();
      //expect(instance).to.be();
    });

    it('should have the property isArchived (base name: "isArchived")', function() {
      // uncomment below and update the code to test the property isArchived
      //var instance = new DecisionLensApi.Portfolio();
      //expect(instance).to.be();
    });

    it('should have the property lastUpdatedAt (base name: "lastUpdatedAt")', function() {
      // uncomment below and update the code to test the property lastUpdatedAt
      //var instance = new DecisionLensApi.Portfolio();
      //expect(instance).to.be();
    });

    it('should have the property baselinePortfolioPlanUser (base name: "baselinePortfolioPlanUser")', function() {
      // uncomment below and update the code to test the property baselinePortfolioPlanUser
      //var instance = new DecisionLensApi.Portfolio();
      //expect(instance).to.be();
    });

    it('should have the property fields (base name: "fields")', function() {
      // uncomment below and update the code to test the property fields
      //var instance = new DecisionLensApi.Portfolio();
      //expect(instance).to.be();
    });

    it('should have the property projects (base name: "projects")', function() {
      // uncomment below and update the code to test the property projects
      //var instance = new DecisionLensApi.Portfolio();
      //expect(instance).to.be();
    });

    it('should have the property portfolioPlans (base name: "portfolioPlans")', function() {
      // uncomment below and update the code to test the property portfolioPlans
      //var instance = new DecisionLensApi.Portfolio();
      //expect(instance).to.be();
    });

    it('should have the property portfolioPlanUsers (base name: "portfolioPlanUsers")', function() {
      // uncomment below and update the code to test the property portfolioPlanUsers
      //var instance = new DecisionLensApi.Portfolio();
      //expect(instance).to.be();
    });

    it('should have the property attributes (base name: "attributes")', function() {
      // uncomment below and update the code to test the property attributes
      //var instance = new DecisionLensApi.Portfolio();
      //expect(instance).to.be();
    });

    it('should have the property isCombined (base name: "isCombined")', function() {
      // uncomment below and update the code to test the property isCombined
      //var instance = new DecisionLensApi.Portfolio();
      //expect(instance).to.be();
    });

    it('should have the property userRegistrationToken (base name: "userRegistrationToken")', function() {
      // uncomment below and update the code to test the property userRegistrationToken
      //var instance = new DecisionLensApi.Portfolio();
      //expect(instance).to.be();
    });

    it('should have the property subPortfolios (base name: "subPortfolios")', function() {
      // uncomment below and update the code to test the property subPortfolios
      //var instance = new DecisionLensApi.Portfolio();
      //expect(instance).to.be();
    });

    it('should have the property combinedPortfolios (base name: "combinedPortfolios")', function() {
      // uncomment below and update the code to test the property combinedPortfolios
      //var instance = new DecisionLensApi.Portfolio();
      //expect(instance).to.be();
    });

    it('should have the property resourcePools (base name: "resourcePools")', function() {
      // uncomment below and update the code to test the property resourcePools
      //var instance = new DecisionLensApi.Portfolio();
      //expect(instance).to.be();
    });

    it('should have the property totalBudget (base name: "totalBudget")', function() {
      // uncomment below and update the code to test the property totalBudget
      //var instance = new DecisionLensApi.Portfolio();
      //expect(instance).to.be();
    });

    it('should have the property newNotificationsCount (base name: "newNotificationsCount")', function() {
      // uncomment below and update the code to test the property newNotificationsCount
      //var instance = new DecisionLensApi.Portfolio();
      //expect(instance).to.be();
    });

    it('should have the property customNames (base name: "customNames")', function() {
      // uncomment below and update the code to test the property customNames
      //var instance = new DecisionLensApi.Portfolio();
      //expect(instance).to.be();
    });

  });

}));
