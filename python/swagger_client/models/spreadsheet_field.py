# coding: utf-8

"""
    Decision Lens API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class SpreadsheetField(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'field': 'Field',
        'is_new': 'bool',
        'is_imported': 'bool',
        'warnings': 'SpreadsheetWarnings'
    }

    attribute_map = {
        'field': 'field',
        'is_new': 'isNew',
        'is_imported': 'isImported',
        'warnings': 'warnings'
    }

    def __init__(self, field=None, is_new=None, is_imported=None, warnings=None):  # noqa: E501
        """SpreadsheetField - a model defined in Swagger"""  # noqa: E501

        self._field = None
        self._is_new = None
        self._is_imported = None
        self._warnings = None
        self.discriminator = None

        if field is not None:
            self.field = field
        if is_new is not None:
            self.is_new = is_new
        if is_imported is not None:
            self.is_imported = is_imported
        if warnings is not None:
            self.warnings = warnings

    @property
    def field(self):
        """Gets the field of this SpreadsheetField.  # noqa: E501


        :return: The field of this SpreadsheetField.  # noqa: E501
        :rtype: Field
        """
        return self._field

    @field.setter
    def field(self, field):
        """Sets the field of this SpreadsheetField.


        :param field: The field of this SpreadsheetField.  # noqa: E501
        :type: Field
        """

        self._field = field

    @property
    def is_new(self):
        """Gets the is_new of this SpreadsheetField.  # noqa: E501


        :return: The is_new of this SpreadsheetField.  # noqa: E501
        :rtype: bool
        """
        return self._is_new

    @is_new.setter
    def is_new(self, is_new):
        """Sets the is_new of this SpreadsheetField.


        :param is_new: The is_new of this SpreadsheetField.  # noqa: E501
        :type: bool
        """

        self._is_new = is_new

    @property
    def is_imported(self):
        """Gets the is_imported of this SpreadsheetField.  # noqa: E501


        :return: The is_imported of this SpreadsheetField.  # noqa: E501
        :rtype: bool
        """
        return self._is_imported

    @is_imported.setter
    def is_imported(self, is_imported):
        """Sets the is_imported of this SpreadsheetField.


        :param is_imported: The is_imported of this SpreadsheetField.  # noqa: E501
        :type: bool
        """

        self._is_imported = is_imported

    @property
    def warnings(self):
        """Gets the warnings of this SpreadsheetField.  # noqa: E501


        :return: The warnings of this SpreadsheetField.  # noqa: E501
        :rtype: SpreadsheetWarnings
        """
        return self._warnings

    @warnings.setter
    def warnings(self, warnings):
        """Sets the warnings of this SpreadsheetField.


        :param warnings: The warnings of this SpreadsheetField.  # noqa: E501
        :type: SpreadsheetWarnings
        """

        self._warnings = warnings

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SpreadsheetField, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SpreadsheetField):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
