# coding: utf-8

"""
    Decision Lens API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class AddAndDeleteFieldValuesForFieldsRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'field_ids_to_add': 'list[str]',
        'field_ids_to_remove': 'list[str]',
        'time_periods': 'list[TimePeriod]',
        'field_value': 'FieldValue'
    }

    attribute_map = {
        'field_ids_to_add': 'fieldIdsToAdd',
        'field_ids_to_remove': 'fieldIdsToRemove',
        'time_periods': 'timePeriods',
        'field_value': 'fieldValue'
    }

    def __init__(self, field_ids_to_add=None, field_ids_to_remove=None, time_periods=None, field_value=None):  # noqa: E501
        """AddAndDeleteFieldValuesForFieldsRequest - a model defined in Swagger"""  # noqa: E501

        self._field_ids_to_add = None
        self._field_ids_to_remove = None
        self._time_periods = None
        self._field_value = None
        self.discriminator = None

        if field_ids_to_add is not None:
            self.field_ids_to_add = field_ids_to_add
        if field_ids_to_remove is not None:
            self.field_ids_to_remove = field_ids_to_remove
        if time_periods is not None:
            self.time_periods = time_periods
        if field_value is not None:
            self.field_value = field_value

    @property
    def field_ids_to_add(self):
        """Gets the field_ids_to_add of this AddAndDeleteFieldValuesForFieldsRequest.  # noqa: E501


        :return: The field_ids_to_add of this AddAndDeleteFieldValuesForFieldsRequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._field_ids_to_add

    @field_ids_to_add.setter
    def field_ids_to_add(self, field_ids_to_add):
        """Sets the field_ids_to_add of this AddAndDeleteFieldValuesForFieldsRequest.


        :param field_ids_to_add: The field_ids_to_add of this AddAndDeleteFieldValuesForFieldsRequest.  # noqa: E501
        :type: list[str]
        """

        self._field_ids_to_add = field_ids_to_add

    @property
    def field_ids_to_remove(self):
        """Gets the field_ids_to_remove of this AddAndDeleteFieldValuesForFieldsRequest.  # noqa: E501


        :return: The field_ids_to_remove of this AddAndDeleteFieldValuesForFieldsRequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._field_ids_to_remove

    @field_ids_to_remove.setter
    def field_ids_to_remove(self, field_ids_to_remove):
        """Sets the field_ids_to_remove of this AddAndDeleteFieldValuesForFieldsRequest.


        :param field_ids_to_remove: The field_ids_to_remove of this AddAndDeleteFieldValuesForFieldsRequest.  # noqa: E501
        :type: list[str]
        """

        self._field_ids_to_remove = field_ids_to_remove

    @property
    def time_periods(self):
        """Gets the time_periods of this AddAndDeleteFieldValuesForFieldsRequest.  # noqa: E501


        :return: The time_periods of this AddAndDeleteFieldValuesForFieldsRequest.  # noqa: E501
        :rtype: list[TimePeriod]
        """
        return self._time_periods

    @time_periods.setter
    def time_periods(self, time_periods):
        """Sets the time_periods of this AddAndDeleteFieldValuesForFieldsRequest.


        :param time_periods: The time_periods of this AddAndDeleteFieldValuesForFieldsRequest.  # noqa: E501
        :type: list[TimePeriod]
        """

        self._time_periods = time_periods

    @property
    def field_value(self):
        """Gets the field_value of this AddAndDeleteFieldValuesForFieldsRequest.  # noqa: E501


        :return: The field_value of this AddAndDeleteFieldValuesForFieldsRequest.  # noqa: E501
        :rtype: FieldValue
        """
        return self._field_value

    @field_value.setter
    def field_value(self, field_value):
        """Sets the field_value of this AddAndDeleteFieldValuesForFieldsRequest.


        :param field_value: The field_value of this AddAndDeleteFieldValuesForFieldsRequest.  # noqa: E501
        :type: FieldValue
        """

        self._field_value = field_value

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AddAndDeleteFieldValuesForFieldsRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AddAndDeleteFieldValuesForFieldsRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
