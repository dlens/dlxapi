# coding: utf-8

"""
    Decision Lens API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class PortfolioPlanInsights(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'portfolio': 'Portfolio',
        'sub_portfolio_insights': 'list[PortfolioPlanInsights]',
        'insights': 'list[Insight]',
        'status_insights': 'list[CategorizationInsight]',
        'budget': 'float',
        'allocation': 'float',
        'grading_type': 'GradingType',
        'wiwo': 'Wiwo'
    }

    attribute_map = {
        'portfolio': 'portfolio',
        'sub_portfolio_insights': 'subPortfolioInsights',
        'insights': 'insights',
        'status_insights': 'statusInsights',
        'budget': 'budget',
        'allocation': 'allocation',
        'grading_type': 'gradingType',
        'wiwo': 'wiwo'
    }

    def __init__(self, portfolio=None, sub_portfolio_insights=None, insights=None, status_insights=None, budget=None, allocation=None, grading_type=None, wiwo=None):  # noqa: E501
        """PortfolioPlanInsights - a model defined in Swagger"""  # noqa: E501

        self._portfolio = None
        self._sub_portfolio_insights = None
        self._insights = None
        self._status_insights = None
        self._budget = None
        self._allocation = None
        self._grading_type = None
        self._wiwo = None
        self.discriminator = None

        if portfolio is not None:
            self.portfolio = portfolio
        if sub_portfolio_insights is not None:
            self.sub_portfolio_insights = sub_portfolio_insights
        if insights is not None:
            self.insights = insights
        if status_insights is not None:
            self.status_insights = status_insights
        if budget is not None:
            self.budget = budget
        if allocation is not None:
            self.allocation = allocation
        if grading_type is not None:
            self.grading_type = grading_type
        if wiwo is not None:
            self.wiwo = wiwo

    @property
    def portfolio(self):
        """Gets the portfolio of this PortfolioPlanInsights.  # noqa: E501


        :return: The portfolio of this PortfolioPlanInsights.  # noqa: E501
        :rtype: Portfolio
        """
        return self._portfolio

    @portfolio.setter
    def portfolio(self, portfolio):
        """Sets the portfolio of this PortfolioPlanInsights.


        :param portfolio: The portfolio of this PortfolioPlanInsights.  # noqa: E501
        :type: Portfolio
        """

        self._portfolio = portfolio

    @property
    def sub_portfolio_insights(self):
        """Gets the sub_portfolio_insights of this PortfolioPlanInsights.  # noqa: E501


        :return: The sub_portfolio_insights of this PortfolioPlanInsights.  # noqa: E501
        :rtype: list[PortfolioPlanInsights]
        """
        return self._sub_portfolio_insights

    @sub_portfolio_insights.setter
    def sub_portfolio_insights(self, sub_portfolio_insights):
        """Sets the sub_portfolio_insights of this PortfolioPlanInsights.


        :param sub_portfolio_insights: The sub_portfolio_insights of this PortfolioPlanInsights.  # noqa: E501
        :type: list[PortfolioPlanInsights]
        """

        self._sub_portfolio_insights = sub_portfolio_insights

    @property
    def insights(self):
        """Gets the insights of this PortfolioPlanInsights.  # noqa: E501


        :return: The insights of this PortfolioPlanInsights.  # noqa: E501
        :rtype: list[Insight]
        """
        return self._insights

    @insights.setter
    def insights(self, insights):
        """Sets the insights of this PortfolioPlanInsights.


        :param insights: The insights of this PortfolioPlanInsights.  # noqa: E501
        :type: list[Insight]
        """

        self._insights = insights

    @property
    def status_insights(self):
        """Gets the status_insights of this PortfolioPlanInsights.  # noqa: E501


        :return: The status_insights of this PortfolioPlanInsights.  # noqa: E501
        :rtype: list[CategorizationInsight]
        """
        return self._status_insights

    @status_insights.setter
    def status_insights(self, status_insights):
        """Sets the status_insights of this PortfolioPlanInsights.


        :param status_insights: The status_insights of this PortfolioPlanInsights.  # noqa: E501
        :type: list[CategorizationInsight]
        """

        self._status_insights = status_insights

    @property
    def budget(self):
        """Gets the budget of this PortfolioPlanInsights.  # noqa: E501


        :return: The budget of this PortfolioPlanInsights.  # noqa: E501
        :rtype: float
        """
        return self._budget

    @budget.setter
    def budget(self, budget):
        """Sets the budget of this PortfolioPlanInsights.


        :param budget: The budget of this PortfolioPlanInsights.  # noqa: E501
        :type: float
        """

        self._budget = budget

    @property
    def allocation(self):
        """Gets the allocation of this PortfolioPlanInsights.  # noqa: E501


        :return: The allocation of this PortfolioPlanInsights.  # noqa: E501
        :rtype: float
        """
        return self._allocation

    @allocation.setter
    def allocation(self, allocation):
        """Sets the allocation of this PortfolioPlanInsights.


        :param allocation: The allocation of this PortfolioPlanInsights.  # noqa: E501
        :type: float
        """

        self._allocation = allocation

    @property
    def grading_type(self):
        """Gets the grading_type of this PortfolioPlanInsights.  # noqa: E501


        :return: The grading_type of this PortfolioPlanInsights.  # noqa: E501
        :rtype: GradingType
        """
        return self._grading_type

    @grading_type.setter
    def grading_type(self, grading_type):
        """Sets the grading_type of this PortfolioPlanInsights.


        :param grading_type: The grading_type of this PortfolioPlanInsights.  # noqa: E501
        :type: GradingType
        """

        self._grading_type = grading_type

    @property
    def wiwo(self):
        """Gets the wiwo of this PortfolioPlanInsights.  # noqa: E501


        :return: The wiwo of this PortfolioPlanInsights.  # noqa: E501
        :rtype: Wiwo
        """
        return self._wiwo

    @wiwo.setter
    def wiwo(self, wiwo):
        """Sets the wiwo of this PortfolioPlanInsights.


        :param wiwo: The wiwo of this PortfolioPlanInsights.  # noqa: E501
        :type: Wiwo
        """

        self._wiwo = wiwo

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PortfolioPlanInsights, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PortfolioPlanInsights):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
