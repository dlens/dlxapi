# coding: utf-8

"""
    Decision Lens API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ExportConfig(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'project_ids': 'list[str]',
        'cost_field_ids': 'list[str]',
        'columns': 'list[Column]',
        'planning_period': 'PlanningPeriod',
        'filters': 'list[Filter]'
    }

    attribute_map = {
        'project_ids': 'projectIds',
        'cost_field_ids': 'costFieldIds',
        'columns': 'columns',
        'planning_period': 'planningPeriod',
        'filters': 'filters'
    }

    def __init__(self, project_ids=None, cost_field_ids=None, columns=None, planning_period=None, filters=None):  # noqa: E501
        """ExportConfig - a model defined in Swagger"""  # noqa: E501

        self._project_ids = None
        self._cost_field_ids = None
        self._columns = None
        self._planning_period = None
        self._filters = None
        self.discriminator = None

        if project_ids is not None:
            self.project_ids = project_ids
        if cost_field_ids is not None:
            self.cost_field_ids = cost_field_ids
        if columns is not None:
            self.columns = columns
        if planning_period is not None:
            self.planning_period = planning_period
        if filters is not None:
            self.filters = filters

    @property
    def project_ids(self):
        """Gets the project_ids of this ExportConfig.  # noqa: E501


        :return: The project_ids of this ExportConfig.  # noqa: E501
        :rtype: list[str]
        """
        return self._project_ids

    @project_ids.setter
    def project_ids(self, project_ids):
        """Sets the project_ids of this ExportConfig.


        :param project_ids: The project_ids of this ExportConfig.  # noqa: E501
        :type: list[str]
        """

        self._project_ids = project_ids

    @property
    def cost_field_ids(self):
        """Gets the cost_field_ids of this ExportConfig.  # noqa: E501


        :return: The cost_field_ids of this ExportConfig.  # noqa: E501
        :rtype: list[str]
        """
        return self._cost_field_ids

    @cost_field_ids.setter
    def cost_field_ids(self, cost_field_ids):
        """Sets the cost_field_ids of this ExportConfig.


        :param cost_field_ids: The cost_field_ids of this ExportConfig.  # noqa: E501
        :type: list[str]
        """

        self._cost_field_ids = cost_field_ids

    @property
    def columns(self):
        """Gets the columns of this ExportConfig.  # noqa: E501


        :return: The columns of this ExportConfig.  # noqa: E501
        :rtype: list[Column]
        """
        return self._columns

    @columns.setter
    def columns(self, columns):
        """Sets the columns of this ExportConfig.


        :param columns: The columns of this ExportConfig.  # noqa: E501
        :type: list[Column]
        """

        self._columns = columns

    @property
    def planning_period(self):
        """Gets the planning_period of this ExportConfig.  # noqa: E501


        :return: The planning_period of this ExportConfig.  # noqa: E501
        :rtype: PlanningPeriod
        """
        return self._planning_period

    @planning_period.setter
    def planning_period(self, planning_period):
        """Sets the planning_period of this ExportConfig.


        :param planning_period: The planning_period of this ExportConfig.  # noqa: E501
        :type: PlanningPeriod
        """

        self._planning_period = planning_period

    @property
    def filters(self):
        """Gets the filters of this ExportConfig.  # noqa: E501


        :return: The filters of this ExportConfig.  # noqa: E501
        :rtype: list[Filter]
        """
        return self._filters

    @filters.setter
    def filters(self, filters):
        """Sets the filters of this ExportConfig.


        :param filters: The filters of this ExportConfig.  # noqa: E501
        :type: list[Filter]
        """

        self._filters = filters

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ExportConfig, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ExportConfig):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
