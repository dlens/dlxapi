# coding: utf-8

"""
    Decision Lens API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ProvisionGroupRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'domain': 'str',
        'linked_domain': 'str',
        'user_names': 'list[str]',
        'auth_url': 'str',
        'logout_url': 'str',
        'sso_principal_key': 'str',
        'sso_principal_transmit_method': 'SSOPrincipalTransmitMethod',
        'dli_properties': 'dict(str, str)',
        'dlx_properties': 'dict(str, str)',
        'dlc_properties': 'dict(str, str)'
    }

    attribute_map = {
        'name': 'name',
        'domain': 'domain',
        'linked_domain': 'linkedDomain',
        'user_names': 'userNames',
        'auth_url': 'authUrl',
        'logout_url': 'logoutUrl',
        'sso_principal_key': 'ssoPrincipalKey',
        'sso_principal_transmit_method': 'ssoPrincipalTransmitMethod',
        'dli_properties': 'dliProperties',
        'dlx_properties': 'dlxProperties',
        'dlc_properties': 'dlcProperties'
    }

    def __init__(self, name=None, domain=None, linked_domain=None, user_names=None, auth_url=None, logout_url=None, sso_principal_key=None, sso_principal_transmit_method=None, dli_properties=None, dlx_properties=None, dlc_properties=None):  # noqa: E501
        """ProvisionGroupRequest - a model defined in Swagger"""  # noqa: E501

        self._name = None
        self._domain = None
        self._linked_domain = None
        self._user_names = None
        self._auth_url = None
        self._logout_url = None
        self._sso_principal_key = None
        self._sso_principal_transmit_method = None
        self._dli_properties = None
        self._dlx_properties = None
        self._dlc_properties = None
        self.discriminator = None

        self.name = name
        self.domain = domain
        if linked_domain is not None:
            self.linked_domain = linked_domain
        if user_names is not None:
            self.user_names = user_names
        if auth_url is not None:
            self.auth_url = auth_url
        if logout_url is not None:
            self.logout_url = logout_url
        if sso_principal_key is not None:
            self.sso_principal_key = sso_principal_key
        if sso_principal_transmit_method is not None:
            self.sso_principal_transmit_method = sso_principal_transmit_method
        if dli_properties is not None:
            self.dli_properties = dli_properties
        if dlx_properties is not None:
            self.dlx_properties = dlx_properties
        if dlc_properties is not None:
            self.dlc_properties = dlc_properties

    @property
    def name(self):
        """Gets the name of this ProvisionGroupRequest.  # noqa: E501


        :return: The name of this ProvisionGroupRequest.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ProvisionGroupRequest.


        :param name: The name of this ProvisionGroupRequest.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def domain(self):
        """Gets the domain of this ProvisionGroupRequest.  # noqa: E501


        :return: The domain of this ProvisionGroupRequest.  # noqa: E501
        :rtype: str
        """
        return self._domain

    @domain.setter
    def domain(self, domain):
        """Sets the domain of this ProvisionGroupRequest.


        :param domain: The domain of this ProvisionGroupRequest.  # noqa: E501
        :type: str
        """
        if domain is None:
            raise ValueError("Invalid value for `domain`, must not be `None`")  # noqa: E501

        self._domain = domain

    @property
    def linked_domain(self):
        """Gets the linked_domain of this ProvisionGroupRequest.  # noqa: E501


        :return: The linked_domain of this ProvisionGroupRequest.  # noqa: E501
        :rtype: str
        """
        return self._linked_domain

    @linked_domain.setter
    def linked_domain(self, linked_domain):
        """Sets the linked_domain of this ProvisionGroupRequest.


        :param linked_domain: The linked_domain of this ProvisionGroupRequest.  # noqa: E501
        :type: str
        """

        self._linked_domain = linked_domain

    @property
    def user_names(self):
        """Gets the user_names of this ProvisionGroupRequest.  # noqa: E501


        :return: The user_names of this ProvisionGroupRequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._user_names

    @user_names.setter
    def user_names(self, user_names):
        """Sets the user_names of this ProvisionGroupRequest.


        :param user_names: The user_names of this ProvisionGroupRequest.  # noqa: E501
        :type: list[str]
        """

        self._user_names = user_names

    @property
    def auth_url(self):
        """Gets the auth_url of this ProvisionGroupRequest.  # noqa: E501


        :return: The auth_url of this ProvisionGroupRequest.  # noqa: E501
        :rtype: str
        """
        return self._auth_url

    @auth_url.setter
    def auth_url(self, auth_url):
        """Sets the auth_url of this ProvisionGroupRequest.


        :param auth_url: The auth_url of this ProvisionGroupRequest.  # noqa: E501
        :type: str
        """

        self._auth_url = auth_url

    @property
    def logout_url(self):
        """Gets the logout_url of this ProvisionGroupRequest.  # noqa: E501


        :return: The logout_url of this ProvisionGroupRequest.  # noqa: E501
        :rtype: str
        """
        return self._logout_url

    @logout_url.setter
    def logout_url(self, logout_url):
        """Sets the logout_url of this ProvisionGroupRequest.


        :param logout_url: The logout_url of this ProvisionGroupRequest.  # noqa: E501
        :type: str
        """

        self._logout_url = logout_url

    @property
    def sso_principal_key(self):
        """Gets the sso_principal_key of this ProvisionGroupRequest.  # noqa: E501


        :return: The sso_principal_key of this ProvisionGroupRequest.  # noqa: E501
        :rtype: str
        """
        return self._sso_principal_key

    @sso_principal_key.setter
    def sso_principal_key(self, sso_principal_key):
        """Sets the sso_principal_key of this ProvisionGroupRequest.


        :param sso_principal_key: The sso_principal_key of this ProvisionGroupRequest.  # noqa: E501
        :type: str
        """

        self._sso_principal_key = sso_principal_key

    @property
    def sso_principal_transmit_method(self):
        """Gets the sso_principal_transmit_method of this ProvisionGroupRequest.  # noqa: E501


        :return: The sso_principal_transmit_method of this ProvisionGroupRequest.  # noqa: E501
        :rtype: SSOPrincipalTransmitMethod
        """
        return self._sso_principal_transmit_method

    @sso_principal_transmit_method.setter
    def sso_principal_transmit_method(self, sso_principal_transmit_method):
        """Sets the sso_principal_transmit_method of this ProvisionGroupRequest.


        :param sso_principal_transmit_method: The sso_principal_transmit_method of this ProvisionGroupRequest.  # noqa: E501
        :type: SSOPrincipalTransmitMethod
        """

        self._sso_principal_transmit_method = sso_principal_transmit_method

    @property
    def dli_properties(self):
        """Gets the dli_properties of this ProvisionGroupRequest.  # noqa: E501


        :return: The dli_properties of this ProvisionGroupRequest.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._dli_properties

    @dli_properties.setter
    def dli_properties(self, dli_properties):
        """Sets the dli_properties of this ProvisionGroupRequest.


        :param dli_properties: The dli_properties of this ProvisionGroupRequest.  # noqa: E501
        :type: dict(str, str)
        """

        self._dli_properties = dli_properties

    @property
    def dlx_properties(self):
        """Gets the dlx_properties of this ProvisionGroupRequest.  # noqa: E501


        :return: The dlx_properties of this ProvisionGroupRequest.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._dlx_properties

    @dlx_properties.setter
    def dlx_properties(self, dlx_properties):
        """Sets the dlx_properties of this ProvisionGroupRequest.


        :param dlx_properties: The dlx_properties of this ProvisionGroupRequest.  # noqa: E501
        :type: dict(str, str)
        """

        self._dlx_properties = dlx_properties

    @property
    def dlc_properties(self):
        """Gets the dlc_properties of this ProvisionGroupRequest.  # noqa: E501


        :return: The dlc_properties of this ProvisionGroupRequest.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._dlc_properties

    @dlc_properties.setter
    def dlc_properties(self, dlc_properties):
        """Sets the dlc_properties of this ProvisionGroupRequest.


        :param dlc_properties: The dlc_properties of this ProvisionGroupRequest.  # noqa: E501
        :type: dict(str, str)
        """

        self._dlc_properties = dlc_properties

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ProvisionGroupRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProvisionGroupRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
