# coding: utf-8

"""
    Decision Lens API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class SpreadsheetReport(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'portfolio_id': 'str',
        'spreadsheet_id': 'str',
        'sheet_name': 'str',
        'new_projects': 'Projects',
        'fields': 'SpreadsheetFields',
        'new_fields': 'Fields',
        'new_budgets': 'ResourcePools',
        'update_fields': 'Fields',
        'update_budgets': 'ResourcePools',
        'update_project_field_values_count': 'int',
        'update_budget_field_values_count': 'int',
        'new_budget_amounts_count': 'int',
        'update_budget_amounts_count': 'int',
        'update_time_periods_count': 'int',
        'update_projects': 'Projects',
        'warnings': 'Warnings',
        'import_type': 'FieldType'
    }

    attribute_map = {
        'portfolio_id': 'portfolioId',
        'spreadsheet_id': 'spreadsheetId',
        'sheet_name': 'sheetName',
        'new_projects': 'newProjects',
        'fields': 'fields',
        'new_fields': 'newFields',
        'new_budgets': 'newBudgets',
        'update_fields': 'updateFields',
        'update_budgets': 'updateBudgets',
        'update_project_field_values_count': 'updateProjectFieldValuesCount',
        'update_budget_field_values_count': 'updateBudgetFieldValuesCount',
        'new_budget_amounts_count': 'newBudgetAmountsCount',
        'update_budget_amounts_count': 'updateBudgetAmountsCount',
        'update_time_periods_count': 'updateTimePeriodsCount',
        'update_projects': 'updateProjects',
        'warnings': 'warnings',
        'import_type': 'importType'
    }

    def __init__(self, portfolio_id=None, spreadsheet_id=None, sheet_name=None, new_projects=None, fields=None, new_fields=None, new_budgets=None, update_fields=None, update_budgets=None, update_project_field_values_count=None, update_budget_field_values_count=None, new_budget_amounts_count=None, update_budget_amounts_count=None, update_time_periods_count=None, update_projects=None, warnings=None, import_type=None):  # noqa: E501
        """SpreadsheetReport - a model defined in Swagger"""  # noqa: E501

        self._portfolio_id = None
        self._spreadsheet_id = None
        self._sheet_name = None
        self._new_projects = None
        self._fields = None
        self._new_fields = None
        self._new_budgets = None
        self._update_fields = None
        self._update_budgets = None
        self._update_project_field_values_count = None
        self._update_budget_field_values_count = None
        self._new_budget_amounts_count = None
        self._update_budget_amounts_count = None
        self._update_time_periods_count = None
        self._update_projects = None
        self._warnings = None
        self._import_type = None
        self.discriminator = None

        if portfolio_id is not None:
            self.portfolio_id = portfolio_id
        if spreadsheet_id is not None:
            self.spreadsheet_id = spreadsheet_id
        if sheet_name is not None:
            self.sheet_name = sheet_name
        if new_projects is not None:
            self.new_projects = new_projects
        if fields is not None:
            self.fields = fields
        if new_fields is not None:
            self.new_fields = new_fields
        if new_budgets is not None:
            self.new_budgets = new_budgets
        if update_fields is not None:
            self.update_fields = update_fields
        if update_budgets is not None:
            self.update_budgets = update_budgets
        if update_project_field_values_count is not None:
            self.update_project_field_values_count = update_project_field_values_count
        if update_budget_field_values_count is not None:
            self.update_budget_field_values_count = update_budget_field_values_count
        if new_budget_amounts_count is not None:
            self.new_budget_amounts_count = new_budget_amounts_count
        if update_budget_amounts_count is not None:
            self.update_budget_amounts_count = update_budget_amounts_count
        if update_time_periods_count is not None:
            self.update_time_periods_count = update_time_periods_count
        if update_projects is not None:
            self.update_projects = update_projects
        if warnings is not None:
            self.warnings = warnings
        if import_type is not None:
            self.import_type = import_type

    @property
    def portfolio_id(self):
        """Gets the portfolio_id of this SpreadsheetReport.  # noqa: E501


        :return: The portfolio_id of this SpreadsheetReport.  # noqa: E501
        :rtype: str
        """
        return self._portfolio_id

    @portfolio_id.setter
    def portfolio_id(self, portfolio_id):
        """Sets the portfolio_id of this SpreadsheetReport.


        :param portfolio_id: The portfolio_id of this SpreadsheetReport.  # noqa: E501
        :type: str
        """

        self._portfolio_id = portfolio_id

    @property
    def spreadsheet_id(self):
        """Gets the spreadsheet_id of this SpreadsheetReport.  # noqa: E501


        :return: The spreadsheet_id of this SpreadsheetReport.  # noqa: E501
        :rtype: str
        """
        return self._spreadsheet_id

    @spreadsheet_id.setter
    def spreadsheet_id(self, spreadsheet_id):
        """Sets the spreadsheet_id of this SpreadsheetReport.


        :param spreadsheet_id: The spreadsheet_id of this SpreadsheetReport.  # noqa: E501
        :type: str
        """

        self._spreadsheet_id = spreadsheet_id

    @property
    def sheet_name(self):
        """Gets the sheet_name of this SpreadsheetReport.  # noqa: E501


        :return: The sheet_name of this SpreadsheetReport.  # noqa: E501
        :rtype: str
        """
        return self._sheet_name

    @sheet_name.setter
    def sheet_name(self, sheet_name):
        """Sets the sheet_name of this SpreadsheetReport.


        :param sheet_name: The sheet_name of this SpreadsheetReport.  # noqa: E501
        :type: str
        """

        self._sheet_name = sheet_name

    @property
    def new_projects(self):
        """Gets the new_projects of this SpreadsheetReport.  # noqa: E501


        :return: The new_projects of this SpreadsheetReport.  # noqa: E501
        :rtype: Projects
        """
        return self._new_projects

    @new_projects.setter
    def new_projects(self, new_projects):
        """Sets the new_projects of this SpreadsheetReport.


        :param new_projects: The new_projects of this SpreadsheetReport.  # noqa: E501
        :type: Projects
        """

        self._new_projects = new_projects

    @property
    def fields(self):
        """Gets the fields of this SpreadsheetReport.  # noqa: E501


        :return: The fields of this SpreadsheetReport.  # noqa: E501
        :rtype: SpreadsheetFields
        """
        return self._fields

    @fields.setter
    def fields(self, fields):
        """Sets the fields of this SpreadsheetReport.


        :param fields: The fields of this SpreadsheetReport.  # noqa: E501
        :type: SpreadsheetFields
        """

        self._fields = fields

    @property
    def new_fields(self):
        """Gets the new_fields of this SpreadsheetReport.  # noqa: E501


        :return: The new_fields of this SpreadsheetReport.  # noqa: E501
        :rtype: Fields
        """
        return self._new_fields

    @new_fields.setter
    def new_fields(self, new_fields):
        """Sets the new_fields of this SpreadsheetReport.


        :param new_fields: The new_fields of this SpreadsheetReport.  # noqa: E501
        :type: Fields
        """

        self._new_fields = new_fields

    @property
    def new_budgets(self):
        """Gets the new_budgets of this SpreadsheetReport.  # noqa: E501


        :return: The new_budgets of this SpreadsheetReport.  # noqa: E501
        :rtype: ResourcePools
        """
        return self._new_budgets

    @new_budgets.setter
    def new_budgets(self, new_budgets):
        """Sets the new_budgets of this SpreadsheetReport.


        :param new_budgets: The new_budgets of this SpreadsheetReport.  # noqa: E501
        :type: ResourcePools
        """

        self._new_budgets = new_budgets

    @property
    def update_fields(self):
        """Gets the update_fields of this SpreadsheetReport.  # noqa: E501


        :return: The update_fields of this SpreadsheetReport.  # noqa: E501
        :rtype: Fields
        """
        return self._update_fields

    @update_fields.setter
    def update_fields(self, update_fields):
        """Sets the update_fields of this SpreadsheetReport.


        :param update_fields: The update_fields of this SpreadsheetReport.  # noqa: E501
        :type: Fields
        """

        self._update_fields = update_fields

    @property
    def update_budgets(self):
        """Gets the update_budgets of this SpreadsheetReport.  # noqa: E501


        :return: The update_budgets of this SpreadsheetReport.  # noqa: E501
        :rtype: ResourcePools
        """
        return self._update_budgets

    @update_budgets.setter
    def update_budgets(self, update_budgets):
        """Sets the update_budgets of this SpreadsheetReport.


        :param update_budgets: The update_budgets of this SpreadsheetReport.  # noqa: E501
        :type: ResourcePools
        """

        self._update_budgets = update_budgets

    @property
    def update_project_field_values_count(self):
        """Gets the update_project_field_values_count of this SpreadsheetReport.  # noqa: E501


        :return: The update_project_field_values_count of this SpreadsheetReport.  # noqa: E501
        :rtype: int
        """
        return self._update_project_field_values_count

    @update_project_field_values_count.setter
    def update_project_field_values_count(self, update_project_field_values_count):
        """Sets the update_project_field_values_count of this SpreadsheetReport.


        :param update_project_field_values_count: The update_project_field_values_count of this SpreadsheetReport.  # noqa: E501
        :type: int
        """

        self._update_project_field_values_count = update_project_field_values_count

    @property
    def update_budget_field_values_count(self):
        """Gets the update_budget_field_values_count of this SpreadsheetReport.  # noqa: E501


        :return: The update_budget_field_values_count of this SpreadsheetReport.  # noqa: E501
        :rtype: int
        """
        return self._update_budget_field_values_count

    @update_budget_field_values_count.setter
    def update_budget_field_values_count(self, update_budget_field_values_count):
        """Sets the update_budget_field_values_count of this SpreadsheetReport.


        :param update_budget_field_values_count: The update_budget_field_values_count of this SpreadsheetReport.  # noqa: E501
        :type: int
        """

        self._update_budget_field_values_count = update_budget_field_values_count

    @property
    def new_budget_amounts_count(self):
        """Gets the new_budget_amounts_count of this SpreadsheetReport.  # noqa: E501


        :return: The new_budget_amounts_count of this SpreadsheetReport.  # noqa: E501
        :rtype: int
        """
        return self._new_budget_amounts_count

    @new_budget_amounts_count.setter
    def new_budget_amounts_count(self, new_budget_amounts_count):
        """Sets the new_budget_amounts_count of this SpreadsheetReport.


        :param new_budget_amounts_count: The new_budget_amounts_count of this SpreadsheetReport.  # noqa: E501
        :type: int
        """

        self._new_budget_amounts_count = new_budget_amounts_count

    @property
    def update_budget_amounts_count(self):
        """Gets the update_budget_amounts_count of this SpreadsheetReport.  # noqa: E501


        :return: The update_budget_amounts_count of this SpreadsheetReport.  # noqa: E501
        :rtype: int
        """
        return self._update_budget_amounts_count

    @update_budget_amounts_count.setter
    def update_budget_amounts_count(self, update_budget_amounts_count):
        """Sets the update_budget_amounts_count of this SpreadsheetReport.


        :param update_budget_amounts_count: The update_budget_amounts_count of this SpreadsheetReport.  # noqa: E501
        :type: int
        """

        self._update_budget_amounts_count = update_budget_amounts_count

    @property
    def update_time_periods_count(self):
        """Gets the update_time_periods_count of this SpreadsheetReport.  # noqa: E501


        :return: The update_time_periods_count of this SpreadsheetReport.  # noqa: E501
        :rtype: int
        """
        return self._update_time_periods_count

    @update_time_periods_count.setter
    def update_time_periods_count(self, update_time_periods_count):
        """Sets the update_time_periods_count of this SpreadsheetReport.


        :param update_time_periods_count: The update_time_periods_count of this SpreadsheetReport.  # noqa: E501
        :type: int
        """

        self._update_time_periods_count = update_time_periods_count

    @property
    def update_projects(self):
        """Gets the update_projects of this SpreadsheetReport.  # noqa: E501


        :return: The update_projects of this SpreadsheetReport.  # noqa: E501
        :rtype: Projects
        """
        return self._update_projects

    @update_projects.setter
    def update_projects(self, update_projects):
        """Sets the update_projects of this SpreadsheetReport.


        :param update_projects: The update_projects of this SpreadsheetReport.  # noqa: E501
        :type: Projects
        """

        self._update_projects = update_projects

    @property
    def warnings(self):
        """Gets the warnings of this SpreadsheetReport.  # noqa: E501


        :return: The warnings of this SpreadsheetReport.  # noqa: E501
        :rtype: Warnings
        """
        return self._warnings

    @warnings.setter
    def warnings(self, warnings):
        """Sets the warnings of this SpreadsheetReport.


        :param warnings: The warnings of this SpreadsheetReport.  # noqa: E501
        :type: Warnings
        """

        self._warnings = warnings

    @property
    def import_type(self):
        """Gets the import_type of this SpreadsheetReport.  # noqa: E501


        :return: The import_type of this SpreadsheetReport.  # noqa: E501
        :rtype: FieldType
        """
        return self._import_type

    @import_type.setter
    def import_type(self, import_type):
        """Sets the import_type of this SpreadsheetReport.


        :param import_type: The import_type of this SpreadsheetReport.  # noqa: E501
        :type: FieldType
        """

        self._import_type = import_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SpreadsheetReport, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SpreadsheetReport):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
