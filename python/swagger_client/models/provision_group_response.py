# coding: utf-8

"""
    Decision Lens API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ProvisionGroupResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'app_urls': 'list[str]',
        'errors': 'dict(str, str)',
        'schemas': 'list[Schema]',
        'groups': 'list[Group]',
        'dlc_group': 'DLCGroup',
        'dli_applications': 'list[DLIApplication]',
        'users': 'list[User]'
    }

    attribute_map = {
        'app_urls': 'appUrls',
        'errors': 'errors',
        'schemas': 'schemas',
        'groups': 'groups',
        'dlc_group': 'dlcGroup',
        'dli_applications': 'dliApplications',
        'users': 'users'
    }

    def __init__(self, app_urls=None, errors=None, schemas=None, groups=None, dlc_group=None, dli_applications=None, users=None):  # noqa: E501
        """ProvisionGroupResponse - a model defined in Swagger"""  # noqa: E501

        self._app_urls = None
        self._errors = None
        self._schemas = None
        self._groups = None
        self._dlc_group = None
        self._dli_applications = None
        self._users = None
        self.discriminator = None

        if app_urls is not None:
            self.app_urls = app_urls
        if errors is not None:
            self.errors = errors
        if schemas is not None:
            self.schemas = schemas
        if groups is not None:
            self.groups = groups
        if dlc_group is not None:
            self.dlc_group = dlc_group
        if dli_applications is not None:
            self.dli_applications = dli_applications
        if users is not None:
            self.users = users

    @property
    def app_urls(self):
        """Gets the app_urls of this ProvisionGroupResponse.  # noqa: E501


        :return: The app_urls of this ProvisionGroupResponse.  # noqa: E501
        :rtype: list[str]
        """
        return self._app_urls

    @app_urls.setter
    def app_urls(self, app_urls):
        """Sets the app_urls of this ProvisionGroupResponse.


        :param app_urls: The app_urls of this ProvisionGroupResponse.  # noqa: E501
        :type: list[str]
        """

        self._app_urls = app_urls

    @property
    def errors(self):
        """Gets the errors of this ProvisionGroupResponse.  # noqa: E501


        :return: The errors of this ProvisionGroupResponse.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._errors

    @errors.setter
    def errors(self, errors):
        """Sets the errors of this ProvisionGroupResponse.


        :param errors: The errors of this ProvisionGroupResponse.  # noqa: E501
        :type: dict(str, str)
        """

        self._errors = errors

    @property
    def schemas(self):
        """Gets the schemas of this ProvisionGroupResponse.  # noqa: E501


        :return: The schemas of this ProvisionGroupResponse.  # noqa: E501
        :rtype: list[Schema]
        """
        return self._schemas

    @schemas.setter
    def schemas(self, schemas):
        """Sets the schemas of this ProvisionGroupResponse.


        :param schemas: The schemas of this ProvisionGroupResponse.  # noqa: E501
        :type: list[Schema]
        """

        self._schemas = schemas

    @property
    def groups(self):
        """Gets the groups of this ProvisionGroupResponse.  # noqa: E501


        :return: The groups of this ProvisionGroupResponse.  # noqa: E501
        :rtype: list[Group]
        """
        return self._groups

    @groups.setter
    def groups(self, groups):
        """Sets the groups of this ProvisionGroupResponse.


        :param groups: The groups of this ProvisionGroupResponse.  # noqa: E501
        :type: list[Group]
        """

        self._groups = groups

    @property
    def dlc_group(self):
        """Gets the dlc_group of this ProvisionGroupResponse.  # noqa: E501


        :return: The dlc_group of this ProvisionGroupResponse.  # noqa: E501
        :rtype: DLCGroup
        """
        return self._dlc_group

    @dlc_group.setter
    def dlc_group(self, dlc_group):
        """Sets the dlc_group of this ProvisionGroupResponse.


        :param dlc_group: The dlc_group of this ProvisionGroupResponse.  # noqa: E501
        :type: DLCGroup
        """

        self._dlc_group = dlc_group

    @property
    def dli_applications(self):
        """Gets the dli_applications of this ProvisionGroupResponse.  # noqa: E501


        :return: The dli_applications of this ProvisionGroupResponse.  # noqa: E501
        :rtype: list[DLIApplication]
        """
        return self._dli_applications

    @dli_applications.setter
    def dli_applications(self, dli_applications):
        """Sets the dli_applications of this ProvisionGroupResponse.


        :param dli_applications: The dli_applications of this ProvisionGroupResponse.  # noqa: E501
        :type: list[DLIApplication]
        """

        self._dli_applications = dli_applications

    @property
    def users(self):
        """Gets the users of this ProvisionGroupResponse.  # noqa: E501


        :return: The users of this ProvisionGroupResponse.  # noqa: E501
        :rtype: list[User]
        """
        return self._users

    @users.setter
    def users(self, users):
        """Sets the users of this ProvisionGroupResponse.


        :param users: The users of this ProvisionGroupResponse.  # noqa: E501
        :type: list[User]
        """

        self._users = users

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ProvisionGroupResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProvisionGroupResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
