# coding: utf-8

"""
    Decision Lens API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ScalePointAutoValueUpdatedEvent(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'previous_auto_value': 'float',
        'portfolio_id': 'str',
        'field': 'Field',
        'name': 'str',
        'project': 'Project',
        'id': 'str',
        'position': 'int',
        'category': 'CategoryOption',
        'portfolio_plan': 'PortfolioPlan',
        'auto_value': 'float'
    }

    attribute_map = {
        'previous_auto_value': 'previousAutoValue',
        'portfolio_id': 'portfolioId',
        'field': 'field',
        'name': 'name',
        'project': 'project',
        'id': 'id',
        'position': 'position',
        'category': 'category',
        'portfolio_plan': 'portfolioPlan',
        'auto_value': 'autoValue'
    }

    def __init__(self, previous_auto_value=None, portfolio_id=None, field=None, name=None, project=None, id=None, position=None, category=None, portfolio_plan=None, auto_value=None):  # noqa: E501
        """ScalePointAutoValueUpdatedEvent - a model defined in Swagger"""  # noqa: E501

        self._previous_auto_value = None
        self._portfolio_id = None
        self._field = None
        self._name = None
        self._project = None
        self._id = None
        self._position = None
        self._category = None
        self._portfolio_plan = None
        self._auto_value = None
        self.discriminator = None

        if previous_auto_value is not None:
            self.previous_auto_value = previous_auto_value
        if portfolio_id is not None:
            self.portfolio_id = portfolio_id
        if field is not None:
            self.field = field
        if name is not None:
            self.name = name
        if project is not None:
            self.project = project
        if id is not None:
            self.id = id
        if position is not None:
            self.position = position
        if category is not None:
            self.category = category
        if portfolio_plan is not None:
            self.portfolio_plan = portfolio_plan
        if auto_value is not None:
            self.auto_value = auto_value

    @property
    def previous_auto_value(self):
        """Gets the previous_auto_value of this ScalePointAutoValueUpdatedEvent.  # noqa: E501


        :return: The previous_auto_value of this ScalePointAutoValueUpdatedEvent.  # noqa: E501
        :rtype: float
        """
        return self._previous_auto_value

    @previous_auto_value.setter
    def previous_auto_value(self, previous_auto_value):
        """Sets the previous_auto_value of this ScalePointAutoValueUpdatedEvent.


        :param previous_auto_value: The previous_auto_value of this ScalePointAutoValueUpdatedEvent.  # noqa: E501
        :type: float
        """

        self._previous_auto_value = previous_auto_value

    @property
    def portfolio_id(self):
        """Gets the portfolio_id of this ScalePointAutoValueUpdatedEvent.  # noqa: E501


        :return: The portfolio_id of this ScalePointAutoValueUpdatedEvent.  # noqa: E501
        :rtype: str
        """
        return self._portfolio_id

    @portfolio_id.setter
    def portfolio_id(self, portfolio_id):
        """Sets the portfolio_id of this ScalePointAutoValueUpdatedEvent.


        :param portfolio_id: The portfolio_id of this ScalePointAutoValueUpdatedEvent.  # noqa: E501
        :type: str
        """

        self._portfolio_id = portfolio_id

    @property
    def field(self):
        """Gets the field of this ScalePointAutoValueUpdatedEvent.  # noqa: E501


        :return: The field of this ScalePointAutoValueUpdatedEvent.  # noqa: E501
        :rtype: Field
        """
        return self._field

    @field.setter
    def field(self, field):
        """Sets the field of this ScalePointAutoValueUpdatedEvent.


        :param field: The field of this ScalePointAutoValueUpdatedEvent.  # noqa: E501
        :type: Field
        """

        self._field = field

    @property
    def name(self):
        """Gets the name of this ScalePointAutoValueUpdatedEvent.  # noqa: E501


        :return: The name of this ScalePointAutoValueUpdatedEvent.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ScalePointAutoValueUpdatedEvent.


        :param name: The name of this ScalePointAutoValueUpdatedEvent.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def project(self):
        """Gets the project of this ScalePointAutoValueUpdatedEvent.  # noqa: E501


        :return: The project of this ScalePointAutoValueUpdatedEvent.  # noqa: E501
        :rtype: Project
        """
        return self._project

    @project.setter
    def project(self, project):
        """Sets the project of this ScalePointAutoValueUpdatedEvent.


        :param project: The project of this ScalePointAutoValueUpdatedEvent.  # noqa: E501
        :type: Project
        """

        self._project = project

    @property
    def id(self):
        """Gets the id of this ScalePointAutoValueUpdatedEvent.  # noqa: E501


        :return: The id of this ScalePointAutoValueUpdatedEvent.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ScalePointAutoValueUpdatedEvent.


        :param id: The id of this ScalePointAutoValueUpdatedEvent.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def position(self):
        """Gets the position of this ScalePointAutoValueUpdatedEvent.  # noqa: E501


        :return: The position of this ScalePointAutoValueUpdatedEvent.  # noqa: E501
        :rtype: int
        """
        return self._position

    @position.setter
    def position(self, position):
        """Sets the position of this ScalePointAutoValueUpdatedEvent.


        :param position: The position of this ScalePointAutoValueUpdatedEvent.  # noqa: E501
        :type: int
        """

        self._position = position

    @property
    def category(self):
        """Gets the category of this ScalePointAutoValueUpdatedEvent.  # noqa: E501


        :return: The category of this ScalePointAutoValueUpdatedEvent.  # noqa: E501
        :rtype: CategoryOption
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this ScalePointAutoValueUpdatedEvent.


        :param category: The category of this ScalePointAutoValueUpdatedEvent.  # noqa: E501
        :type: CategoryOption
        """

        self._category = category

    @property
    def portfolio_plan(self):
        """Gets the portfolio_plan of this ScalePointAutoValueUpdatedEvent.  # noqa: E501


        :return: The portfolio_plan of this ScalePointAutoValueUpdatedEvent.  # noqa: E501
        :rtype: PortfolioPlan
        """
        return self._portfolio_plan

    @portfolio_plan.setter
    def portfolio_plan(self, portfolio_plan):
        """Sets the portfolio_plan of this ScalePointAutoValueUpdatedEvent.


        :param portfolio_plan: The portfolio_plan of this ScalePointAutoValueUpdatedEvent.  # noqa: E501
        :type: PortfolioPlan
        """

        self._portfolio_plan = portfolio_plan

    @property
    def auto_value(self):
        """Gets the auto_value of this ScalePointAutoValueUpdatedEvent.  # noqa: E501


        :return: The auto_value of this ScalePointAutoValueUpdatedEvent.  # noqa: E501
        :rtype: float
        """
        return self._auto_value

    @auto_value.setter
    def auto_value(self, auto_value):
        """Sets the auto_value of this ScalePointAutoValueUpdatedEvent.


        :param auto_value: The auto_value of this ScalePointAutoValueUpdatedEvent.  # noqa: E501
        :type: float
        """

        self._auto_value = auto_value

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ScalePointAutoValueUpdatedEvent, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ScalePointAutoValueUpdatedEvent):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
