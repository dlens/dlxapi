# coding: utf-8

"""
    Decision Lens API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ProjectRankUpdatedCascades(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'project_id': 'str',
        'project_name': 'str',
        'field_id': 'str',
        'field_name': 'str',
        'cascaded_projects_count': 'int',
        'direction': 'str',
        'previous_value': 'int',
        'value': 'int'
    }

    attribute_map = {
        'project_id': 'projectId',
        'project_name': 'projectName',
        'field_id': 'fieldId',
        'field_name': 'fieldName',
        'cascaded_projects_count': 'cascadedProjectsCount',
        'direction': 'direction',
        'previous_value': 'previousValue',
        'value': 'value'
    }

    def __init__(self, project_id=None, project_name=None, field_id=None, field_name=None, cascaded_projects_count=None, direction=None, previous_value=None, value=None):  # noqa: E501
        """ProjectRankUpdatedCascades - a model defined in Swagger"""  # noqa: E501

        self._project_id = None
        self._project_name = None
        self._field_id = None
        self._field_name = None
        self._cascaded_projects_count = None
        self._direction = None
        self._previous_value = None
        self._value = None
        self.discriminator = None

        if project_id is not None:
            self.project_id = project_id
        if project_name is not None:
            self.project_name = project_name
        if field_id is not None:
            self.field_id = field_id
        if field_name is not None:
            self.field_name = field_name
        if cascaded_projects_count is not None:
            self.cascaded_projects_count = cascaded_projects_count
        if direction is not None:
            self.direction = direction
        if previous_value is not None:
            self.previous_value = previous_value
        if value is not None:
            self.value = value

    @property
    def project_id(self):
        """Gets the project_id of this ProjectRankUpdatedCascades.  # noqa: E501


        :return: The project_id of this ProjectRankUpdatedCascades.  # noqa: E501
        :rtype: str
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id):
        """Sets the project_id of this ProjectRankUpdatedCascades.


        :param project_id: The project_id of this ProjectRankUpdatedCascades.  # noqa: E501
        :type: str
        """

        self._project_id = project_id

    @property
    def project_name(self):
        """Gets the project_name of this ProjectRankUpdatedCascades.  # noqa: E501


        :return: The project_name of this ProjectRankUpdatedCascades.  # noqa: E501
        :rtype: str
        """
        return self._project_name

    @project_name.setter
    def project_name(self, project_name):
        """Sets the project_name of this ProjectRankUpdatedCascades.


        :param project_name: The project_name of this ProjectRankUpdatedCascades.  # noqa: E501
        :type: str
        """

        self._project_name = project_name

    @property
    def field_id(self):
        """Gets the field_id of this ProjectRankUpdatedCascades.  # noqa: E501


        :return: The field_id of this ProjectRankUpdatedCascades.  # noqa: E501
        :rtype: str
        """
        return self._field_id

    @field_id.setter
    def field_id(self, field_id):
        """Sets the field_id of this ProjectRankUpdatedCascades.


        :param field_id: The field_id of this ProjectRankUpdatedCascades.  # noqa: E501
        :type: str
        """

        self._field_id = field_id

    @property
    def field_name(self):
        """Gets the field_name of this ProjectRankUpdatedCascades.  # noqa: E501


        :return: The field_name of this ProjectRankUpdatedCascades.  # noqa: E501
        :rtype: str
        """
        return self._field_name

    @field_name.setter
    def field_name(self, field_name):
        """Sets the field_name of this ProjectRankUpdatedCascades.


        :param field_name: The field_name of this ProjectRankUpdatedCascades.  # noqa: E501
        :type: str
        """

        self._field_name = field_name

    @property
    def cascaded_projects_count(self):
        """Gets the cascaded_projects_count of this ProjectRankUpdatedCascades.  # noqa: E501


        :return: The cascaded_projects_count of this ProjectRankUpdatedCascades.  # noqa: E501
        :rtype: int
        """
        return self._cascaded_projects_count

    @cascaded_projects_count.setter
    def cascaded_projects_count(self, cascaded_projects_count):
        """Sets the cascaded_projects_count of this ProjectRankUpdatedCascades.


        :param cascaded_projects_count: The cascaded_projects_count of this ProjectRankUpdatedCascades.  # noqa: E501
        :type: int
        """

        self._cascaded_projects_count = cascaded_projects_count

    @property
    def direction(self):
        """Gets the direction of this ProjectRankUpdatedCascades.  # noqa: E501


        :return: The direction of this ProjectRankUpdatedCascades.  # noqa: E501
        :rtype: str
        """
        return self._direction

    @direction.setter
    def direction(self, direction):
        """Sets the direction of this ProjectRankUpdatedCascades.


        :param direction: The direction of this ProjectRankUpdatedCascades.  # noqa: E501
        :type: str
        """

        self._direction = direction

    @property
    def previous_value(self):
        """Gets the previous_value of this ProjectRankUpdatedCascades.  # noqa: E501


        :return: The previous_value of this ProjectRankUpdatedCascades.  # noqa: E501
        :rtype: int
        """
        return self._previous_value

    @previous_value.setter
    def previous_value(self, previous_value):
        """Sets the previous_value of this ProjectRankUpdatedCascades.


        :param previous_value: The previous_value of this ProjectRankUpdatedCascades.  # noqa: E501
        :type: int
        """

        self._previous_value = previous_value

    @property
    def value(self):
        """Gets the value of this ProjectRankUpdatedCascades.  # noqa: E501


        :return: The value of this ProjectRankUpdatedCascades.  # noqa: E501
        :rtype: int
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this ProjectRankUpdatedCascades.


        :param value: The value of this ProjectRankUpdatedCascades.  # noqa: E501
        :type: int
        """

        self._value = value

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ProjectRankUpdatedCascades, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProjectRankUpdatedCascades):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
