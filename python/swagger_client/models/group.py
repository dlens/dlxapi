# coding: utf-8

"""
    Decision Lens API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Group(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'domain': 'str',
        'linked_domain': 'str',
        'parent_domain': 'str',
        'is_active': 'bool',
        'auth_type': 'str',
        'auth_url': 'str',
        'logout_url': 'str',
        'users': 'Users'
    }

    attribute_map = {
        'name': 'name',
        'domain': 'domain',
        'linked_domain': 'linkedDomain',
        'parent_domain': 'parentDomain',
        'is_active': 'isActive',
        'auth_type': 'authType',
        'auth_url': 'authUrl',
        'logout_url': 'logoutUrl',
        'users': 'users'
    }

    def __init__(self, name=None, domain=None, linked_domain=None, parent_domain=None, is_active=None, auth_type=None, auth_url=None, logout_url=None, users=None):  # noqa: E501
        """Group - a model defined in Swagger"""  # noqa: E501

        self._name = None
        self._domain = None
        self._linked_domain = None
        self._parent_domain = None
        self._is_active = None
        self._auth_type = None
        self._auth_url = None
        self._logout_url = None
        self._users = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if domain is not None:
            self.domain = domain
        if linked_domain is not None:
            self.linked_domain = linked_domain
        if parent_domain is not None:
            self.parent_domain = parent_domain
        if is_active is not None:
            self.is_active = is_active
        if auth_type is not None:
            self.auth_type = auth_type
        if auth_url is not None:
            self.auth_url = auth_url
        if logout_url is not None:
            self.logout_url = logout_url
        if users is not None:
            self.users = users

    @property
    def name(self):
        """Gets the name of this Group.  # noqa: E501


        :return: The name of this Group.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Group.


        :param name: The name of this Group.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def domain(self):
        """Gets the domain of this Group.  # noqa: E501


        :return: The domain of this Group.  # noqa: E501
        :rtype: str
        """
        return self._domain

    @domain.setter
    def domain(self, domain):
        """Sets the domain of this Group.


        :param domain: The domain of this Group.  # noqa: E501
        :type: str
        """

        self._domain = domain

    @property
    def linked_domain(self):
        """Gets the linked_domain of this Group.  # noqa: E501


        :return: The linked_domain of this Group.  # noqa: E501
        :rtype: str
        """
        return self._linked_domain

    @linked_domain.setter
    def linked_domain(self, linked_domain):
        """Sets the linked_domain of this Group.


        :param linked_domain: The linked_domain of this Group.  # noqa: E501
        :type: str
        """

        self._linked_domain = linked_domain

    @property
    def parent_domain(self):
        """Gets the parent_domain of this Group.  # noqa: E501


        :return: The parent_domain of this Group.  # noqa: E501
        :rtype: str
        """
        return self._parent_domain

    @parent_domain.setter
    def parent_domain(self, parent_domain):
        """Sets the parent_domain of this Group.


        :param parent_domain: The parent_domain of this Group.  # noqa: E501
        :type: str
        """

        self._parent_domain = parent_domain

    @property
    def is_active(self):
        """Gets the is_active of this Group.  # noqa: E501


        :return: The is_active of this Group.  # noqa: E501
        :rtype: bool
        """
        return self._is_active

    @is_active.setter
    def is_active(self, is_active):
        """Sets the is_active of this Group.


        :param is_active: The is_active of this Group.  # noqa: E501
        :type: bool
        """

        self._is_active = is_active

    @property
    def auth_type(self):
        """Gets the auth_type of this Group.  # noqa: E501


        :return: The auth_type of this Group.  # noqa: E501
        :rtype: str
        """
        return self._auth_type

    @auth_type.setter
    def auth_type(self, auth_type):
        """Sets the auth_type of this Group.


        :param auth_type: The auth_type of this Group.  # noqa: E501
        :type: str
        """

        self._auth_type = auth_type

    @property
    def auth_url(self):
        """Gets the auth_url of this Group.  # noqa: E501


        :return: The auth_url of this Group.  # noqa: E501
        :rtype: str
        """
        return self._auth_url

    @auth_url.setter
    def auth_url(self, auth_url):
        """Sets the auth_url of this Group.


        :param auth_url: The auth_url of this Group.  # noqa: E501
        :type: str
        """

        self._auth_url = auth_url

    @property
    def logout_url(self):
        """Gets the logout_url of this Group.  # noqa: E501


        :return: The logout_url of this Group.  # noqa: E501
        :rtype: str
        """
        return self._logout_url

    @logout_url.setter
    def logout_url(self, logout_url):
        """Sets the logout_url of this Group.


        :param logout_url: The logout_url of this Group.  # noqa: E501
        :type: str
        """

        self._logout_url = logout_url

    @property
    def users(self):
        """Gets the users of this Group.  # noqa: E501


        :return: The users of this Group.  # noqa: E501
        :rtype: Users
        """
        return self._users

    @users.setter
    def users(self, users):
        """Sets the users of this Group.


        :param users: The users of this Group.  # noqa: E501
        :type: Users
        """

        self._users = users

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Group, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Group):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
