# coding: utf-8

"""
    Decision Lens API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class JiraInstance(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'jira_base_url': 'str',
        'jira_consumer_key': 'str',
        'jira_private_key': 'str',
        'jira_project_id': 'str',
        'dl_client_key': 'str',
        'dl_secret_key': 'str',
        'dl_portfolio_id': 'str',
        'enabled': 'bool',
        'last_sync_attempt': 'str',
        'last_successful_sync': 'str',
        'last_sync_message': 'str'
    }

    attribute_map = {
        'jira_base_url': 'jiraBaseUrl',
        'jira_consumer_key': 'jiraConsumerKey',
        'jira_private_key': 'jiraPrivateKey',
        'jira_project_id': 'jiraProjectId',
        'dl_client_key': 'dlClientKey',
        'dl_secret_key': 'dlSecretKey',
        'dl_portfolio_id': 'dlPortfolioId',
        'enabled': 'enabled',
        'last_sync_attempt': 'lastSyncAttempt',
        'last_successful_sync': 'lastSuccessfulSync',
        'last_sync_message': 'lastSyncMessage'
    }

    def __init__(self, jira_base_url=None, jira_consumer_key=None, jira_private_key=None, jira_project_id=None, dl_client_key=None, dl_secret_key=None, dl_portfolio_id=None, enabled=None, last_sync_attempt=None, last_successful_sync=None, last_sync_message=None):  # noqa: E501
        """JiraInstance - a model defined in Swagger"""  # noqa: E501

        self._jira_base_url = None
        self._jira_consumer_key = None
        self._jira_private_key = None
        self._jira_project_id = None
        self._dl_client_key = None
        self._dl_secret_key = None
        self._dl_portfolio_id = None
        self._enabled = None
        self._last_sync_attempt = None
        self._last_successful_sync = None
        self._last_sync_message = None
        self.discriminator = None

        if jira_base_url is not None:
            self.jira_base_url = jira_base_url
        if jira_consumer_key is not None:
            self.jira_consumer_key = jira_consumer_key
        if jira_private_key is not None:
            self.jira_private_key = jira_private_key
        if jira_project_id is not None:
            self.jira_project_id = jira_project_id
        if dl_client_key is not None:
            self.dl_client_key = dl_client_key
        if dl_secret_key is not None:
            self.dl_secret_key = dl_secret_key
        if dl_portfolio_id is not None:
            self.dl_portfolio_id = dl_portfolio_id
        if enabled is not None:
            self.enabled = enabled
        if last_sync_attempt is not None:
            self.last_sync_attempt = last_sync_attempt
        if last_successful_sync is not None:
            self.last_successful_sync = last_successful_sync
        if last_sync_message is not None:
            self.last_sync_message = last_sync_message

    @property
    def jira_base_url(self):
        """Gets the jira_base_url of this JiraInstance.  # noqa: E501


        :return: The jira_base_url of this JiraInstance.  # noqa: E501
        :rtype: str
        """
        return self._jira_base_url

    @jira_base_url.setter
    def jira_base_url(self, jira_base_url):
        """Sets the jira_base_url of this JiraInstance.


        :param jira_base_url: The jira_base_url of this JiraInstance.  # noqa: E501
        :type: str
        """

        self._jira_base_url = jira_base_url

    @property
    def jira_consumer_key(self):
        """Gets the jira_consumer_key of this JiraInstance.  # noqa: E501


        :return: The jira_consumer_key of this JiraInstance.  # noqa: E501
        :rtype: str
        """
        return self._jira_consumer_key

    @jira_consumer_key.setter
    def jira_consumer_key(self, jira_consumer_key):
        """Sets the jira_consumer_key of this JiraInstance.


        :param jira_consumer_key: The jira_consumer_key of this JiraInstance.  # noqa: E501
        :type: str
        """

        self._jira_consumer_key = jira_consumer_key

    @property
    def jira_private_key(self):
        """Gets the jira_private_key of this JiraInstance.  # noqa: E501


        :return: The jira_private_key of this JiraInstance.  # noqa: E501
        :rtype: str
        """
        return self._jira_private_key

    @jira_private_key.setter
    def jira_private_key(self, jira_private_key):
        """Sets the jira_private_key of this JiraInstance.


        :param jira_private_key: The jira_private_key of this JiraInstance.  # noqa: E501
        :type: str
        """

        self._jira_private_key = jira_private_key

    @property
    def jira_project_id(self):
        """Gets the jira_project_id of this JiraInstance.  # noqa: E501


        :return: The jira_project_id of this JiraInstance.  # noqa: E501
        :rtype: str
        """
        return self._jira_project_id

    @jira_project_id.setter
    def jira_project_id(self, jira_project_id):
        """Sets the jira_project_id of this JiraInstance.


        :param jira_project_id: The jira_project_id of this JiraInstance.  # noqa: E501
        :type: str
        """

        self._jira_project_id = jira_project_id

    @property
    def dl_client_key(self):
        """Gets the dl_client_key of this JiraInstance.  # noqa: E501


        :return: The dl_client_key of this JiraInstance.  # noqa: E501
        :rtype: str
        """
        return self._dl_client_key

    @dl_client_key.setter
    def dl_client_key(self, dl_client_key):
        """Sets the dl_client_key of this JiraInstance.


        :param dl_client_key: The dl_client_key of this JiraInstance.  # noqa: E501
        :type: str
        """

        self._dl_client_key = dl_client_key

    @property
    def dl_secret_key(self):
        """Gets the dl_secret_key of this JiraInstance.  # noqa: E501


        :return: The dl_secret_key of this JiraInstance.  # noqa: E501
        :rtype: str
        """
        return self._dl_secret_key

    @dl_secret_key.setter
    def dl_secret_key(self, dl_secret_key):
        """Sets the dl_secret_key of this JiraInstance.


        :param dl_secret_key: The dl_secret_key of this JiraInstance.  # noqa: E501
        :type: str
        """

        self._dl_secret_key = dl_secret_key

    @property
    def dl_portfolio_id(self):
        """Gets the dl_portfolio_id of this JiraInstance.  # noqa: E501


        :return: The dl_portfolio_id of this JiraInstance.  # noqa: E501
        :rtype: str
        """
        return self._dl_portfolio_id

    @dl_portfolio_id.setter
    def dl_portfolio_id(self, dl_portfolio_id):
        """Sets the dl_portfolio_id of this JiraInstance.


        :param dl_portfolio_id: The dl_portfolio_id of this JiraInstance.  # noqa: E501
        :type: str
        """

        self._dl_portfolio_id = dl_portfolio_id

    @property
    def enabled(self):
        """Gets the enabled of this JiraInstance.  # noqa: E501


        :return: The enabled of this JiraInstance.  # noqa: E501
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this JiraInstance.


        :param enabled: The enabled of this JiraInstance.  # noqa: E501
        :type: bool
        """

        self._enabled = enabled

    @property
    def last_sync_attempt(self):
        """Gets the last_sync_attempt of this JiraInstance.  # noqa: E501


        :return: The last_sync_attempt of this JiraInstance.  # noqa: E501
        :rtype: str
        """
        return self._last_sync_attempt

    @last_sync_attempt.setter
    def last_sync_attempt(self, last_sync_attempt):
        """Sets the last_sync_attempt of this JiraInstance.


        :param last_sync_attempt: The last_sync_attempt of this JiraInstance.  # noqa: E501
        :type: str
        """

        self._last_sync_attempt = last_sync_attempt

    @property
    def last_successful_sync(self):
        """Gets the last_successful_sync of this JiraInstance.  # noqa: E501


        :return: The last_successful_sync of this JiraInstance.  # noqa: E501
        :rtype: str
        """
        return self._last_successful_sync

    @last_successful_sync.setter
    def last_successful_sync(self, last_successful_sync):
        """Sets the last_successful_sync of this JiraInstance.


        :param last_successful_sync: The last_successful_sync of this JiraInstance.  # noqa: E501
        :type: str
        """

        self._last_successful_sync = last_successful_sync

    @property
    def last_sync_message(self):
        """Gets the last_sync_message of this JiraInstance.  # noqa: E501


        :return: The last_sync_message of this JiraInstance.  # noqa: E501
        :rtype: str
        """
        return self._last_sync_message

    @last_sync_message.setter
    def last_sync_message(self, last_sync_message):
        """Sets the last_sync_message of this JiraInstance.


        :param last_sync_message: The last_sync_message of this JiraInstance.  # noqa: E501
        :type: str
        """

        self._last_sync_message = last_sync_message

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(JiraInstance, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, JiraInstance):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
