# coding: utf-8

"""
    Decision Lens API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class FieldInsight(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'field': 'Field',
        'grade': 'Grade',
        'grading_boundaries': 'list[float]',
        'min_value': 'float',
        'max_value': 'float',
        'value': 'float',
        'budget': 'float',
        'allocation': 'float',
        'categorization_insights': 'list[CategorizationInsight]'
    }

    attribute_map = {
        'field': 'field',
        'grade': 'grade',
        'grading_boundaries': 'gradingBoundaries',
        'min_value': 'minValue',
        'max_value': 'maxValue',
        'value': 'value',
        'budget': 'budget',
        'allocation': 'allocation',
        'categorization_insights': 'categorizationInsights'
    }

    def __init__(self, field=None, grade=None, grading_boundaries=None, min_value=None, max_value=None, value=None, budget=None, allocation=None, categorization_insights=None):  # noqa: E501
        """FieldInsight - a model defined in Swagger"""  # noqa: E501

        self._field = None
        self._grade = None
        self._grading_boundaries = None
        self._min_value = None
        self._max_value = None
        self._value = None
        self._budget = None
        self._allocation = None
        self._categorization_insights = None
        self.discriminator = None

        if field is not None:
            self.field = field
        if grade is not None:
            self.grade = grade
        if grading_boundaries is not None:
            self.grading_boundaries = grading_boundaries
        if min_value is not None:
            self.min_value = min_value
        if max_value is not None:
            self.max_value = max_value
        if value is not None:
            self.value = value
        if budget is not None:
            self.budget = budget
        if allocation is not None:
            self.allocation = allocation
        if categorization_insights is not None:
            self.categorization_insights = categorization_insights

    @property
    def field(self):
        """Gets the field of this FieldInsight.  # noqa: E501


        :return: The field of this FieldInsight.  # noqa: E501
        :rtype: Field
        """
        return self._field

    @field.setter
    def field(self, field):
        """Sets the field of this FieldInsight.


        :param field: The field of this FieldInsight.  # noqa: E501
        :type: Field
        """

        self._field = field

    @property
    def grade(self):
        """Gets the grade of this FieldInsight.  # noqa: E501


        :return: The grade of this FieldInsight.  # noqa: E501
        :rtype: Grade
        """
        return self._grade

    @grade.setter
    def grade(self, grade):
        """Sets the grade of this FieldInsight.


        :param grade: The grade of this FieldInsight.  # noqa: E501
        :type: Grade
        """

        self._grade = grade

    @property
    def grading_boundaries(self):
        """Gets the grading_boundaries of this FieldInsight.  # noqa: E501


        :return: The grading_boundaries of this FieldInsight.  # noqa: E501
        :rtype: list[float]
        """
        return self._grading_boundaries

    @grading_boundaries.setter
    def grading_boundaries(self, grading_boundaries):
        """Sets the grading_boundaries of this FieldInsight.


        :param grading_boundaries: The grading_boundaries of this FieldInsight.  # noqa: E501
        :type: list[float]
        """

        self._grading_boundaries = grading_boundaries

    @property
    def min_value(self):
        """Gets the min_value of this FieldInsight.  # noqa: E501


        :return: The min_value of this FieldInsight.  # noqa: E501
        :rtype: float
        """
        return self._min_value

    @min_value.setter
    def min_value(self, min_value):
        """Sets the min_value of this FieldInsight.


        :param min_value: The min_value of this FieldInsight.  # noqa: E501
        :type: float
        """

        self._min_value = min_value

    @property
    def max_value(self):
        """Gets the max_value of this FieldInsight.  # noqa: E501


        :return: The max_value of this FieldInsight.  # noqa: E501
        :rtype: float
        """
        return self._max_value

    @max_value.setter
    def max_value(self, max_value):
        """Sets the max_value of this FieldInsight.


        :param max_value: The max_value of this FieldInsight.  # noqa: E501
        :type: float
        """

        self._max_value = max_value

    @property
    def value(self):
        """Gets the value of this FieldInsight.  # noqa: E501


        :return: The value of this FieldInsight.  # noqa: E501
        :rtype: float
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this FieldInsight.


        :param value: The value of this FieldInsight.  # noqa: E501
        :type: float
        """

        self._value = value

    @property
    def budget(self):
        """Gets the budget of this FieldInsight.  # noqa: E501


        :return: The budget of this FieldInsight.  # noqa: E501
        :rtype: float
        """
        return self._budget

    @budget.setter
    def budget(self, budget):
        """Sets the budget of this FieldInsight.


        :param budget: The budget of this FieldInsight.  # noqa: E501
        :type: float
        """

        self._budget = budget

    @property
    def allocation(self):
        """Gets the allocation of this FieldInsight.  # noqa: E501


        :return: The allocation of this FieldInsight.  # noqa: E501
        :rtype: float
        """
        return self._allocation

    @allocation.setter
    def allocation(self, allocation):
        """Sets the allocation of this FieldInsight.


        :param allocation: The allocation of this FieldInsight.  # noqa: E501
        :type: float
        """

        self._allocation = allocation

    @property
    def categorization_insights(self):
        """Gets the categorization_insights of this FieldInsight.  # noqa: E501


        :return: The categorization_insights of this FieldInsight.  # noqa: E501
        :rtype: list[CategorizationInsight]
        """
        return self._categorization_insights

    @categorization_insights.setter
    def categorization_insights(self, categorization_insights):
        """Sets the categorization_insights of this FieldInsight.


        :param categorization_insights: The categorization_insights of this FieldInsight.  # noqa: E501
        :type: list[CategorizationInsight]
        """

        self._categorization_insights = categorization_insights

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FieldInsight, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FieldInsight):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
