# coding: utf-8

"""
    Decision Lens API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ScalePoint(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'auto_scale_value': 'float',
        'manual_scale_value': 'float',
        'auto_value': 'float',
        'manual_value': 'float',
        'category_id': 'str',
        'project': 'Project',
        'auto_value_modified_at': 'int'
    }

    attribute_map = {
        'name': 'name',
        'auto_scale_value': 'autoScaleValue',
        'manual_scale_value': 'manualScaleValue',
        'auto_value': 'autoValue',
        'manual_value': 'manualValue',
        'category_id': 'categoryId',
        'project': 'project',
        'auto_value_modified_at': 'autoValueModifiedAt'
    }

    def __init__(self, name=None, auto_scale_value=None, manual_scale_value=None, auto_value=None, manual_value=None, category_id=None, project=None, auto_value_modified_at=None):  # noqa: E501
        """ScalePoint - a model defined in Swagger"""  # noqa: E501

        self._name = None
        self._auto_scale_value = None
        self._manual_scale_value = None
        self._auto_value = None
        self._manual_value = None
        self._category_id = None
        self._project = None
        self._auto_value_modified_at = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if auto_scale_value is not None:
            self.auto_scale_value = auto_scale_value
        if manual_scale_value is not None:
            self.manual_scale_value = manual_scale_value
        if auto_value is not None:
            self.auto_value = auto_value
        if manual_value is not None:
            self.manual_value = manual_value
        if category_id is not None:
            self.category_id = category_id
        if project is not None:
            self.project = project
        if auto_value_modified_at is not None:
            self.auto_value_modified_at = auto_value_modified_at

    @property
    def name(self):
        """Gets the name of this ScalePoint.  # noqa: E501


        :return: The name of this ScalePoint.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ScalePoint.


        :param name: The name of this ScalePoint.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def auto_scale_value(self):
        """Gets the auto_scale_value of this ScalePoint.  # noqa: E501


        :return: The auto_scale_value of this ScalePoint.  # noqa: E501
        :rtype: float
        """
        return self._auto_scale_value

    @auto_scale_value.setter
    def auto_scale_value(self, auto_scale_value):
        """Sets the auto_scale_value of this ScalePoint.


        :param auto_scale_value: The auto_scale_value of this ScalePoint.  # noqa: E501
        :type: float
        """

        self._auto_scale_value = auto_scale_value

    @property
    def manual_scale_value(self):
        """Gets the manual_scale_value of this ScalePoint.  # noqa: E501


        :return: The manual_scale_value of this ScalePoint.  # noqa: E501
        :rtype: float
        """
        return self._manual_scale_value

    @manual_scale_value.setter
    def manual_scale_value(self, manual_scale_value):
        """Sets the manual_scale_value of this ScalePoint.


        :param manual_scale_value: The manual_scale_value of this ScalePoint.  # noqa: E501
        :type: float
        """

        self._manual_scale_value = manual_scale_value

    @property
    def auto_value(self):
        """Gets the auto_value of this ScalePoint.  # noqa: E501


        :return: The auto_value of this ScalePoint.  # noqa: E501
        :rtype: float
        """
        return self._auto_value

    @auto_value.setter
    def auto_value(self, auto_value):
        """Sets the auto_value of this ScalePoint.


        :param auto_value: The auto_value of this ScalePoint.  # noqa: E501
        :type: float
        """

        self._auto_value = auto_value

    @property
    def manual_value(self):
        """Gets the manual_value of this ScalePoint.  # noqa: E501


        :return: The manual_value of this ScalePoint.  # noqa: E501
        :rtype: float
        """
        return self._manual_value

    @manual_value.setter
    def manual_value(self, manual_value):
        """Sets the manual_value of this ScalePoint.


        :param manual_value: The manual_value of this ScalePoint.  # noqa: E501
        :type: float
        """

        self._manual_value = manual_value

    @property
    def category_id(self):
        """Gets the category_id of this ScalePoint.  # noqa: E501


        :return: The category_id of this ScalePoint.  # noqa: E501
        :rtype: str
        """
        return self._category_id

    @category_id.setter
    def category_id(self, category_id):
        """Sets the category_id of this ScalePoint.


        :param category_id: The category_id of this ScalePoint.  # noqa: E501
        :type: str
        """

        self._category_id = category_id

    @property
    def project(self):
        """Gets the project of this ScalePoint.  # noqa: E501


        :return: The project of this ScalePoint.  # noqa: E501
        :rtype: Project
        """
        return self._project

    @project.setter
    def project(self, project):
        """Sets the project of this ScalePoint.


        :param project: The project of this ScalePoint.  # noqa: E501
        :type: Project
        """

        self._project = project

    @property
    def auto_value_modified_at(self):
        """Gets the auto_value_modified_at of this ScalePoint.  # noqa: E501


        :return: The auto_value_modified_at of this ScalePoint.  # noqa: E501
        :rtype: int
        """
        return self._auto_value_modified_at

    @auto_value_modified_at.setter
    def auto_value_modified_at(self, auto_value_modified_at):
        """Sets the auto_value_modified_at of this ScalePoint.


        :param auto_value_modified_at: The auto_value_modified_at of this ScalePoint.  # noqa: E501
        :type: int
        """

        self._auto_value_modified_at = auto_value_modified_at

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ScalePoint, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ScalePoint):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
