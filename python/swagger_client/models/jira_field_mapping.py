# coding: utf-8

"""
    Decision Lens API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class JiraFieldMapping(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'jira_field_id': 'str',
        'dl_field_id': 'str',
        'dl_field_type': 'FieldType',
        'dl_data_type': 'DataType',
        'dl_tags': 'Tags',
        'dl_categories': 'CategoryOptions'
    }

    attribute_map = {
        'jira_field_id': 'jiraFieldId',
        'dl_field_id': 'dlFieldId',
        'dl_field_type': 'dlFieldType',
        'dl_data_type': 'dlDataType',
        'dl_tags': 'dlTags',
        'dl_categories': 'dlCategories'
    }

    def __init__(self, jira_field_id=None, dl_field_id=None, dl_field_type=None, dl_data_type=None, dl_tags=None, dl_categories=None):  # noqa: E501
        """JiraFieldMapping - a model defined in Swagger"""  # noqa: E501

        self._jira_field_id = None
        self._dl_field_id = None
        self._dl_field_type = None
        self._dl_data_type = None
        self._dl_tags = None
        self._dl_categories = None
        self.discriminator = None

        if jira_field_id is not None:
            self.jira_field_id = jira_field_id
        if dl_field_id is not None:
            self.dl_field_id = dl_field_id
        if dl_field_type is not None:
            self.dl_field_type = dl_field_type
        if dl_data_type is not None:
            self.dl_data_type = dl_data_type
        if dl_tags is not None:
            self.dl_tags = dl_tags
        if dl_categories is not None:
            self.dl_categories = dl_categories

    @property
    def jira_field_id(self):
        """Gets the jira_field_id of this JiraFieldMapping.  # noqa: E501


        :return: The jira_field_id of this JiraFieldMapping.  # noqa: E501
        :rtype: str
        """
        return self._jira_field_id

    @jira_field_id.setter
    def jira_field_id(self, jira_field_id):
        """Sets the jira_field_id of this JiraFieldMapping.


        :param jira_field_id: The jira_field_id of this JiraFieldMapping.  # noqa: E501
        :type: str
        """

        self._jira_field_id = jira_field_id

    @property
    def dl_field_id(self):
        """Gets the dl_field_id of this JiraFieldMapping.  # noqa: E501


        :return: The dl_field_id of this JiraFieldMapping.  # noqa: E501
        :rtype: str
        """
        return self._dl_field_id

    @dl_field_id.setter
    def dl_field_id(self, dl_field_id):
        """Sets the dl_field_id of this JiraFieldMapping.


        :param dl_field_id: The dl_field_id of this JiraFieldMapping.  # noqa: E501
        :type: str
        """

        self._dl_field_id = dl_field_id

    @property
    def dl_field_type(self):
        """Gets the dl_field_type of this JiraFieldMapping.  # noqa: E501


        :return: The dl_field_type of this JiraFieldMapping.  # noqa: E501
        :rtype: FieldType
        """
        return self._dl_field_type

    @dl_field_type.setter
    def dl_field_type(self, dl_field_type):
        """Sets the dl_field_type of this JiraFieldMapping.


        :param dl_field_type: The dl_field_type of this JiraFieldMapping.  # noqa: E501
        :type: FieldType
        """

        self._dl_field_type = dl_field_type

    @property
    def dl_data_type(self):
        """Gets the dl_data_type of this JiraFieldMapping.  # noqa: E501


        :return: The dl_data_type of this JiraFieldMapping.  # noqa: E501
        :rtype: DataType
        """
        return self._dl_data_type

    @dl_data_type.setter
    def dl_data_type(self, dl_data_type):
        """Sets the dl_data_type of this JiraFieldMapping.


        :param dl_data_type: The dl_data_type of this JiraFieldMapping.  # noqa: E501
        :type: DataType
        """

        self._dl_data_type = dl_data_type

    @property
    def dl_tags(self):
        """Gets the dl_tags of this JiraFieldMapping.  # noqa: E501


        :return: The dl_tags of this JiraFieldMapping.  # noqa: E501
        :rtype: Tags
        """
        return self._dl_tags

    @dl_tags.setter
    def dl_tags(self, dl_tags):
        """Sets the dl_tags of this JiraFieldMapping.


        :param dl_tags: The dl_tags of this JiraFieldMapping.  # noqa: E501
        :type: Tags
        """

        self._dl_tags = dl_tags

    @property
    def dl_categories(self):
        """Gets the dl_categories of this JiraFieldMapping.  # noqa: E501


        :return: The dl_categories of this JiraFieldMapping.  # noqa: E501
        :rtype: CategoryOptions
        """
        return self._dl_categories

    @dl_categories.setter
    def dl_categories(self, dl_categories):
        """Sets the dl_categories of this JiraFieldMapping.


        :param dl_categories: The dl_categories of this JiraFieldMapping.  # noqa: E501
        :type: CategoryOptions
        """

        self._dl_categories = dl_categories

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(JiraFieldMapping, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, JiraFieldMapping):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
