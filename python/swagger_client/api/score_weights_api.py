# coding: utf-8

"""
    Decision Lens API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class ScoreWeightsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def get_score_weights_for_portfolio(self, portfolio_id, **kwargs):  # noqa: E501
        """Fetch score weights for portfolio  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_score_weights_for_portfolio(portfolio_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str portfolio_id: Portfolio id (required)
        :param int limit: Pagination limit
        :param int offset: Pagination offset
        :param str order_by: Comma delimited list of order by expressions. Use '-' in front of expression for reverse order.
        :param str match: Semi-colon delimited list of expressions to include in the response only the items in a collections that satisfy the expression(s). All other items should be exluded.
        :return: ScoreWeights
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_score_weights_for_portfolio_with_http_info(portfolio_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_score_weights_for_portfolio_with_http_info(portfolio_id, **kwargs)  # noqa: E501
            return data

    def get_score_weights_for_portfolio_with_http_info(self, portfolio_id, **kwargs):  # noqa: E501
        """Fetch score weights for portfolio  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_score_weights_for_portfolio_with_http_info(portfolio_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str portfolio_id: Portfolio id (required)
        :param int limit: Pagination limit
        :param int offset: Pagination offset
        :param str order_by: Comma delimited list of order by expressions. Use '-' in front of expression for reverse order.
        :param str match: Semi-colon delimited list of expressions to include in the response only the items in a collections that satisfy the expression(s). All other items should be exluded.
        :return: ScoreWeights
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['portfolio_id', 'limit', 'offset', 'order_by', 'match']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_score_weights_for_portfolio" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'portfolio_id' is set
        if ('portfolio_id' not in params or
                params['portfolio_id'] is None):
            raise ValueError("Missing the required parameter `portfolio_id` when calling `get_score_weights_for_portfolio`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'portfolio_id' in params:
            query_params.append(('portfolioId', params['portfolio_id']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'order_by' in params:
            query_params.append(('orderBy', params['order_by']))  # noqa: E501
        if 'match' in params:
            query_params.append(('match', params['match']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/scoreWeights', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ScoreWeights',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_score_weights_for_portfolio(self, score_weights, **kwargs):  # noqa: E501
        """Updates Score Weights for portfolio  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_score_weights_for_portfolio(score_weights, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[ScoreWeight] score_weights: Score Weights (required)
        :return: list[ScoreWeight]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_score_weights_for_portfolio_with_http_info(score_weights, **kwargs)  # noqa: E501
        else:
            (data) = self.update_score_weights_for_portfolio_with_http_info(score_weights, **kwargs)  # noqa: E501
            return data

    def update_score_weights_for_portfolio_with_http_info(self, score_weights, **kwargs):  # noqa: E501
        """Updates Score Weights for portfolio  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_score_weights_for_portfolio_with_http_info(score_weights, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[ScoreWeight] score_weights: Score Weights (required)
        :return: list[ScoreWeight]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['score_weights']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_score_weights_for_portfolio" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'score_weights' is set
        if ('score_weights' not in params or
                params['score_weights'] is None):
            raise ValueError("Missing the required parameter `score_weights` when calling `update_score_weights_for_portfolio`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'score_weights' in params:
            body_params = params['score_weights']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/merge-patch+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2']  # noqa: E501

        return self.api_client.call_api(
            '/scoreWeights', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[ScoreWeight]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
