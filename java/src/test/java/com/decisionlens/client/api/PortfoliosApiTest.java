/*
 * Decision Lens API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.decisionlens.client.api;

import com.decisionlens.client.ApiException;
import com.decisionlens.client.model.Activities;
import com.decisionlens.client.model.CustomName;
import com.decisionlens.client.model.ErrorResponse;
import com.decisionlens.client.model.FieldValue;
import com.decisionlens.client.model.FieldValuePatchItem;
import java.io.File;
import com.decisionlens.client.model.Operations;
import com.decisionlens.client.model.Portfolio;
import com.decisionlens.client.model.Portfolios;
import com.decisionlens.client.model.Projects;
import com.decisionlens.client.model.ResourcePool;
import com.decisionlens.client.model.ResourcePoolBudgetAmountPatchItem;
import com.decisionlens.client.model.ResourcePools;
import com.decisionlens.client.model.Source;
import com.decisionlens.client.model.SpreadsheetReport;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for PortfoliosApi
 */
@Ignore
public class PortfoliosApiTest {

    private final PortfoliosApi api = new PortfoliosApi();

    
    /**
     * Archive a portfolio.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void archivePortfolioTest() throws ApiException {
        String id = null;
        Portfolio response = api.archivePortfolio(id);

        // TODO: test validations
    }
    
    /**
     * Creates a new portfolio.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createPortfolioTest() throws ApiException {
        Portfolio body = null;
        Portfolio response = api.createPortfolio(body);

        // TODO: test validations
    }
    
    /**
     * Download spreadsheet template for portfolio
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void downloadSpreadsheetTemplateTest() throws ApiException {
        String portfolioId = null;
        byte[] response = api.downloadSpreadsheetTemplate(portfolioId);

        // TODO: test validations
    }
    
    /**
     * Export portfolio data in JSON format
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void exportPortfolioDataTest() throws ApiException {
        String id = null;
        byte[] response = api.exportPortfolioData(id);

        // TODO: test validations
    }
    
    /**
     * Retrieves a portfolio.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPortfolioTest() throws ApiException {
        String id = null;
        String expand = null;
        Portfolio response = api.getPortfolio(id, expand);

        // TODO: test validations
    }
    
    /**
     * Retrieves portfolio activities log.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPortfolioActivitiesTest() throws ApiException {
        String id = null;
        Integer limit = null;
        Integer offset = null;
        String match = null;
        Activities response = api.getPortfolioActivities(id, limit, offset, match);

        // TODO: test validations
    }
    
    /**
     * (Deprecated. Use getResourcePoolsForPortfolioPlan) Retrieves resource pools in a portfolio.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPortfolioResourcePoolsTest() throws ApiException {
        String id = null;
        String expand = null;
        Integer limit = null;
        Integer offset = null;
        String orderBy = null;
        String match = null;
        ResourcePools response = api.getPortfolioResourcePools(id, expand, limit, offset, orderBy, match);

        // TODO: test validations
    }
    
    /**
     * Get portfolios.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPortfoliosTest() throws ApiException {
        String expand = null;
        Integer limit = null;
        Integer offset = null;
        String orderBy = null;
        String match = null;
        Portfolios response = api.getPortfolios(expand, limit, offset, orderBy, match);

        // TODO: test validations
    }
    
    /**
     * Retrieves projects for portfolio
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getProjectsForPortfolioTest() throws ApiException {
        String portfolioId = null;
        Integer limit = null;
        Integer offset = null;
        Projects response = api.getProjectsForPortfolio(portfolioId, limit, offset);

        // TODO: test validations
    }
    
    /**
     * Retrieves spreadsheet report for portfolio
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSpreadsheetReportForPortfolioTest() throws ApiException {
        String portfolioId = null;
        String spreadsheetId = null;
        String sheetName = null;
        String expand = null;
        SpreadsheetReport response = api.getSpreadsheetReportForPortfolio(portfolioId, spreadsheetId, sheetName, expand);

        // TODO: test validations
    }
    
    /**
     * Import portfolio data in JSON format
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void importPortfolioDataTest() throws ApiException {
        String id = null;
        File podFile = null;
        String templateName = null;
        Portfolio response = api.importPortfolioData(id, podFile, templateName);

        // TODO: test validations
    }
    
    /**
     * Generates a new registration token
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void regenerateUserRegistrationTokenTest() throws ApiException {
        String id = null;
        Portfolio response = api.regenerateUserRegistrationToken(id);

        // TODO: test validations
    }
    
    /**
     * Saves spreadsheet for portfolio
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void saveSpreadsheetForPortfolioTest() throws ApiException {
        String portfolioId = null;
        String spreadsheetId = null;
        String sheetName = null;
        SpreadsheetReport response = api.saveSpreadsheetForPortfolio(portfolioId, spreadsheetId, sheetName);

        // TODO: test validations
    }
    
    /**
     * Save spreadsheet source for a portfolio
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void saveSpreadsheetSourceForPortfolioTest() throws ApiException {
        String id = null;
        File file = null;
        Boolean saveZeroAsBlank = null;
        Source response = api.saveSpreadsheetSourceForPortfolio(id, file, saveZeroAsBlank);

        // TODO: test validations
    }
    
    /**
     * Updates custom names for portfolio
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setCustomNamesTest() throws ApiException {
        String portfolioId = null;
        List<CustomName> customNames = null;
        List<CustomName> response = api.setCustomNames(portfolioId, customNames);

        // TODO: test validations
    }
    
    /**
     * Update a portfolio.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updatePortfolioTest() throws ApiException {
        String id = null;
        Operations body = null;
        String expand = null;
        Portfolio response = api.updatePortfolio(id, body, expand);

        // TODO: test validations
    }
    
    /**
     * Update field values in a portfolio
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updatePortfolioFieldValuesTest() throws ApiException {
        Object id = null;
        List<FieldValuePatchItem> body = null;
        String expand = null;
        List<FieldValue> response = api.updatePortfolioFieldValues(id, body, expand);

        // TODO: test validations
    }
    
    /**
     * (Deprecated. Use updateResourcePoolBudgetAmountsForPortfolioPlan) Update resource pool budget amounts in a portfolio
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updatePortfolioResourcePoolBudgetAmountsTest() throws ApiException {
        Object id = null;
        List<ResourcePoolBudgetAmountPatchItem> body = null;
        List<ResourcePool> response = api.updatePortfolioResourcePoolBudgetAmounts(id, body);

        // TODO: test validations
    }
    
}
