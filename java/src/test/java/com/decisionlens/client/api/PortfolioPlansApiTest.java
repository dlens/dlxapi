/*
 * Decision Lens API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.decisionlens.client.api;

import com.decisionlens.client.ApiException;
import com.decisionlens.client.model.Activities;
import com.decisionlens.client.model.AddUsersRequest;
import com.decisionlens.client.model.BudgetAllocations;
import com.decisionlens.client.model.ErrorResponse;
import com.decisionlens.client.model.FieldValue;
import com.decisionlens.client.model.FieldValuePatchItem;
import com.decisionlens.client.model.MinifiedProjects;
import com.decisionlens.client.model.Operations;
import com.decisionlens.client.model.PatchItem;
import com.decisionlens.client.model.PortfolioPlan;
import com.decisionlens.client.model.PortfolioPlanUser;
import com.decisionlens.client.model.PortfolioPlanUsers;
import com.decisionlens.client.model.PortfolioPlans;
import com.decisionlens.client.model.Project;
import com.decisionlens.client.model.Projects;
import com.decisionlens.client.model.Recommendation;
import com.decisionlens.client.model.Recommendations;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for PortfolioPlansApi
 */
@Ignore
public class PortfolioPlansApiTest {

    private final PortfolioPlansApi api = new PortfolioPlansApi();

    
    /**
     * Add users to a portfolio plan.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addPortfolioPlanUsersTest() throws ApiException {
        String id = null;
        AddUsersRequest body = null;
        List<PortfolioPlanUser> response = api.addPortfolioPlanUsers(id, body);

        // TODO: test validations
    }
    
    /**
     * Apply recommendations of a portfolio plan.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void applyRecommendationsForPortfolioPlanTest() throws ApiException {
        String id = null;
        List<Recommendation> body = null;
        List<FieldValue> response = api.applyRecommendationsForPortfolioPlan(id, body);

        // TODO: test validations
    }
    
    /**
     * Create a portfolio plan
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createPortfolioPlanTest() throws ApiException {
        PortfolioPlan body = null;
        String expand = null;
        PortfolioPlan response = api.createPortfolioPlan(body, expand);

        // TODO: test validations
    }
    
    /**
     * Create new projects
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createProjectsInPortfolioPlanTest() throws ApiException {
        String id = null;
        List<Project> body = null;
        Boolean doNotExpand = null;
        List<Project> response = api.createProjectsInPortfolioPlan(id, body, doNotExpand);

        // TODO: test validations
    }
    
    /**
     * Deletes portfolio plan
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deletePortfolioPlanTest() throws ApiException {
        String id = null;
        api.deletePortfolioPlan(id);

        // TODO: test validations
    }
    
    /**
     * Export portfolio plan
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void exportPortfolioPlanTest() throws ApiException {
        String id = null;
        Object exportType = null;
        Object exportFormat = null;
        byte[] response = api.exportPortfolioPlan(id, exportType, exportFormat);

        // TODO: test validations
    }
    
    /**
     * Retrieves budget allocations for a portfolio plan.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getBudgetAllocationsForPortfolioPlanTest() throws ApiException {
        String id = null;
        Long startTime = null;
        Long endTime = null;
        BudgetAllocations response = api.getBudgetAllocationsForPortfolioPlan(id, startTime, endTime);

        // TODO: test validations
    }
    
    /**
     * Retrieves minified projects contained within a portfolio plan.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getMinifiedProjectsForPortfolioPlanTest() throws ApiException {
        String id = null;
        String expand = null;
        Integer limit = null;
        Integer offset = null;
        String orderBy = null;
        String match = null;
        MinifiedProjects response = api.getMinifiedProjectsForPortfolioPlan(id, expand, limit, offset, orderBy, match);

        // TODO: test validations
    }
    
    /**
     * Retrieves portfolio plan
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPortfolioPlanTest() throws ApiException {
        String id = null;
        String expand = null;
        PortfolioPlan response = api.getPortfolioPlan(id, expand);

        // TODO: test validations
    }
    
    /**
     * Retrieves portfolio plan activities log.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPortfolioPlanActivitiesTest() throws ApiException {
        String id = null;
        String projectId = null;
        Integer limit = null;
        Integer offset = null;
        String match = null;
        Activities response = api.getPortfolioPlanActivities(id, projectId, limit, offset, match);

        // TODO: test validations
    }
    
    /**
     * Retrieves users in a portfolio plan.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPortfolioPlanUsersTest() throws ApiException {
        String id = null;
        Integer limit = null;
        Integer offset = null;
        String orderBy = null;
        String match = null;
        PortfolioPlanUsers response = api.getPortfolioPlanUsers(id, limit, offset, orderBy, match);

        // TODO: test validations
    }
    
    /**
     * Retrieves portfolio plans
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPortfolioPlansTest() throws ApiException {
        String portfolioId = null;
        String expand = null;
        Integer limit = null;
        Integer offset = null;
        String orderBy = null;
        String match = null;
        PortfolioPlans response = api.getPortfolioPlans(portfolioId, expand, limit, offset, orderBy, match);

        // TODO: test validations
    }
    
    /**
     * Retrieves project contained within a portfolio plan.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getProjectForPortfolioPlanTest() throws ApiException {
        String portfolioPlanId = null;
        String projectId = null;
        Project response = api.getProjectForPortfolioPlan(portfolioPlanId, projectId);

        // TODO: test validations
    }
    
    /**
     * Retrieves projects for portfolio plan
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getProjectPortfolioPlansForPortfolioPlanAndPortfolioTest() throws ApiException {
        String portfolioId = null;
        String portfolioPlanId = null;
        Integer positionFrom = null;
        Integer positionTo = null;
        Projects response = api.getProjectPortfolioPlansForPortfolioPlanAndPortfolio(portfolioId, portfolioPlanId, positionFrom, positionTo);

        // TODO: test validations
    }
    
    /**
     * Retrieves projects contained within a portfolio plan. Possible expand paths - (items.fieldValues, contributingUserIds)
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getProjectsForPortfolioPlanTest() throws ApiException {
        String id = null;
        String expand = null;
        Integer limit = null;
        Integer offset = null;
        String orderBy = null;
        String match = null;
        Projects response = api.getProjectsForPortfolioPlan(id, expand, limit, offset, orderBy, match);

        // TODO: test validations
    }
    
    /**
     * Retrieves recommendations for a portfolio plan.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getRecommendationsForPortfolioPlanTest() throws ApiException {
        String id = null;
        Long startDate = null;
        Long endDate = null;
        Object planType = null;
        Recommendations response = api.getRecommendationsForPortfolioPlan(id, startDate, endDate, planType);

        // TODO: test validations
    }
    
    /**
     * Retrieves schedule for portfolio plan. The schedule is stored in a new portfolio plan.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getScheduleForPortfolioPlanTest() throws ApiException {
        String id = null;
        Long startDate = null;
        Long endDate = null;
        Double toleranceLevelPercentage = null;
        Object schedulingCriteria = null;
        Recommendations response = api.getScheduleForPortfolioPlan(id, startDate, endDate, toleranceLevelPercentage, schedulingCriteria);

        // TODO: test validations
    }
    
    /**
     * Rebaseline a portfolio plan.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void rebaselinePortfolioPlanTest() throws ApiException {
        String id = null;
        PortfolioPlan response = api.rebaselinePortfolioPlan(id);

        // TODO: test validations
    }
    
    /**
     * Updates a portfolio plan utilizing JSON Patch Operations. 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updatePortfolioPlanTest() throws ApiException {
        String id = null;
        Operations body = null;
        String expand = null;
        PortfolioPlan response = api.updatePortfolioPlan(id, body, expand);

        // TODO: test validations
    }
    
    /**
     * Update field values in a portfolio plan
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updatePortfolioPlanFieldValuesTest() throws ApiException {
        Object id = null;
        List<FieldValuePatchItem> body = null;
        String expand = null;
        List<FieldValue> response = api.updatePortfolioPlanFieldValues(id, body, expand);

        // TODO: test validations
    }
    
    /**
     * Update users in a portfolio plan
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updatePortfolioPlanUsersTest() throws ApiException {
        Object id = null;
        List<PatchItem> body = null;
        List<PortfolioPlanUser> response = api.updatePortfolioPlanUsers(id, body);

        // TODO: test validations
    }
    
}
