/*
 * Decision Lens API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.decisionlens.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.decisionlens.client.model.CostBudgetAllocation;
import com.decisionlens.client.model.DlResource;
import com.decisionlens.client.model.Portfolio;
import com.decisionlens.client.model.PortfolioPlanInsights;
import com.decisionlens.client.model.ValueCount;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * PortfolioPlanInsights
 */

public class PortfolioPlanInsights extends DlResource {
  @SerializedName("statusCounts")
  private List<ValueCount> statusCounts = null;

  @SerializedName("budget")
  private Double budget = null;

  @SerializedName("allocation")
  private Double allocation = null;

  @SerializedName("portfolio")
  private Portfolio portfolio = null;

  @SerializedName("details")
  private List<PortfolioPlanInsights> details = null;

  @SerializedName("costBudgetAllocation")
  private List<CostBudgetAllocation> costBudgetAllocation = null;

  public PortfolioPlanInsights statusCounts(List<ValueCount> statusCounts) {
    this.statusCounts = statusCounts;
    return this;
  }

  public PortfolioPlanInsights addStatusCountsItem(ValueCount statusCountsItem) {
    if (this.statusCounts == null) {
      this.statusCounts = new ArrayList<ValueCount>();
    }
    this.statusCounts.add(statusCountsItem);
    return this;
  }

   /**
   * Get statusCounts
   * @return statusCounts
  **/
  @ApiModelProperty(value = "")
  public List<ValueCount> getStatusCounts() {
    return statusCounts;
  }

  public void setStatusCounts(List<ValueCount> statusCounts) {
    this.statusCounts = statusCounts;
  }

  public PortfolioPlanInsights budget(Double budget) {
    this.budget = budget;
    return this;
  }

   /**
   * Get budget
   * @return budget
  **/
  @ApiModelProperty(value = "")
  public Double getBudget() {
    return budget;
  }

  public void setBudget(Double budget) {
    this.budget = budget;
  }

  public PortfolioPlanInsights allocation(Double allocation) {
    this.allocation = allocation;
    return this;
  }

   /**
   * Get allocation
   * @return allocation
  **/
  @ApiModelProperty(value = "")
  public Double getAllocation() {
    return allocation;
  }

  public void setAllocation(Double allocation) {
    this.allocation = allocation;
  }

  public PortfolioPlanInsights portfolio(Portfolio portfolio) {
    this.portfolio = portfolio;
    return this;
  }

   /**
   * Get portfolio
   * @return portfolio
  **/
  @ApiModelProperty(value = "")
  public Portfolio getPortfolio() {
    return portfolio;
  }

  public void setPortfolio(Portfolio portfolio) {
    this.portfolio = portfolio;
  }

  public PortfolioPlanInsights details(List<PortfolioPlanInsights> details) {
    this.details = details;
    return this;
  }

  public PortfolioPlanInsights addDetailsItem(PortfolioPlanInsights detailsItem) {
    if (this.details == null) {
      this.details = new ArrayList<PortfolioPlanInsights>();
    }
    this.details.add(detailsItem);
    return this;
  }

   /**
   * Get details
   * @return details
  **/
  @ApiModelProperty(value = "")
  public List<PortfolioPlanInsights> getDetails() {
    return details;
  }

  public void setDetails(List<PortfolioPlanInsights> details) {
    this.details = details;
  }

  public PortfolioPlanInsights costBudgetAllocation(List<CostBudgetAllocation> costBudgetAllocation) {
    this.costBudgetAllocation = costBudgetAllocation;
    return this;
  }

  public PortfolioPlanInsights addCostBudgetAllocationItem(CostBudgetAllocation costBudgetAllocationItem) {
    if (this.costBudgetAllocation == null) {
      this.costBudgetAllocation = new ArrayList<CostBudgetAllocation>();
    }
    this.costBudgetAllocation.add(costBudgetAllocationItem);
    return this;
  }

   /**
   * Get costBudgetAllocation
   * @return costBudgetAllocation
  **/
  @ApiModelProperty(value = "")
  public List<CostBudgetAllocation> getCostBudgetAllocation() {
    return costBudgetAllocation;
  }

  public void setCostBudgetAllocation(List<CostBudgetAllocation> costBudgetAllocation) {
    this.costBudgetAllocation = costBudgetAllocation;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PortfolioPlanInsights portfolioPlanInsights = (PortfolioPlanInsights) o;
    return Objects.equals(this.statusCounts, portfolioPlanInsights.statusCounts) &&
        Objects.equals(this.budget, portfolioPlanInsights.budget) &&
        Objects.equals(this.allocation, portfolioPlanInsights.allocation) &&
        Objects.equals(this.portfolio, portfolioPlanInsights.portfolio) &&
        Objects.equals(this.details, portfolioPlanInsights.details) &&
        Objects.equals(this.costBudgetAllocation, portfolioPlanInsights.costBudgetAllocation) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(statusCounts, budget, allocation, portfolio, details, costBudgetAllocation, super.hashCode());
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PortfolioPlanInsights {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    statusCounts: ").append(toIndentedString(statusCounts)).append("\n");
    sb.append("    budget: ").append(toIndentedString(budget)).append("\n");
    sb.append("    allocation: ").append(toIndentedString(allocation)).append("\n");
    sb.append("    portfolio: ").append(toIndentedString(portfolio)).append("\n");
    sb.append("    details: ").append(toIndentedString(details)).append("\n");
    sb.append("    costBudgetAllocation: ").append(toIndentedString(costBudgetAllocation)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

