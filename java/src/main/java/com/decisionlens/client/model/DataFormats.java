/*
 * Decision Lens API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.decisionlens.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.decisionlens.client.model.Currency;
import com.decisionlens.client.model.DateFormat;
import com.decisionlens.client.model.Negatives;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * DataFormats
 */

public class DataFormats {
  @SerializedName("decimalPlaces")
  private Integer decimalPlaces = null;

  @SerializedName("currency")
  private Currency currency = null;

  @SerializedName("negatives")
  private Negatives negatives = null;

  @SerializedName("dateFormat")
  private DateFormat dateFormat = null;

  public DataFormats decimalPlaces(Integer decimalPlaces) {
    this.decimalPlaces = decimalPlaces;
    return this;
  }

   /**
   * Get decimalPlaces
   * @return decimalPlaces
  **/
  @ApiModelProperty(value = "")
  public Integer getDecimalPlaces() {
    return decimalPlaces;
  }

  public void setDecimalPlaces(Integer decimalPlaces) {
    this.decimalPlaces = decimalPlaces;
  }

  public DataFormats currency(Currency currency) {
    this.currency = currency;
    return this;
  }

   /**
   * Get currency
   * @return currency
  **/
  @ApiModelProperty(value = "")
  public Currency getCurrency() {
    return currency;
  }

  public void setCurrency(Currency currency) {
    this.currency = currency;
  }

  public DataFormats negatives(Negatives negatives) {
    this.negatives = negatives;
    return this;
  }

   /**
   * Get negatives
   * @return negatives
  **/
  @ApiModelProperty(value = "")
  public Negatives getNegatives() {
    return negatives;
  }

  public void setNegatives(Negatives negatives) {
    this.negatives = negatives;
  }

  public DataFormats dateFormat(DateFormat dateFormat) {
    this.dateFormat = dateFormat;
    return this;
  }

   /**
   * Get dateFormat
   * @return dateFormat
  **/
  @ApiModelProperty(value = "")
  public DateFormat getDateFormat() {
    return dateFormat;
  }

  public void setDateFormat(DateFormat dateFormat) {
    this.dateFormat = dateFormat;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DataFormats dataFormats = (DataFormats) o;
    return Objects.equals(this.decimalPlaces, dataFormats.decimalPlaces) &&
        Objects.equals(this.currency, dataFormats.currency) &&
        Objects.equals(this.negatives, dataFormats.negatives) &&
        Objects.equals(this.dateFormat, dataFormats.dateFormat);
  }

  @Override
  public int hashCode() {
    return Objects.hash(decimalPlaces, currency, negatives, dateFormat);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DataFormats {\n");
    
    sb.append("    decimalPlaces: ").append(toIndentedString(decimalPlaces)).append("\n");
    sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
    sb.append("    negatives: ").append(toIndentedString(negatives)).append("\n");
    sb.append("    dateFormat: ").append(toIndentedString(dateFormat)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

