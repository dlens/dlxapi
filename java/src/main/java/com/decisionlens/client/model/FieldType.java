/*
 * Decision Lens API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.decisionlens.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.annotations.SerializedName;

import java.io.IOException;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

/**
 * Gets or Sets FieldType
 */
@JsonAdapter(FieldType.Adapter.class)
public enum FieldType {
  
  NONE("NONE"),
  
  PROJECTNAME("PROJECTNAME"),
  
  OTHER("OTHER"),
  
  STATUS("STATUS"),
  
  VALUE("VALUE"),
  
  COST("COST"),
  
  RISK("RISK"),
  
  BALANCE("BALANCE"),
  
  ALLOCATE("ALLOCATE"),
  
  START("START"),
  
  END("END"),
  
  PORTFOLIONAME("PORTFOLIONAME"),
  
  TAGS("TAGS"),
  
  ATTACHMENTS("ATTACHMENTS"),
  
  LOCK("LOCK"),
  
  COSTAGGREGATE("COSTAGGREGATE"),
  
  SPEND_PLANNED("SPEND_PLANNED"),
  
  SPEND_ACTUAL("SPEND_ACTUAL"),
  
  BUDGET("BUDGET"),
  
  COST_WINDOW_START("COST_WINDOW_START"),
  
  COST_WINDOW_END("COST_WINDOW_END"),
  
  SCORE("SCORE"),
  
  FIELD_SCORE("FIELD_SCORE"),
  
  COST_TABLE("COST_TABLE"),
  
  MODIFIED_AT("MODIFIED_AT"),
  
  ALLOCATE_AGGREGATE("ALLOCATE_AGGREGATE"),
  
  SPEND_PLANNED_AGGREGATE("SPEND_PLANNED_AGGREGATE"),
  
  SPEND_ACTUAL_AGGREGATE("SPEND_ACTUAL_AGGREGATE"),
  
  TIME_PERIOD_COST("TIME_PERIOD_COST"),
  
  TIME_PERIOD_ALLOCATE("TIME_PERIOD_ALLOCATE"),
  
  TIME_PERIOD_SPEND_PLANNED("TIME_PERIOD_SPEND_PLANNED"),
  
  TIME_PERIOD_SPEND_ACTUAL("TIME_PERIOD_SPEND_ACTUAL");

  private String value;

  FieldType(String value) {
    this.value = value;
  }

  public String getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  public static FieldType fromValue(String text) {
    for (FieldType b : FieldType.values()) {
      if (String.valueOf(b.value).equals(text)) {
        return b;
      }
    }
    return null;
  }

  public static class Adapter extends TypeAdapter<FieldType> {
    @Override
    public void write(final JsonWriter jsonWriter, final FieldType enumeration) throws IOException {
      jsonWriter.value(enumeration.getValue());
    }

    @Override
    public FieldType read(final JsonReader jsonReader) throws IOException {
      String value = jsonReader.nextString();
      return FieldType.fromValue(String.valueOf(value));
    }
  }
}

