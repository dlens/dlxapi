/*
 * Decision Lens API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.decisionlens.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.annotations.SerializedName;

import java.io.IOException;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

/**
 * Gets or Sets ColumnType
 */
@JsonAdapter(ColumnType.Adapter.class)
public enum ColumnType {
  
  TOTAL_REQUEST("TOTAL_REQUEST"),
  
  TOTAL_DIFF("TOTAL_DIFF"),
  
  COST_REQUEST("COST_REQUEST"),
  
  TOTAL_ALLOCATED("TOTAL_ALLOCATED"),
  
  TOTAL_PLANNED("TOTAL_PLANNED"),
  
  TOTAL_ALLOCATED_PLANNED_DIFF("TOTAL_ALLOCATED_PLANNED_DIFF"),
  
  CUMULATIVE_PLANNED("CUMULATIVE_PLANNED"),
  
  CUMULATIVE_OBLIGATED("CUMULATIVE_OBLIGATED"),
  
  CUMULATIVE_PLANNED_OBLIGATED_DIFF("CUMULATIVE_PLANNED_OBLIGATED_DIFF"),
  
  FIELD("FIELD"),
  
  RANK("RANK");

  private String value;

  ColumnType(String value) {
    this.value = value;
  }

  public String getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  public static ColumnType fromValue(String text) {
    for (ColumnType b : ColumnType.values()) {
      if (String.valueOf(b.value).equals(text)) {
        return b;
      }
    }
    return null;
  }

  public static class Adapter extends TypeAdapter<ColumnType> {
    @Override
    public void write(final JsonWriter jsonWriter, final ColumnType enumeration) throws IOException {
      jsonWriter.value(enumeration.getValue());
    }

    @Override
    public ColumnType read(final JsonReader jsonReader) throws IOException {
      String value = jsonReader.nextString();
      return ColumnType.fromValue(String.valueOf(value));
    }
  }
}

