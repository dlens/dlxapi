/*
 * Decision Lens API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.decisionlens.client.api;

import com.decisionlens.client.ApiCallback;
import com.decisionlens.client.ApiClient;
import com.decisionlens.client.ApiException;
import com.decisionlens.client.ApiResponse;
import com.decisionlens.client.Configuration;
import com.decisionlens.client.Pair;
import com.decisionlens.client.ProgressRequestBody;
import com.decisionlens.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.decisionlens.client.model.Activities;
import com.decisionlens.client.model.AddAndDeleteFieldValuesForFieldsRequest;
import com.decisionlens.client.model.AddUsersRequest;
import com.decisionlens.client.model.BudgetAllocations;
import com.decisionlens.client.model.ErrorResponse;
import com.decisionlens.client.model.ExportConfig;
import com.decisionlens.client.model.FieldValue;
import com.decisionlens.client.model.FieldValuePatchItem;
import com.decisionlens.client.model.MinifiedProjects;
import com.decisionlens.client.model.Operations;
import com.decisionlens.client.model.PatchItem;
import com.decisionlens.client.model.PortfolioPlan;
import com.decisionlens.client.model.PortfolioPlanUser;
import com.decisionlens.client.model.PortfolioPlanUsers;
import com.decisionlens.client.model.PortfolioPlans;
import com.decisionlens.client.model.Project;
import com.decisionlens.client.model.Projects;
import com.decisionlens.client.model.Recommendation;
import com.decisionlens.client.model.Recommendations;
import com.decisionlens.client.model.ResourcePoolFieldValue;
import com.decisionlens.client.model.ResourcePoolFieldValuePatchItem;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PortfolioPlansApi {
    private ApiClient apiClient;

    public PortfolioPlansApi() {
        this(Configuration.getDefaultApiClient());
    }

    public PortfolioPlansApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for addAndDeleteFieldValuesForFields
     * @param portfolioPlanId Portfolio plan id (required)
     * @param projectId Project id (required)
     * @param body TimePeriods cost fields to add, cost fields to remove (required)
     * @param expand JSON string containing an array expand specifications for fields.  An expand specification must have a path and includes optional properties match, unique, allPossible, limit, offset, orderBy. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addAndDeleteFieldValuesForFieldsCall(Object portfolioPlanId, Object projectId, AddAndDeleteFieldValuesForFieldsRequest body, String expand, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/portfolioPlans/{portfolioPlanId}/project/{projectId}/addRemoveCosts"
            .replaceAll("\\{" + "portfolioPlanId" + "\\}", apiClient.escapeString(portfolioPlanId.toString()))
            .replaceAll("\\{" + "projectId" + "\\}", apiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (expand != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("expand", expand));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json-patch+json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return apiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addAndDeleteFieldValuesForFieldsValidateBeforeCall(Object portfolioPlanId, Object projectId, AddAndDeleteFieldValuesForFieldsRequest body, String expand, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'portfolioPlanId' is set
        if (portfolioPlanId == null) {
            throw new ApiException("Missing the required parameter 'portfolioPlanId' when calling addAndDeleteFieldValuesForFields(Async)");
        }
        
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling addAndDeleteFieldValuesForFields(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling addAndDeleteFieldValuesForFields(Async)");
        }
        

        com.squareup.okhttp.Call call = addAndDeleteFieldValuesForFieldsCall(portfolioPlanId, projectId, body, expand, progressListener, progressRequestListener);
        return call;

    }

    /**
     * add field values for the fields, and remove all field values for fields, for the supplied project
     * 
     * @param portfolioPlanId Portfolio plan id (required)
     * @param projectId Project id (required)
     * @param body TimePeriods cost fields to add, cost fields to remove (required)
     * @param expand JSON string containing an array expand specifications for fields.  An expand specification must have a path and includes optional properties match, unique, allPossible, limit, offset, orderBy. (optional)
     * @return List&lt;FieldValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<FieldValue> addAndDeleteFieldValuesForFields(Object portfolioPlanId, Object projectId, AddAndDeleteFieldValuesForFieldsRequest body, String expand) throws ApiException {
        ApiResponse<List<FieldValue>> resp = addAndDeleteFieldValuesForFieldsWithHttpInfo(portfolioPlanId, projectId, body, expand);
        return resp.getData();
    }

    /**
     * add field values for the fields, and remove all field values for fields, for the supplied project
     * 
     * @param portfolioPlanId Portfolio plan id (required)
     * @param projectId Project id (required)
     * @param body TimePeriods cost fields to add, cost fields to remove (required)
     * @param expand JSON string containing an array expand specifications for fields.  An expand specification must have a path and includes optional properties match, unique, allPossible, limit, offset, orderBy. (optional)
     * @return ApiResponse&lt;List&lt;FieldValue&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<FieldValue>> addAndDeleteFieldValuesForFieldsWithHttpInfo(Object portfolioPlanId, Object projectId, AddAndDeleteFieldValuesForFieldsRequest body, String expand) throws ApiException {
        com.squareup.okhttp.Call call = addAndDeleteFieldValuesForFieldsValidateBeforeCall(portfolioPlanId, projectId, body, expand, null, null);
        Type localVarReturnType = new TypeToken<List<FieldValue>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * add field values for the fields, and remove all field values for fields, for the supplied project (asynchronously)
     * 
     * @param portfolioPlanId Portfolio plan id (required)
     * @param projectId Project id (required)
     * @param body TimePeriods cost fields to add, cost fields to remove (required)
     * @param expand JSON string containing an array expand specifications for fields.  An expand specification must have a path and includes optional properties match, unique, allPossible, limit, offset, orderBy. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addAndDeleteFieldValuesForFieldsAsync(Object portfolioPlanId, Object projectId, AddAndDeleteFieldValuesForFieldsRequest body, String expand, final ApiCallback<List<FieldValue>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addAndDeleteFieldValuesForFieldsValidateBeforeCall(portfolioPlanId, projectId, body, expand, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<FieldValue>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for addPortfolioPlanUsers
     * @param id Portfolio plan id (required)
     * @param body Email ids and personal message (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addPortfolioPlanUsersCall(String id, AddUsersRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/portfolioPlans/{id}/users"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addPortfolioPlanUsersValidateBeforeCall(String id, AddUsersRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling addPortfolioPlanUsers(Async)");
        }
        

        com.squareup.okhttp.Call call = addPortfolioPlanUsersCall(id, body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Add users to a portfolio plan.
     * 
     * @param id Portfolio plan id (required)
     * @param body Email ids and personal message (optional)
     * @return List&lt;PortfolioPlanUser&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<PortfolioPlanUser> addPortfolioPlanUsers(String id, AddUsersRequest body) throws ApiException {
        ApiResponse<List<PortfolioPlanUser>> resp = addPortfolioPlanUsersWithHttpInfo(id, body);
        return resp.getData();
    }

    /**
     * Add users to a portfolio plan.
     * 
     * @param id Portfolio plan id (required)
     * @param body Email ids and personal message (optional)
     * @return ApiResponse&lt;List&lt;PortfolioPlanUser&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<PortfolioPlanUser>> addPortfolioPlanUsersWithHttpInfo(String id, AddUsersRequest body) throws ApiException {
        com.squareup.okhttp.Call call = addPortfolioPlanUsersValidateBeforeCall(id, body, null, null);
        Type localVarReturnType = new TypeToken<List<PortfolioPlanUser>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Add users to a portfolio plan. (asynchronously)
     * 
     * @param id Portfolio plan id (required)
     * @param body Email ids and personal message (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addPortfolioPlanUsersAsync(String id, AddUsersRequest body, final ApiCallback<List<PortfolioPlanUser>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addPortfolioPlanUsersValidateBeforeCall(id, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<PortfolioPlanUser>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for applyRecommendationsForPortfolioPlan
     * @param id Portfolio plan id (required)
     * @param body JSON Recommendation Objects to apply to a portfolio plan. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call applyRecommendationsForPortfolioPlanCall(String id, List<Recommendation> body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/portfolioPlans/{id}/recommendations"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call applyRecommendationsForPortfolioPlanValidateBeforeCall(String id, List<Recommendation> body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling applyRecommendationsForPortfolioPlan(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling applyRecommendationsForPortfolioPlan(Async)");
        }
        

        com.squareup.okhttp.Call call = applyRecommendationsForPortfolioPlanCall(id, body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Apply recommendations of a portfolio plan.
     * 
     * @param id Portfolio plan id (required)
     * @param body JSON Recommendation Objects to apply to a portfolio plan. (required)
     * @return List&lt;FieldValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<FieldValue> applyRecommendationsForPortfolioPlan(String id, List<Recommendation> body) throws ApiException {
        ApiResponse<List<FieldValue>> resp = applyRecommendationsForPortfolioPlanWithHttpInfo(id, body);
        return resp.getData();
    }

    /**
     * Apply recommendations of a portfolio plan.
     * 
     * @param id Portfolio plan id (required)
     * @param body JSON Recommendation Objects to apply to a portfolio plan. (required)
     * @return ApiResponse&lt;List&lt;FieldValue&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<FieldValue>> applyRecommendationsForPortfolioPlanWithHttpInfo(String id, List<Recommendation> body) throws ApiException {
        com.squareup.okhttp.Call call = applyRecommendationsForPortfolioPlanValidateBeforeCall(id, body, null, null);
        Type localVarReturnType = new TypeToken<List<FieldValue>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Apply recommendations of a portfolio plan. (asynchronously)
     * 
     * @param id Portfolio plan id (required)
     * @param body JSON Recommendation Objects to apply to a portfolio plan. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call applyRecommendationsForPortfolioPlanAsync(String id, List<Recommendation> body, final ApiCallback<List<FieldValue>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = applyRecommendationsForPortfolioPlanValidateBeforeCall(id, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<FieldValue>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createPortfolioPlan
     * @param body portfolio plan (required)
     * @param expand JSON string containing an array expand specifications for fields.  An expand specification must have a path and includes optional properties match, unique, allPossible, limit, offset, orderBy. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createPortfolioPlanCall(PortfolioPlan body, String expand, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/portfolioPlans";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (expand != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("expand", expand));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createPortfolioPlanValidateBeforeCall(PortfolioPlan body, String expand, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createPortfolioPlan(Async)");
        }
        

        com.squareup.okhttp.Call call = createPortfolioPlanCall(body, expand, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create a portfolio plan
     * 
     * @param body portfolio plan (required)
     * @param expand JSON string containing an array expand specifications for fields.  An expand specification must have a path and includes optional properties match, unique, allPossible, limit, offset, orderBy. (optional)
     * @return PortfolioPlan
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PortfolioPlan createPortfolioPlan(PortfolioPlan body, String expand) throws ApiException {
        ApiResponse<PortfolioPlan> resp = createPortfolioPlanWithHttpInfo(body, expand);
        return resp.getData();
    }

    /**
     * Create a portfolio plan
     * 
     * @param body portfolio plan (required)
     * @param expand JSON string containing an array expand specifications for fields.  An expand specification must have a path and includes optional properties match, unique, allPossible, limit, offset, orderBy. (optional)
     * @return ApiResponse&lt;PortfolioPlan&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PortfolioPlan> createPortfolioPlanWithHttpInfo(PortfolioPlan body, String expand) throws ApiException {
        com.squareup.okhttp.Call call = createPortfolioPlanValidateBeforeCall(body, expand, null, null);
        Type localVarReturnType = new TypeToken<PortfolioPlan>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a portfolio plan (asynchronously)
     * 
     * @param body portfolio plan (required)
     * @param expand JSON string containing an array expand specifications for fields.  An expand specification must have a path and includes optional properties match, unique, allPossible, limit, offset, orderBy. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createPortfolioPlanAsync(PortfolioPlan body, String expand, final ApiCallback<PortfolioPlan> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createPortfolioPlanValidateBeforeCall(body, expand, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PortfolioPlan>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createProjectsInPortfolioPlan
     * @param id Portfolio plan id (required)
     * @param body Projects to create (required)
     * @param doNotExpand Whether to return collections for each project in the response. Default is to return saved field values. (optional, default to false)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createProjectsInPortfolioPlanCall(String id, List<Project> body, Boolean doNotExpand, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/portfolioPlans/{id}/projects"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (doNotExpand != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("doNotExpand", doNotExpand));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createProjectsInPortfolioPlanValidateBeforeCall(String id, List<Project> body, Boolean doNotExpand, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling createProjectsInPortfolioPlan(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createProjectsInPortfolioPlan(Async)");
        }
        

        com.squareup.okhttp.Call call = createProjectsInPortfolioPlanCall(id, body, doNotExpand, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create new projects
     * 
     * @param id Portfolio plan id (required)
     * @param body Projects to create (required)
     * @param doNotExpand Whether to return collections for each project in the response. Default is to return saved field values. (optional, default to false)
     * @return List&lt;Project&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Project> createProjectsInPortfolioPlan(String id, List<Project> body, Boolean doNotExpand) throws ApiException {
        ApiResponse<List<Project>> resp = createProjectsInPortfolioPlanWithHttpInfo(id, body, doNotExpand);
        return resp.getData();
    }

    /**
     * Create new projects
     * 
     * @param id Portfolio plan id (required)
     * @param body Projects to create (required)
     * @param doNotExpand Whether to return collections for each project in the response. Default is to return saved field values. (optional, default to false)
     * @return ApiResponse&lt;List&lt;Project&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<Project>> createProjectsInPortfolioPlanWithHttpInfo(String id, List<Project> body, Boolean doNotExpand) throws ApiException {
        com.squareup.okhttp.Call call = createProjectsInPortfolioPlanValidateBeforeCall(id, body, doNotExpand, null, null);
        Type localVarReturnType = new TypeToken<List<Project>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create new projects (asynchronously)
     * 
     * @param id Portfolio plan id (required)
     * @param body Projects to create (required)
     * @param doNotExpand Whether to return collections for each project in the response. Default is to return saved field values. (optional, default to false)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createProjectsInPortfolioPlanAsync(String id, List<Project> body, Boolean doNotExpand, final ApiCallback<List<Project>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createProjectsInPortfolioPlanValidateBeforeCall(id, body, doNotExpand, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<Project>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deletePortfolioPlan
     * @param id portfolio plan id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deletePortfolioPlanCall(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/portfolioPlans/{id}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deletePortfolioPlanValidateBeforeCall(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deletePortfolioPlan(Async)");
        }
        

        com.squareup.okhttp.Call call = deletePortfolioPlanCall(id, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Deletes portfolio plan
     * 
     * @param id portfolio plan id (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deletePortfolioPlan(String id) throws ApiException {
        deletePortfolioPlanWithHttpInfo(id);
    }

    /**
     * Deletes portfolio plan
     * 
     * @param id portfolio plan id (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deletePortfolioPlanWithHttpInfo(String id) throws ApiException {
        com.squareup.okhttp.Call call = deletePortfolioPlanValidateBeforeCall(id, null, null);
        return apiClient.execute(call);
    }

    /**
     * Deletes portfolio plan (asynchronously)
     * 
     * @param id portfolio plan id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deletePortfolioPlanAsync(String id, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deletePortfolioPlanValidateBeforeCall(id, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for exportPortfolioPlan
     * @param id portfolio plan id (required)
     * @param exportType export type (PROJECT, SCHEDULE, SPEND_PLAN) (required)
     * @param exportFormat export format type (XLSX) (required)
     * @param exportConfig export configuration object (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call exportPortfolioPlanCall(String id, Object exportType, Object exportFormat, ExportConfig exportConfig, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = exportConfig;

        // create path and map variables
        String localVarPath = "/portfolioPlans/{id}/export"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (exportType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("exportType", exportType));
        if (exportFormat != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("exportFormat", exportFormat));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call exportPortfolioPlanValidateBeforeCall(String id, Object exportType, Object exportFormat, ExportConfig exportConfig, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling exportPortfolioPlan(Async)");
        }
        
        // verify the required parameter 'exportType' is set
        if (exportType == null) {
            throw new ApiException("Missing the required parameter 'exportType' when calling exportPortfolioPlan(Async)");
        }
        
        // verify the required parameter 'exportFormat' is set
        if (exportFormat == null) {
            throw new ApiException("Missing the required parameter 'exportFormat' when calling exportPortfolioPlan(Async)");
        }
        

        com.squareup.okhttp.Call call = exportPortfolioPlanCall(id, exportType, exportFormat, exportConfig, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Export portfolio plan
     * 
     * @param id portfolio plan id (required)
     * @param exportType export type (PROJECT, SCHEDULE, SPEND_PLAN) (required)
     * @param exportFormat export format type (XLSX) (required)
     * @param exportConfig export configuration object (optional)
     * @return byte[]
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public byte[] exportPortfolioPlan(String id, Object exportType, Object exportFormat, ExportConfig exportConfig) throws ApiException {
        ApiResponse<byte[]> resp = exportPortfolioPlanWithHttpInfo(id, exportType, exportFormat, exportConfig);
        return resp.getData();
    }

    /**
     * Export portfolio plan
     * 
     * @param id portfolio plan id (required)
     * @param exportType export type (PROJECT, SCHEDULE, SPEND_PLAN) (required)
     * @param exportFormat export format type (XLSX) (required)
     * @param exportConfig export configuration object (optional)
     * @return ApiResponse&lt;byte[]&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<byte[]> exportPortfolioPlanWithHttpInfo(String id, Object exportType, Object exportFormat, ExportConfig exportConfig) throws ApiException {
        com.squareup.okhttp.Call call = exportPortfolioPlanValidateBeforeCall(id, exportType, exportFormat, exportConfig, null, null);
        Type localVarReturnType = new TypeToken<byte[]>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Export portfolio plan (asynchronously)
     * 
     * @param id portfolio plan id (required)
     * @param exportType export type (PROJECT, SCHEDULE, SPEND_PLAN) (required)
     * @param exportFormat export format type (XLSX) (required)
     * @param exportConfig export configuration object (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call exportPortfolioPlanAsync(String id, Object exportType, Object exportFormat, ExportConfig exportConfig, final ApiCallback<byte[]> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = exportPortfolioPlanValidateBeforeCall(id, exportType, exportFormat, exportConfig, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<byte[]>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getBudgetAllocationsForPortfolioPlan
     * @param id Portfolio plan id (required)
     * @param startTime Start time for the requested data (optional)
     * @param endTime End time for the requested data (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getBudgetAllocationsForPortfolioPlanCall(String id, Long startTime, Long endTime, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/portfolioPlans/{id}/budgetAllocations"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (startTime != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("startTime", startTime));
        if (endTime != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("endTime", endTime));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getBudgetAllocationsForPortfolioPlanValidateBeforeCall(String id, Long startTime, Long endTime, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getBudgetAllocationsForPortfolioPlan(Async)");
        }
        

        com.squareup.okhttp.Call call = getBudgetAllocationsForPortfolioPlanCall(id, startTime, endTime, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieves budget allocations for a portfolio plan.
     * 
     * @param id Portfolio plan id (required)
     * @param startTime Start time for the requested data (optional)
     * @param endTime End time for the requested data (optional)
     * @return BudgetAllocations
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BudgetAllocations getBudgetAllocationsForPortfolioPlan(String id, Long startTime, Long endTime) throws ApiException {
        ApiResponse<BudgetAllocations> resp = getBudgetAllocationsForPortfolioPlanWithHttpInfo(id, startTime, endTime);
        return resp.getData();
    }

    /**
     * Retrieves budget allocations for a portfolio plan.
     * 
     * @param id Portfolio plan id (required)
     * @param startTime Start time for the requested data (optional)
     * @param endTime End time for the requested data (optional)
     * @return ApiResponse&lt;BudgetAllocations&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BudgetAllocations> getBudgetAllocationsForPortfolioPlanWithHttpInfo(String id, Long startTime, Long endTime) throws ApiException {
        com.squareup.okhttp.Call call = getBudgetAllocationsForPortfolioPlanValidateBeforeCall(id, startTime, endTime, null, null);
        Type localVarReturnType = new TypeToken<BudgetAllocations>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieves budget allocations for a portfolio plan. (asynchronously)
     * 
     * @param id Portfolio plan id (required)
     * @param startTime Start time for the requested data (optional)
     * @param endTime End time for the requested data (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getBudgetAllocationsForPortfolioPlanAsync(String id, Long startTime, Long endTime, final ApiCallback<BudgetAllocations> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getBudgetAllocationsForPortfolioPlanValidateBeforeCall(id, startTime, endTime, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BudgetAllocations>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getFieldValuesDataForPortfolioPlan
     * @param portfolioPlanId Portfolio plan ID (required)
     * @param dataId Data ID (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getFieldValuesDataForPortfolioPlanCall(String portfolioPlanId, String dataId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/portfolioPlans/{portfolioPlanId}/data/{dataId}"
            .replaceAll("\\{" + "portfolioPlanId" + "\\}", apiClient.escapeString(portfolioPlanId.toString()))
            .replaceAll("\\{" + "dataId" + "\\}", apiClient.escapeString(dataId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getFieldValuesDataForPortfolioPlanValidateBeforeCall(String portfolioPlanId, String dataId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'portfolioPlanId' is set
        if (portfolioPlanId == null) {
            throw new ApiException("Missing the required parameter 'portfolioPlanId' when calling getFieldValuesDataForPortfolioPlan(Async)");
        }
        
        // verify the required parameter 'dataId' is set
        if (dataId == null) {
            throw new ApiException("Missing the required parameter 'dataId' when calling getFieldValuesDataForPortfolioPlan(Async)");
        }
        

        com.squareup.okhttp.Call call = getFieldValuesDataForPortfolioPlanCall(portfolioPlanId, dataId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Fetch field values data for portfolio plan and data id.
     * 
     * @param portfolioPlanId Portfolio plan ID (required)
     * @param dataId Data ID (required)
     * @return List&lt;FieldValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<FieldValue> getFieldValuesDataForPortfolioPlan(String portfolioPlanId, String dataId) throws ApiException {
        ApiResponse<List<FieldValue>> resp = getFieldValuesDataForPortfolioPlanWithHttpInfo(portfolioPlanId, dataId);
        return resp.getData();
    }

    /**
     * Fetch field values data for portfolio plan and data id.
     * 
     * @param portfolioPlanId Portfolio plan ID (required)
     * @param dataId Data ID (required)
     * @return ApiResponse&lt;List&lt;FieldValue&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<FieldValue>> getFieldValuesDataForPortfolioPlanWithHttpInfo(String portfolioPlanId, String dataId) throws ApiException {
        com.squareup.okhttp.Call call = getFieldValuesDataForPortfolioPlanValidateBeforeCall(portfolioPlanId, dataId, null, null);
        Type localVarReturnType = new TypeToken<List<FieldValue>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Fetch field values data for portfolio plan and data id. (asynchronously)
     * 
     * @param portfolioPlanId Portfolio plan ID (required)
     * @param dataId Data ID (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getFieldValuesDataForPortfolioPlanAsync(String portfolioPlanId, String dataId, final ApiCallback<List<FieldValue>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getFieldValuesDataForPortfolioPlanValidateBeforeCall(portfolioPlanId, dataId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<FieldValue>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getMinifiedProjectsForPortfolioPlan
     * @param id Portfolio plan id (required)
     * @param expand JSON string containing an array expand specifications for fields.  An expand specification must have a path and includes optional properties match, unique, allPossible, limit, offset, orderBy. (optional)
     * @param limit Pagination limit (optional)
     * @param offset Pagination offset (optional)
     * @param orderBy Comma delimited list of order by expressions. Use &#39;-&#39; in front of expression for reverse order. (optional)
     * @param match Semi-colon delimited list of expressions to include in the response only the items in a collections that satisfy the expression(s). All other items should be exluded. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getMinifiedProjectsForPortfolioPlanCall(String id, String expand, Integer limit, Integer offset, String orderBy, String match, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/portfolioPlans/{id}/projects/minify"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (expand != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("expand", expand));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("offset", offset));
        if (orderBy != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("orderBy", orderBy));
        if (match != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("match", match));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getMinifiedProjectsForPortfolioPlanValidateBeforeCall(String id, String expand, Integer limit, Integer offset, String orderBy, String match, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getMinifiedProjectsForPortfolioPlan(Async)");
        }
        

        com.squareup.okhttp.Call call = getMinifiedProjectsForPortfolioPlanCall(id, expand, limit, offset, orderBy, match, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieves minified projects contained within a portfolio plan.
     * 
     * @param id Portfolio plan id (required)
     * @param expand JSON string containing an array expand specifications for fields.  An expand specification must have a path and includes optional properties match, unique, allPossible, limit, offset, orderBy. (optional)
     * @param limit Pagination limit (optional)
     * @param offset Pagination offset (optional)
     * @param orderBy Comma delimited list of order by expressions. Use &#39;-&#39; in front of expression for reverse order. (optional)
     * @param match Semi-colon delimited list of expressions to include in the response only the items in a collections that satisfy the expression(s). All other items should be exluded. (optional)
     * @return MinifiedProjects
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public MinifiedProjects getMinifiedProjectsForPortfolioPlan(String id, String expand, Integer limit, Integer offset, String orderBy, String match) throws ApiException {
        ApiResponse<MinifiedProjects> resp = getMinifiedProjectsForPortfolioPlanWithHttpInfo(id, expand, limit, offset, orderBy, match);
        return resp.getData();
    }

    /**
     * Retrieves minified projects contained within a portfolio plan.
     * 
     * @param id Portfolio plan id (required)
     * @param expand JSON string containing an array expand specifications for fields.  An expand specification must have a path and includes optional properties match, unique, allPossible, limit, offset, orderBy. (optional)
     * @param limit Pagination limit (optional)
     * @param offset Pagination offset (optional)
     * @param orderBy Comma delimited list of order by expressions. Use &#39;-&#39; in front of expression for reverse order. (optional)
     * @param match Semi-colon delimited list of expressions to include in the response only the items in a collections that satisfy the expression(s). All other items should be exluded. (optional)
     * @return ApiResponse&lt;MinifiedProjects&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<MinifiedProjects> getMinifiedProjectsForPortfolioPlanWithHttpInfo(String id, String expand, Integer limit, Integer offset, String orderBy, String match) throws ApiException {
        com.squareup.okhttp.Call call = getMinifiedProjectsForPortfolioPlanValidateBeforeCall(id, expand, limit, offset, orderBy, match, null, null);
        Type localVarReturnType = new TypeToken<MinifiedProjects>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieves minified projects contained within a portfolio plan. (asynchronously)
     * 
     * @param id Portfolio plan id (required)
     * @param expand JSON string containing an array expand specifications for fields.  An expand specification must have a path and includes optional properties match, unique, allPossible, limit, offset, orderBy. (optional)
     * @param limit Pagination limit (optional)
     * @param offset Pagination offset (optional)
     * @param orderBy Comma delimited list of order by expressions. Use &#39;-&#39; in front of expression for reverse order. (optional)
     * @param match Semi-colon delimited list of expressions to include in the response only the items in a collections that satisfy the expression(s). All other items should be exluded. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getMinifiedProjectsForPortfolioPlanAsync(String id, String expand, Integer limit, Integer offset, String orderBy, String match, final ApiCallback<MinifiedProjects> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getMinifiedProjectsForPortfolioPlanValidateBeforeCall(id, expand, limit, offset, orderBy, match, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<MinifiedProjects>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getPortfolioPlan
     * @param id portfolio plan id (required)
     * @param expand JSON string containing an array expand specifications for fields.  An expand specification must have a path and includes optional properties match, unique, allPossible, limit, offset, orderBy. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getPortfolioPlanCall(String id, String expand, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/portfolioPlans/{id}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (expand != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("expand", expand));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getPortfolioPlanValidateBeforeCall(String id, String expand, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getPortfolioPlan(Async)");
        }
        

        com.squareup.okhttp.Call call = getPortfolioPlanCall(id, expand, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieves portfolio plan
     * 
     * @param id portfolio plan id (required)
     * @param expand JSON string containing an array expand specifications for fields.  An expand specification must have a path and includes optional properties match, unique, allPossible, limit, offset, orderBy. (optional)
     * @return PortfolioPlan
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PortfolioPlan getPortfolioPlan(String id, String expand) throws ApiException {
        ApiResponse<PortfolioPlan> resp = getPortfolioPlanWithHttpInfo(id, expand);
        return resp.getData();
    }

    /**
     * Retrieves portfolio plan
     * 
     * @param id portfolio plan id (required)
     * @param expand JSON string containing an array expand specifications for fields.  An expand specification must have a path and includes optional properties match, unique, allPossible, limit, offset, orderBy. (optional)
     * @return ApiResponse&lt;PortfolioPlan&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PortfolioPlan> getPortfolioPlanWithHttpInfo(String id, String expand) throws ApiException {
        com.squareup.okhttp.Call call = getPortfolioPlanValidateBeforeCall(id, expand, null, null);
        Type localVarReturnType = new TypeToken<PortfolioPlan>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieves portfolio plan (asynchronously)
     * 
     * @param id portfolio plan id (required)
     * @param expand JSON string containing an array expand specifications for fields.  An expand specification must have a path and includes optional properties match, unique, allPossible, limit, offset, orderBy. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPortfolioPlanAsync(String id, String expand, final ApiCallback<PortfolioPlan> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPortfolioPlanValidateBeforeCall(id, expand, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PortfolioPlan>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getPortfolioPlanActivities
     * @param id Portfolio plan id (required)
     * @param projectId Use when you want to filter activities for a specific project (optional)
     * @param limit Pagination limit (optional)
     * @param offset Pagination offset (optional)
     * @param match Semi-colon delimited list of expressions to include in the response only the items in a collections that satisfy the expression(s). All other items should be exluded. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getPortfolioPlanActivitiesCall(String id, String projectId, Integer limit, Integer offset, String match, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/portfolioPlans/{id}/activities"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (projectId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("projectId", projectId));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("offset", offset));
        if (match != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("match", match));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getPortfolioPlanActivitiesValidateBeforeCall(String id, String projectId, Integer limit, Integer offset, String match, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getPortfolioPlanActivities(Async)");
        }
        

        com.squareup.okhttp.Call call = getPortfolioPlanActivitiesCall(id, projectId, limit, offset, match, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieves portfolio plan activities log.
     * 
     * @param id Portfolio plan id (required)
     * @param projectId Use when you want to filter activities for a specific project (optional)
     * @param limit Pagination limit (optional)
     * @param offset Pagination offset (optional)
     * @param match Semi-colon delimited list of expressions to include in the response only the items in a collections that satisfy the expression(s). All other items should be exluded. (optional)
     * @return Activities
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Activities getPortfolioPlanActivities(String id, String projectId, Integer limit, Integer offset, String match) throws ApiException {
        ApiResponse<Activities> resp = getPortfolioPlanActivitiesWithHttpInfo(id, projectId, limit, offset, match);
        return resp.getData();
    }

    /**
     * Retrieves portfolio plan activities log.
     * 
     * @param id Portfolio plan id (required)
     * @param projectId Use when you want to filter activities for a specific project (optional)
     * @param limit Pagination limit (optional)
     * @param offset Pagination offset (optional)
     * @param match Semi-colon delimited list of expressions to include in the response only the items in a collections that satisfy the expression(s). All other items should be exluded. (optional)
     * @return ApiResponse&lt;Activities&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Activities> getPortfolioPlanActivitiesWithHttpInfo(String id, String projectId, Integer limit, Integer offset, String match) throws ApiException {
        com.squareup.okhttp.Call call = getPortfolioPlanActivitiesValidateBeforeCall(id, projectId, limit, offset, match, null, null);
        Type localVarReturnType = new TypeToken<Activities>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieves portfolio plan activities log. (asynchronously)
     * 
     * @param id Portfolio plan id (required)
     * @param projectId Use when you want to filter activities for a specific project (optional)
     * @param limit Pagination limit (optional)
     * @param offset Pagination offset (optional)
     * @param match Semi-colon delimited list of expressions to include in the response only the items in a collections that satisfy the expression(s). All other items should be exluded. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPortfolioPlanActivitiesAsync(String id, String projectId, Integer limit, Integer offset, String match, final ApiCallback<Activities> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPortfolioPlanActivitiesValidateBeforeCall(id, projectId, limit, offset, match, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Activities>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getPortfolioPlanUsers
     * @param id Portfolio plan id (required)
     * @param limit Pagination limit (optional)
     * @param offset Pagination offset (optional)
     * @param orderBy Comma delimited list of order by expressions. Use &#39;-&#39; in front of expression for reverse order. (optional)
     * @param match Semi-colon delimited list of expressions to include in the response only the items in a collections that satisfy the expression(s). All other items should be exluded. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getPortfolioPlanUsersCall(String id, Integer limit, Integer offset, String orderBy, String match, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/portfolioPlans/{id}/users"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("offset", offset));
        if (orderBy != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("orderBy", orderBy));
        if (match != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("match", match));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getPortfolioPlanUsersValidateBeforeCall(String id, Integer limit, Integer offset, String orderBy, String match, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getPortfolioPlanUsers(Async)");
        }
        

        com.squareup.okhttp.Call call = getPortfolioPlanUsersCall(id, limit, offset, orderBy, match, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieves users in a portfolio plan.
     * 
     * @param id Portfolio plan id (required)
     * @param limit Pagination limit (optional)
     * @param offset Pagination offset (optional)
     * @param orderBy Comma delimited list of order by expressions. Use &#39;-&#39; in front of expression for reverse order. (optional)
     * @param match Semi-colon delimited list of expressions to include in the response only the items in a collections that satisfy the expression(s). All other items should be exluded. (optional)
     * @return PortfolioPlanUsers
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PortfolioPlanUsers getPortfolioPlanUsers(String id, Integer limit, Integer offset, String orderBy, String match) throws ApiException {
        ApiResponse<PortfolioPlanUsers> resp = getPortfolioPlanUsersWithHttpInfo(id, limit, offset, orderBy, match);
        return resp.getData();
    }

    /**
     * Retrieves users in a portfolio plan.
     * 
     * @param id Portfolio plan id (required)
     * @param limit Pagination limit (optional)
     * @param offset Pagination offset (optional)
     * @param orderBy Comma delimited list of order by expressions. Use &#39;-&#39; in front of expression for reverse order. (optional)
     * @param match Semi-colon delimited list of expressions to include in the response only the items in a collections that satisfy the expression(s). All other items should be exluded. (optional)
     * @return ApiResponse&lt;PortfolioPlanUsers&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PortfolioPlanUsers> getPortfolioPlanUsersWithHttpInfo(String id, Integer limit, Integer offset, String orderBy, String match) throws ApiException {
        com.squareup.okhttp.Call call = getPortfolioPlanUsersValidateBeforeCall(id, limit, offset, orderBy, match, null, null);
        Type localVarReturnType = new TypeToken<PortfolioPlanUsers>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieves users in a portfolio plan. (asynchronously)
     * 
     * @param id Portfolio plan id (required)
     * @param limit Pagination limit (optional)
     * @param offset Pagination offset (optional)
     * @param orderBy Comma delimited list of order by expressions. Use &#39;-&#39; in front of expression for reverse order. (optional)
     * @param match Semi-colon delimited list of expressions to include in the response only the items in a collections that satisfy the expression(s). All other items should be exluded. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPortfolioPlanUsersAsync(String id, Integer limit, Integer offset, String orderBy, String match, final ApiCallback<PortfolioPlanUsers> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPortfolioPlanUsersValidateBeforeCall(id, limit, offset, orderBy, match, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PortfolioPlanUsers>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getPortfolioPlans
     * @param portfolioId portfolio id (required)
     * @param expand JSON string containing an array expand specifications for fields.  An expand specification must have a path and includes optional properties match, unique, allPossible, limit, offset, orderBy. (optional)
     * @param limit Pagination limit (optional)
     * @param offset Pagination offset (optional)
     * @param orderBy Comma delimited list of order by expressions. Use &#39;-&#39; in front of expression for reverse order. (optional)
     * @param match Semi-colon delimited list of expressions to include in the response only the items in a collections that satisfy the expression(s). All other items should be exluded. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getPortfolioPlansCall(String portfolioId, String expand, Integer limit, Integer offset, String orderBy, String match, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/portfolioPlans";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (portfolioId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("portfolioId", portfolioId));
        if (expand != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("expand", expand));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("offset", offset));
        if (orderBy != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("orderBy", orderBy));
        if (match != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("match", match));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getPortfolioPlansValidateBeforeCall(String portfolioId, String expand, Integer limit, Integer offset, String orderBy, String match, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'portfolioId' is set
        if (portfolioId == null) {
            throw new ApiException("Missing the required parameter 'portfolioId' when calling getPortfolioPlans(Async)");
        }
        

        com.squareup.okhttp.Call call = getPortfolioPlansCall(portfolioId, expand, limit, offset, orderBy, match, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieves portfolio plans
     * 
     * @param portfolioId portfolio id (required)
     * @param expand JSON string containing an array expand specifications for fields.  An expand specification must have a path and includes optional properties match, unique, allPossible, limit, offset, orderBy. (optional)
     * @param limit Pagination limit (optional)
     * @param offset Pagination offset (optional)
     * @param orderBy Comma delimited list of order by expressions. Use &#39;-&#39; in front of expression for reverse order. (optional)
     * @param match Semi-colon delimited list of expressions to include in the response only the items in a collections that satisfy the expression(s). All other items should be exluded. (optional)
     * @return PortfolioPlans
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PortfolioPlans getPortfolioPlans(String portfolioId, String expand, Integer limit, Integer offset, String orderBy, String match) throws ApiException {
        ApiResponse<PortfolioPlans> resp = getPortfolioPlansWithHttpInfo(portfolioId, expand, limit, offset, orderBy, match);
        return resp.getData();
    }

    /**
     * Retrieves portfolio plans
     * 
     * @param portfolioId portfolio id (required)
     * @param expand JSON string containing an array expand specifications for fields.  An expand specification must have a path and includes optional properties match, unique, allPossible, limit, offset, orderBy. (optional)
     * @param limit Pagination limit (optional)
     * @param offset Pagination offset (optional)
     * @param orderBy Comma delimited list of order by expressions. Use &#39;-&#39; in front of expression for reverse order. (optional)
     * @param match Semi-colon delimited list of expressions to include in the response only the items in a collections that satisfy the expression(s). All other items should be exluded. (optional)
     * @return ApiResponse&lt;PortfolioPlans&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PortfolioPlans> getPortfolioPlansWithHttpInfo(String portfolioId, String expand, Integer limit, Integer offset, String orderBy, String match) throws ApiException {
        com.squareup.okhttp.Call call = getPortfolioPlansValidateBeforeCall(portfolioId, expand, limit, offset, orderBy, match, null, null);
        Type localVarReturnType = new TypeToken<PortfolioPlans>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieves portfolio plans (asynchronously)
     * 
     * @param portfolioId portfolio id (required)
     * @param expand JSON string containing an array expand specifications for fields.  An expand specification must have a path and includes optional properties match, unique, allPossible, limit, offset, orderBy. (optional)
     * @param limit Pagination limit (optional)
     * @param offset Pagination offset (optional)
     * @param orderBy Comma delimited list of order by expressions. Use &#39;-&#39; in front of expression for reverse order. (optional)
     * @param match Semi-colon delimited list of expressions to include in the response only the items in a collections that satisfy the expression(s). All other items should be exluded. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPortfolioPlansAsync(String portfolioId, String expand, Integer limit, Integer offset, String orderBy, String match, final ApiCallback<PortfolioPlans> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPortfolioPlansValidateBeforeCall(portfolioId, expand, limit, offset, orderBy, match, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PortfolioPlans>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getProjectForPortfolioPlan
     * @param portfolioPlanId Portfolio plan id (required)
     * @param projectId project id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getProjectForPortfolioPlanCall(String portfolioPlanId, String projectId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/portfolioPlans/{portfolioPlanId}/projects/{projectId}"
            .replaceAll("\\{" + "portfolioPlanId" + "\\}", apiClient.escapeString(portfolioPlanId.toString()))
            .replaceAll("\\{" + "projectId" + "\\}", apiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getProjectForPortfolioPlanValidateBeforeCall(String portfolioPlanId, String projectId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'portfolioPlanId' is set
        if (portfolioPlanId == null) {
            throw new ApiException("Missing the required parameter 'portfolioPlanId' when calling getProjectForPortfolioPlan(Async)");
        }
        
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling getProjectForPortfolioPlan(Async)");
        }
        

        com.squareup.okhttp.Call call = getProjectForPortfolioPlanCall(portfolioPlanId, projectId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieves project contained within a portfolio plan.
     * 
     * @param portfolioPlanId Portfolio plan id (required)
     * @param projectId project id (required)
     * @return Project
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Project getProjectForPortfolioPlan(String portfolioPlanId, String projectId) throws ApiException {
        ApiResponse<Project> resp = getProjectForPortfolioPlanWithHttpInfo(portfolioPlanId, projectId);
        return resp.getData();
    }

    /**
     * Retrieves project contained within a portfolio plan.
     * 
     * @param portfolioPlanId Portfolio plan id (required)
     * @param projectId project id (required)
     * @return ApiResponse&lt;Project&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Project> getProjectForPortfolioPlanWithHttpInfo(String portfolioPlanId, String projectId) throws ApiException {
        com.squareup.okhttp.Call call = getProjectForPortfolioPlanValidateBeforeCall(portfolioPlanId, projectId, null, null);
        Type localVarReturnType = new TypeToken<Project>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieves project contained within a portfolio plan. (asynchronously)
     * 
     * @param portfolioPlanId Portfolio plan id (required)
     * @param projectId project id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getProjectForPortfolioPlanAsync(String portfolioPlanId, String projectId, final ApiCallback<Project> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getProjectForPortfolioPlanValidateBeforeCall(portfolioPlanId, projectId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Project>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getProjectPortfolioPlansForPortfolioPlanAndPortfolio
     * @param portfolioId Portfolio id (required)
     * @param portfolioPlanId Portfolio Plan id (required)
     * @param positionFrom positionFrom for projects (required)
     * @param positionTo positionTo for projects (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getProjectPortfolioPlansForPortfolioPlanAndPortfolioCall(String portfolioId, String portfolioPlanId, Integer positionFrom, Integer positionTo, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/portfolioPlans/{portfolioPlanId}/portfolios/{portfolioId}/projectPortfolioPlans"
            .replaceAll("\\{" + "portfolioId" + "\\}", apiClient.escapeString(portfolioId.toString()))
            .replaceAll("\\{" + "portfolioPlanId" + "\\}", apiClient.escapeString(portfolioPlanId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (positionFrom != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("positionFrom", positionFrom));
        if (positionTo != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("positionTo", positionTo));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getProjectPortfolioPlansForPortfolioPlanAndPortfolioValidateBeforeCall(String portfolioId, String portfolioPlanId, Integer positionFrom, Integer positionTo, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'portfolioId' is set
        if (portfolioId == null) {
            throw new ApiException("Missing the required parameter 'portfolioId' when calling getProjectPortfolioPlansForPortfolioPlanAndPortfolio(Async)");
        }
        
        // verify the required parameter 'portfolioPlanId' is set
        if (portfolioPlanId == null) {
            throw new ApiException("Missing the required parameter 'portfolioPlanId' when calling getProjectPortfolioPlansForPortfolioPlanAndPortfolio(Async)");
        }
        
        // verify the required parameter 'positionFrom' is set
        if (positionFrom == null) {
            throw new ApiException("Missing the required parameter 'positionFrom' when calling getProjectPortfolioPlansForPortfolioPlanAndPortfolio(Async)");
        }
        
        // verify the required parameter 'positionTo' is set
        if (positionTo == null) {
            throw new ApiException("Missing the required parameter 'positionTo' when calling getProjectPortfolioPlansForPortfolioPlanAndPortfolio(Async)");
        }
        

        com.squareup.okhttp.Call call = getProjectPortfolioPlansForPortfolioPlanAndPortfolioCall(portfolioId, portfolioPlanId, positionFrom, positionTo, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieves projects for portfolio plan
     * 
     * @param portfolioId Portfolio id (required)
     * @param portfolioPlanId Portfolio Plan id (required)
     * @param positionFrom positionFrom for projects (required)
     * @param positionTo positionTo for projects (required)
     * @return Projects
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Projects getProjectPortfolioPlansForPortfolioPlanAndPortfolio(String portfolioId, String portfolioPlanId, Integer positionFrom, Integer positionTo) throws ApiException {
        ApiResponse<Projects> resp = getProjectPortfolioPlansForPortfolioPlanAndPortfolioWithHttpInfo(portfolioId, portfolioPlanId, positionFrom, positionTo);
        return resp.getData();
    }

    /**
     * Retrieves projects for portfolio plan
     * 
     * @param portfolioId Portfolio id (required)
     * @param portfolioPlanId Portfolio Plan id (required)
     * @param positionFrom positionFrom for projects (required)
     * @param positionTo positionTo for projects (required)
     * @return ApiResponse&lt;Projects&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Projects> getProjectPortfolioPlansForPortfolioPlanAndPortfolioWithHttpInfo(String portfolioId, String portfolioPlanId, Integer positionFrom, Integer positionTo) throws ApiException {
        com.squareup.okhttp.Call call = getProjectPortfolioPlansForPortfolioPlanAndPortfolioValidateBeforeCall(portfolioId, portfolioPlanId, positionFrom, positionTo, null, null);
        Type localVarReturnType = new TypeToken<Projects>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieves projects for portfolio plan (asynchronously)
     * 
     * @param portfolioId Portfolio id (required)
     * @param portfolioPlanId Portfolio Plan id (required)
     * @param positionFrom positionFrom for projects (required)
     * @param positionTo positionTo for projects (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getProjectPortfolioPlansForPortfolioPlanAndPortfolioAsync(String portfolioId, String portfolioPlanId, Integer positionFrom, Integer positionTo, final ApiCallback<Projects> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getProjectPortfolioPlansForPortfolioPlanAndPortfolioValidateBeforeCall(portfolioId, portfolioPlanId, positionFrom, positionTo, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Projects>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getProjectsForPortfolioPlan
     * @param id Portfolio plan id (required)
     * @param expand JSON string containing an array expand specifications for fields.  An expand specification must have a path and includes optional properties match, unique, allPossible, limit, offset, orderBy. (optional)
     * @param limit Pagination limit (optional)
     * @param offset Pagination offset (optional)
     * @param orderBy Comma delimited list of order by expressions. Use &#39;-&#39; in front of expression for reverse order. (optional)
     * @param match Semi-colon delimited list of expressions to include in the response only the items in a collections that satisfy the expression(s). All other items should be exluded. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getProjectsForPortfolioPlanCall(String id, String expand, Integer limit, Integer offset, String orderBy, String match, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/portfolioPlans/{id}/projects"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (expand != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("expand", expand));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("offset", offset));
        if (orderBy != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("orderBy", orderBy));
        if (match != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("match", match));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getProjectsForPortfolioPlanValidateBeforeCall(String id, String expand, Integer limit, Integer offset, String orderBy, String match, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getProjectsForPortfolioPlan(Async)");
        }
        

        com.squareup.okhttp.Call call = getProjectsForPortfolioPlanCall(id, expand, limit, offset, orderBy, match, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieves projects contained within a portfolio plan. Possible expand paths - (items.fieldValues, contributingUserIds)
     * 
     * @param id Portfolio plan id (required)
     * @param expand JSON string containing an array expand specifications for fields.  An expand specification must have a path and includes optional properties match, unique, allPossible, limit, offset, orderBy. (optional)
     * @param limit Pagination limit (optional)
     * @param offset Pagination offset (optional)
     * @param orderBy Comma delimited list of order by expressions. Use &#39;-&#39; in front of expression for reverse order. (optional)
     * @param match Semi-colon delimited list of expressions to include in the response only the items in a collections that satisfy the expression(s). All other items should be exluded. (optional)
     * @return Projects
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Projects getProjectsForPortfolioPlan(String id, String expand, Integer limit, Integer offset, String orderBy, String match) throws ApiException {
        ApiResponse<Projects> resp = getProjectsForPortfolioPlanWithHttpInfo(id, expand, limit, offset, orderBy, match);
        return resp.getData();
    }

    /**
     * Retrieves projects contained within a portfolio plan. Possible expand paths - (items.fieldValues, contributingUserIds)
     * 
     * @param id Portfolio plan id (required)
     * @param expand JSON string containing an array expand specifications for fields.  An expand specification must have a path and includes optional properties match, unique, allPossible, limit, offset, orderBy. (optional)
     * @param limit Pagination limit (optional)
     * @param offset Pagination offset (optional)
     * @param orderBy Comma delimited list of order by expressions. Use &#39;-&#39; in front of expression for reverse order. (optional)
     * @param match Semi-colon delimited list of expressions to include in the response only the items in a collections that satisfy the expression(s). All other items should be exluded. (optional)
     * @return ApiResponse&lt;Projects&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Projects> getProjectsForPortfolioPlanWithHttpInfo(String id, String expand, Integer limit, Integer offset, String orderBy, String match) throws ApiException {
        com.squareup.okhttp.Call call = getProjectsForPortfolioPlanValidateBeforeCall(id, expand, limit, offset, orderBy, match, null, null);
        Type localVarReturnType = new TypeToken<Projects>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieves projects contained within a portfolio plan. Possible expand paths - (items.fieldValues, contributingUserIds) (asynchronously)
     * 
     * @param id Portfolio plan id (required)
     * @param expand JSON string containing an array expand specifications for fields.  An expand specification must have a path and includes optional properties match, unique, allPossible, limit, offset, orderBy. (optional)
     * @param limit Pagination limit (optional)
     * @param offset Pagination offset (optional)
     * @param orderBy Comma delimited list of order by expressions. Use &#39;-&#39; in front of expression for reverse order. (optional)
     * @param match Semi-colon delimited list of expressions to include in the response only the items in a collections that satisfy the expression(s). All other items should be exluded. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getProjectsForPortfolioPlanAsync(String id, String expand, Integer limit, Integer offset, String orderBy, String match, final ApiCallback<Projects> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getProjectsForPortfolioPlanValidateBeforeCall(id, expand, limit, offset, orderBy, match, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Projects>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getRecommendationsForPortfolioPlan
     * @param id Portfolio plan id (required)
     * @param startDate Start time period for the time horizon. (optional)
     * @param endDate End time period for the time horizon. (optional)
     * @param planType Plan type (optional, default to OVERALL)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getRecommendationsForPortfolioPlanCall(String id, Long startDate, Long endDate, Object planType, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/portfolioPlans/{id}/recommendations"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (startDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("startDate", startDate));
        if (endDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("endDate", endDate));
        if (planType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("planType", planType));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getRecommendationsForPortfolioPlanValidateBeforeCall(String id, Long startDate, Long endDate, Object planType, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getRecommendationsForPortfolioPlan(Async)");
        }
        

        com.squareup.okhttp.Call call = getRecommendationsForPortfolioPlanCall(id, startDate, endDate, planType, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieves recommendations for a portfolio plan.
     * 
     * @param id Portfolio plan id (required)
     * @param startDate Start time period for the time horizon. (optional)
     * @param endDate End time period for the time horizon. (optional)
     * @param planType Plan type (optional, default to OVERALL)
     * @return Recommendations
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Recommendations getRecommendationsForPortfolioPlan(String id, Long startDate, Long endDate, Object planType) throws ApiException {
        ApiResponse<Recommendations> resp = getRecommendationsForPortfolioPlanWithHttpInfo(id, startDate, endDate, planType);
        return resp.getData();
    }

    /**
     * Retrieves recommendations for a portfolio plan.
     * 
     * @param id Portfolio plan id (required)
     * @param startDate Start time period for the time horizon. (optional)
     * @param endDate End time period for the time horizon. (optional)
     * @param planType Plan type (optional, default to OVERALL)
     * @return ApiResponse&lt;Recommendations&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Recommendations> getRecommendationsForPortfolioPlanWithHttpInfo(String id, Long startDate, Long endDate, Object planType) throws ApiException {
        com.squareup.okhttp.Call call = getRecommendationsForPortfolioPlanValidateBeforeCall(id, startDate, endDate, planType, null, null);
        Type localVarReturnType = new TypeToken<Recommendations>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieves recommendations for a portfolio plan. (asynchronously)
     * 
     * @param id Portfolio plan id (required)
     * @param startDate Start time period for the time horizon. (optional)
     * @param endDate End time period for the time horizon. (optional)
     * @param planType Plan type (optional, default to OVERALL)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getRecommendationsForPortfolioPlanAsync(String id, Long startDate, Long endDate, Object planType, final ApiCallback<Recommendations> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getRecommendationsForPortfolioPlanValidateBeforeCall(id, startDate, endDate, planType, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Recommendations>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getScheduleForPortfolioPlan
     * @param id Portfolio Plan id (required)
     * @param startDate Start time period for the time horizon. (optional)
     * @param endDate End time period for the time horizon. (optional)
     * @param toleranceLevelPercentage Percentage parameter to allow scheduling values within a deviation, defined by [target*(1 - tolerance), target*(1 + tolerance] bounds. Value should be between 0 and 1. Defaults to 0.1 (optional)
     * @param schedulingCriteria Criteria used to function to evaluate different schedules. Defaults to TimePeriodOverBudgetPercent (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getScheduleForPortfolioPlanCall(String id, Long startDate, Long endDate, Double toleranceLevelPercentage, Object schedulingCriteria, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/portfolioPlans/{id}/schedule"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (startDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("startDate", startDate));
        if (endDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("endDate", endDate));
        if (toleranceLevelPercentage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("toleranceLevelPercentage", toleranceLevelPercentage));
        if (schedulingCriteria != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("schedulingCriteria", schedulingCriteria));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getScheduleForPortfolioPlanValidateBeforeCall(String id, Long startDate, Long endDate, Double toleranceLevelPercentage, Object schedulingCriteria, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getScheduleForPortfolioPlan(Async)");
        }
        

        com.squareup.okhttp.Call call = getScheduleForPortfolioPlanCall(id, startDate, endDate, toleranceLevelPercentage, schedulingCriteria, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieves schedule for portfolio plan. The schedule is stored in a new portfolio plan.
     * 
     * @param id Portfolio Plan id (required)
     * @param startDate Start time period for the time horizon. (optional)
     * @param endDate End time period for the time horizon. (optional)
     * @param toleranceLevelPercentage Percentage parameter to allow scheduling values within a deviation, defined by [target*(1 - tolerance), target*(1 + tolerance] bounds. Value should be between 0 and 1. Defaults to 0.1 (optional)
     * @param schedulingCriteria Criteria used to function to evaluate different schedules. Defaults to TimePeriodOverBudgetPercent (optional)
     * @return Recommendations
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Recommendations getScheduleForPortfolioPlan(String id, Long startDate, Long endDate, Double toleranceLevelPercentage, Object schedulingCriteria) throws ApiException {
        ApiResponse<Recommendations> resp = getScheduleForPortfolioPlanWithHttpInfo(id, startDate, endDate, toleranceLevelPercentage, schedulingCriteria);
        return resp.getData();
    }

    /**
     * Retrieves schedule for portfolio plan. The schedule is stored in a new portfolio plan.
     * 
     * @param id Portfolio Plan id (required)
     * @param startDate Start time period for the time horizon. (optional)
     * @param endDate End time period for the time horizon. (optional)
     * @param toleranceLevelPercentage Percentage parameter to allow scheduling values within a deviation, defined by [target*(1 - tolerance), target*(1 + tolerance] bounds. Value should be between 0 and 1. Defaults to 0.1 (optional)
     * @param schedulingCriteria Criteria used to function to evaluate different schedules. Defaults to TimePeriodOverBudgetPercent (optional)
     * @return ApiResponse&lt;Recommendations&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Recommendations> getScheduleForPortfolioPlanWithHttpInfo(String id, Long startDate, Long endDate, Double toleranceLevelPercentage, Object schedulingCriteria) throws ApiException {
        com.squareup.okhttp.Call call = getScheduleForPortfolioPlanValidateBeforeCall(id, startDate, endDate, toleranceLevelPercentage, schedulingCriteria, null, null);
        Type localVarReturnType = new TypeToken<Recommendations>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieves schedule for portfolio plan. The schedule is stored in a new portfolio plan. (asynchronously)
     * 
     * @param id Portfolio Plan id (required)
     * @param startDate Start time period for the time horizon. (optional)
     * @param endDate End time period for the time horizon. (optional)
     * @param toleranceLevelPercentage Percentage parameter to allow scheduling values within a deviation, defined by [target*(1 - tolerance), target*(1 + tolerance] bounds. Value should be between 0 and 1. Defaults to 0.1 (optional)
     * @param schedulingCriteria Criteria used to function to evaluate different schedules. Defaults to TimePeriodOverBudgetPercent (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getScheduleForPortfolioPlanAsync(String id, Long startDate, Long endDate, Double toleranceLevelPercentage, Object schedulingCriteria, final ApiCallback<Recommendations> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getScheduleForPortfolioPlanValidateBeforeCall(id, startDate, endDate, toleranceLevelPercentage, schedulingCriteria, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Recommendations>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for rebaselinePortfolioPlan
     * @param id Portfolio plan id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call rebaselinePortfolioPlanCall(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/portfolioPlans/{id}/rebaseline"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call rebaselinePortfolioPlanValidateBeforeCall(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling rebaselinePortfolioPlan(Async)");
        }
        

        com.squareup.okhttp.Call call = rebaselinePortfolioPlanCall(id, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Rebaseline a portfolio plan.
     * 
     * @param id Portfolio plan id (required)
     * @return PortfolioPlan
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PortfolioPlan rebaselinePortfolioPlan(String id) throws ApiException {
        ApiResponse<PortfolioPlan> resp = rebaselinePortfolioPlanWithHttpInfo(id);
        return resp.getData();
    }

    /**
     * Rebaseline a portfolio plan.
     * 
     * @param id Portfolio plan id (required)
     * @return ApiResponse&lt;PortfolioPlan&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PortfolioPlan> rebaselinePortfolioPlanWithHttpInfo(String id) throws ApiException {
        com.squareup.okhttp.Call call = rebaselinePortfolioPlanValidateBeforeCall(id, null, null);
        Type localVarReturnType = new TypeToken<PortfolioPlan>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Rebaseline a portfolio plan. (asynchronously)
     * 
     * @param id Portfolio plan id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call rebaselinePortfolioPlanAsync(String id, final ApiCallback<PortfolioPlan> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = rebaselinePortfolioPlanValidateBeforeCall(id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PortfolioPlan>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updatePortfolioPlan
     * @param id PortfolioPlan id (required)
     * @param body JSON Patch Operations to update portfolio plan. (required)
     * @param expand JSON string containing an array expand specifications for fields.  An expand specification must have a path and includes optional properties match, unique, allPossible, limit, offset, orderBy. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updatePortfolioPlanCall(String id, Operations body, String expand, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/portfolioPlans/{id}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (expand != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("expand", expand));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json-patch+json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return apiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updatePortfolioPlanValidateBeforeCall(String id, Operations body, String expand, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updatePortfolioPlan(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updatePortfolioPlan(Async)");
        }
        

        com.squareup.okhttp.Call call = updatePortfolioPlanCall(id, body, expand, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Updates a portfolio plan utilizing JSON Patch Operations. 
     * 
     * @param id PortfolioPlan id (required)
     * @param body JSON Patch Operations to update portfolio plan. (required)
     * @param expand JSON string containing an array expand specifications for fields.  An expand specification must have a path and includes optional properties match, unique, allPossible, limit, offset, orderBy. (optional)
     * @return PortfolioPlan
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PortfolioPlan updatePortfolioPlan(String id, Operations body, String expand) throws ApiException {
        ApiResponse<PortfolioPlan> resp = updatePortfolioPlanWithHttpInfo(id, body, expand);
        return resp.getData();
    }

    /**
     * Updates a portfolio plan utilizing JSON Patch Operations. 
     * 
     * @param id PortfolioPlan id (required)
     * @param body JSON Patch Operations to update portfolio plan. (required)
     * @param expand JSON string containing an array expand specifications for fields.  An expand specification must have a path and includes optional properties match, unique, allPossible, limit, offset, orderBy. (optional)
     * @return ApiResponse&lt;PortfolioPlan&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PortfolioPlan> updatePortfolioPlanWithHttpInfo(String id, Operations body, String expand) throws ApiException {
        com.squareup.okhttp.Call call = updatePortfolioPlanValidateBeforeCall(id, body, expand, null, null);
        Type localVarReturnType = new TypeToken<PortfolioPlan>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Updates a portfolio plan utilizing JSON Patch Operations.  (asynchronously)
     * 
     * @param id PortfolioPlan id (required)
     * @param body JSON Patch Operations to update portfolio plan. (required)
     * @param expand JSON string containing an array expand specifications for fields.  An expand specification must have a path and includes optional properties match, unique, allPossible, limit, offset, orderBy. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updatePortfolioPlanAsync(String id, Operations body, String expand, final ApiCallback<PortfolioPlan> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updatePortfolioPlanValidateBeforeCall(id, body, expand, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PortfolioPlan>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updatePortfolioPlanBudgetFieldValues
     * @param id Portfolio plan id (required)
     * @param body JSON Patch Operations to update multiple field values. (required)
     * @param expand JSON string containing an array expand specifications for fields.  An expand specification must have a path and includes optional properties match, unique, allPossible, limit, offset, orderBy. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updatePortfolioPlanBudgetFieldValuesCall(Object id, List<ResourcePoolFieldValuePatchItem> body, String expand, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/portfolioPlans/{id}/fieldValues/budgets"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (expand != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("expand", expand));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json-patch+json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return apiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updatePortfolioPlanBudgetFieldValuesValidateBeforeCall(Object id, List<ResourcePoolFieldValuePatchItem> body, String expand, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updatePortfolioPlanBudgetFieldValues(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updatePortfolioPlanBudgetFieldValues(Async)");
        }
        

        com.squareup.okhttp.Call call = updatePortfolioPlanBudgetFieldValuesCall(id, body, expand, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update field values in a portfolio plan
     * 
     * @param id Portfolio plan id (required)
     * @param body JSON Patch Operations to update multiple field values. (required)
     * @param expand JSON string containing an array expand specifications for fields.  An expand specification must have a path and includes optional properties match, unique, allPossible, limit, offset, orderBy. (optional)
     * @return List&lt;ResourcePoolFieldValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<ResourcePoolFieldValue> updatePortfolioPlanBudgetFieldValues(Object id, List<ResourcePoolFieldValuePatchItem> body, String expand) throws ApiException {
        ApiResponse<List<ResourcePoolFieldValue>> resp = updatePortfolioPlanBudgetFieldValuesWithHttpInfo(id, body, expand);
        return resp.getData();
    }

    /**
     * Update field values in a portfolio plan
     * 
     * @param id Portfolio plan id (required)
     * @param body JSON Patch Operations to update multiple field values. (required)
     * @param expand JSON string containing an array expand specifications for fields.  An expand specification must have a path and includes optional properties match, unique, allPossible, limit, offset, orderBy. (optional)
     * @return ApiResponse&lt;List&lt;ResourcePoolFieldValue&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<ResourcePoolFieldValue>> updatePortfolioPlanBudgetFieldValuesWithHttpInfo(Object id, List<ResourcePoolFieldValuePatchItem> body, String expand) throws ApiException {
        com.squareup.okhttp.Call call = updatePortfolioPlanBudgetFieldValuesValidateBeforeCall(id, body, expand, null, null);
        Type localVarReturnType = new TypeToken<List<ResourcePoolFieldValue>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update field values in a portfolio plan (asynchronously)
     * 
     * @param id Portfolio plan id (required)
     * @param body JSON Patch Operations to update multiple field values. (required)
     * @param expand JSON string containing an array expand specifications for fields.  An expand specification must have a path and includes optional properties match, unique, allPossible, limit, offset, orderBy. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updatePortfolioPlanBudgetFieldValuesAsync(Object id, List<ResourcePoolFieldValuePatchItem> body, String expand, final ApiCallback<List<ResourcePoolFieldValue>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updatePortfolioPlanBudgetFieldValuesValidateBeforeCall(id, body, expand, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<ResourcePoolFieldValue>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updatePortfolioPlanFieldValues
     * @param id Portfolio plan id (required)
     * @param body JSON Patch Operations to update multiple field values. (required)
     * @param applyRank Whether the update signifies an Apply Rank action. (optional)
     * @param preserveProjectAccess Making sure projects access is retained in case that the current change would affect permissions (optional)
     * @param expand JSON string containing an array expand specifications for fields.  An expand specification must have a path and includes optional properties match, unique, allPossible, limit, offset, orderBy. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updatePortfolioPlanFieldValuesCall(Object id, List<FieldValuePatchItem> body, Boolean applyRank, Boolean preserveProjectAccess, String expand, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/portfolioPlans/{id}/fieldValues"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (applyRank != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("applyRank", applyRank));
        if (preserveProjectAccess != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("preserveProjectAccess", preserveProjectAccess));
        if (expand != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("expand", expand));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json-patch+json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return apiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updatePortfolioPlanFieldValuesValidateBeforeCall(Object id, List<FieldValuePatchItem> body, Boolean applyRank, Boolean preserveProjectAccess, String expand, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updatePortfolioPlanFieldValues(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updatePortfolioPlanFieldValues(Async)");
        }
        

        com.squareup.okhttp.Call call = updatePortfolioPlanFieldValuesCall(id, body, applyRank, preserveProjectAccess, expand, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update field values in a portfolio plan
     * 
     * @param id Portfolio plan id (required)
     * @param body JSON Patch Operations to update multiple field values. (required)
     * @param applyRank Whether the update signifies an Apply Rank action. (optional)
     * @param preserveProjectAccess Making sure projects access is retained in case that the current change would affect permissions (optional)
     * @param expand JSON string containing an array expand specifications for fields.  An expand specification must have a path and includes optional properties match, unique, allPossible, limit, offset, orderBy. (optional)
     * @return List&lt;FieldValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<FieldValue> updatePortfolioPlanFieldValues(Object id, List<FieldValuePatchItem> body, Boolean applyRank, Boolean preserveProjectAccess, String expand) throws ApiException {
        ApiResponse<List<FieldValue>> resp = updatePortfolioPlanFieldValuesWithHttpInfo(id, body, applyRank, preserveProjectAccess, expand);
        return resp.getData();
    }

    /**
     * Update field values in a portfolio plan
     * 
     * @param id Portfolio plan id (required)
     * @param body JSON Patch Operations to update multiple field values. (required)
     * @param applyRank Whether the update signifies an Apply Rank action. (optional)
     * @param preserveProjectAccess Making sure projects access is retained in case that the current change would affect permissions (optional)
     * @param expand JSON string containing an array expand specifications for fields.  An expand specification must have a path and includes optional properties match, unique, allPossible, limit, offset, orderBy. (optional)
     * @return ApiResponse&lt;List&lt;FieldValue&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<FieldValue>> updatePortfolioPlanFieldValuesWithHttpInfo(Object id, List<FieldValuePatchItem> body, Boolean applyRank, Boolean preserveProjectAccess, String expand) throws ApiException {
        com.squareup.okhttp.Call call = updatePortfolioPlanFieldValuesValidateBeforeCall(id, body, applyRank, preserveProjectAccess, expand, null, null);
        Type localVarReturnType = new TypeToken<List<FieldValue>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update field values in a portfolio plan (asynchronously)
     * 
     * @param id Portfolio plan id (required)
     * @param body JSON Patch Operations to update multiple field values. (required)
     * @param applyRank Whether the update signifies an Apply Rank action. (optional)
     * @param preserveProjectAccess Making sure projects access is retained in case that the current change would affect permissions (optional)
     * @param expand JSON string containing an array expand specifications for fields.  An expand specification must have a path and includes optional properties match, unique, allPossible, limit, offset, orderBy. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updatePortfolioPlanFieldValuesAsync(Object id, List<FieldValuePatchItem> body, Boolean applyRank, Boolean preserveProjectAccess, String expand, final ApiCallback<List<FieldValue>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updatePortfolioPlanFieldValuesValidateBeforeCall(id, body, applyRank, preserveProjectAccess, expand, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<FieldValue>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updatePortfolioPlanUsers
     * @param id Portfolio plan id (required)
     * @param body JSON Patch Operations to update multiple portfolio plan users. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updatePortfolioPlanUsersCall(Object id, List<PatchItem> body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/portfolioPlans/{id}/users"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json-patch+json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return apiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updatePortfolioPlanUsersValidateBeforeCall(Object id, List<PatchItem> body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updatePortfolioPlanUsers(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updatePortfolioPlanUsers(Async)");
        }
        

        com.squareup.okhttp.Call call = updatePortfolioPlanUsersCall(id, body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update users in a portfolio plan
     * 
     * @param id Portfolio plan id (required)
     * @param body JSON Patch Operations to update multiple portfolio plan users. (required)
     * @return List&lt;PortfolioPlanUser&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<PortfolioPlanUser> updatePortfolioPlanUsers(Object id, List<PatchItem> body) throws ApiException {
        ApiResponse<List<PortfolioPlanUser>> resp = updatePortfolioPlanUsersWithHttpInfo(id, body);
        return resp.getData();
    }

    /**
     * Update users in a portfolio plan
     * 
     * @param id Portfolio plan id (required)
     * @param body JSON Patch Operations to update multiple portfolio plan users. (required)
     * @return ApiResponse&lt;List&lt;PortfolioPlanUser&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<PortfolioPlanUser>> updatePortfolioPlanUsersWithHttpInfo(Object id, List<PatchItem> body) throws ApiException {
        com.squareup.okhttp.Call call = updatePortfolioPlanUsersValidateBeforeCall(id, body, null, null);
        Type localVarReturnType = new TypeToken<List<PortfolioPlanUser>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update users in a portfolio plan (asynchronously)
     * 
     * @param id Portfolio plan id (required)
     * @param body JSON Patch Operations to update multiple portfolio plan users. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updatePortfolioPlanUsersAsync(Object id, List<PatchItem> body, final ApiCallback<List<PortfolioPlanUser>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updatePortfolioPlanUsersValidateBeforeCall(id, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<PortfolioPlanUser>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
