/*
 * Decision Lens API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.decisionlens.client.api;

import com.decisionlens.client.ApiCallback;
import com.decisionlens.client.ApiClient;
import com.decisionlens.client.ApiException;
import com.decisionlens.client.ApiResponse;
import com.decisionlens.client.Configuration;
import com.decisionlens.client.Pair;
import com.decisionlens.client.ProgressRequestBody;
import com.decisionlens.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.decisionlens.client.model.ErrorResponse;
import java.io.File;
import com.decisionlens.client.model.Mapping;
import com.decisionlens.client.model.Mappings;
import com.decisionlens.client.model.Operations;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class MappingsApi {
    private ApiClient apiClient;

    public MappingsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public MappingsApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for spreadsheetToMappings
     * @param file maybe put supported file types here? (required)
     * @param columnsOnly return columns only the case for cost import (optional, default to true)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call spreadsheetToMappingsCall(File file, Boolean columnsOnly, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/mappings/spreadsheet";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (columnsOnly != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("columnsOnly", columnsOnly));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (file != null)
        localVarFormParams.put("file", file);

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call spreadsheetToMappingsValidateBeforeCall(File file, Boolean columnsOnly, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'file' is set
        if (file == null) {
            throw new ApiException("Missing the required parameter 'file' when calling spreadsheetToMappings(Async)");
        }
        

        com.squareup.okhttp.Call call = spreadsheetToMappingsCall(file, columnsOnly, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Accepts upload of spreadsheet and converts data into mappings.
     * Maps the fields in the spreadsheet to appropriate buckets
     * @param file maybe put supported file types here? (required)
     * @param columnsOnly return columns only the case for cost import (optional, default to true)
     * @return Mappings
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Mappings spreadsheetToMappings(File file, Boolean columnsOnly) throws ApiException {
        ApiResponse<Mappings> resp = spreadsheetToMappingsWithHttpInfo(file, columnsOnly);
        return resp.getData();
    }

    /**
     * Accepts upload of spreadsheet and converts data into mappings.
     * Maps the fields in the spreadsheet to appropriate buckets
     * @param file maybe put supported file types here? (required)
     * @param columnsOnly return columns only the case for cost import (optional, default to true)
     * @return ApiResponse&lt;Mappings&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Mappings> spreadsheetToMappingsWithHttpInfo(File file, Boolean columnsOnly) throws ApiException {
        com.squareup.okhttp.Call call = spreadsheetToMappingsValidateBeforeCall(file, columnsOnly, null, null);
        Type localVarReturnType = new TypeToken<Mappings>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Accepts upload of spreadsheet and converts data into mappings. (asynchronously)
     * Maps the fields in the spreadsheet to appropriate buckets
     * @param file maybe put supported file types here? (required)
     * @param columnsOnly return columns only the case for cost import (optional, default to true)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call spreadsheetToMappingsAsync(File file, Boolean columnsOnly, final ApiCallback<Mappings> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = spreadsheetToMappingsValidateBeforeCall(file, columnsOnly, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Mappings>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateMapping
     * @param id Mapping id (required)
     * @param body JSON Patch Operations to update mapping. (required)
     * @param expand JSON string containing an array expand specifications for fields.  An expand specification must have a path and includes optional properties match, unique, allPossible, limit, offset, orderBy. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateMappingCall(String id, Operations body, String expand, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/mappings/{id}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (expand != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("expand", expand));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json-patch+json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return apiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateMappingValidateBeforeCall(String id, Operations body, String expand, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateMapping(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateMapping(Async)");
        }
        

        com.squareup.okhttp.Call call = updateMappingCall(id, body, expand, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update mapping
     * 
     * @param id Mapping id (required)
     * @param body JSON Patch Operations to update mapping. (required)
     * @param expand JSON string containing an array expand specifications for fields.  An expand specification must have a path and includes optional properties match, unique, allPossible, limit, offset, orderBy. (optional)
     * @return List&lt;Mapping&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Mapping> updateMapping(String id, Operations body, String expand) throws ApiException {
        ApiResponse<List<Mapping>> resp = updateMappingWithHttpInfo(id, body, expand);
        return resp.getData();
    }

    /**
     * Update mapping
     * 
     * @param id Mapping id (required)
     * @param body JSON Patch Operations to update mapping. (required)
     * @param expand JSON string containing an array expand specifications for fields.  An expand specification must have a path and includes optional properties match, unique, allPossible, limit, offset, orderBy. (optional)
     * @return ApiResponse&lt;List&lt;Mapping&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<Mapping>> updateMappingWithHttpInfo(String id, Operations body, String expand) throws ApiException {
        com.squareup.okhttp.Call call = updateMappingValidateBeforeCall(id, body, expand, null, null);
        Type localVarReturnType = new TypeToken<List<Mapping>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update mapping (asynchronously)
     * 
     * @param id Mapping id (required)
     * @param body JSON Patch Operations to update mapping. (required)
     * @param expand JSON string containing an array expand specifications for fields.  An expand specification must have a path and includes optional properties match, unique, allPossible, limit, offset, orderBy. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateMappingAsync(String id, Operations body, String expand, final ApiCallback<List<Mapping>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateMappingValidateBeforeCall(id, body, expand, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<Mapping>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
