/*
 * Decision Lens API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.decisionlens.client.api;

import com.decisionlens.client.ApiCallback;
import com.decisionlens.client.ApiClient;
import com.decisionlens.client.ApiException;
import com.decisionlens.client.ApiResponse;
import com.decisionlens.client.Configuration;
import com.decisionlens.client.Pair;
import com.decisionlens.client.ProgressRequestBody;
import com.decisionlens.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.decisionlens.client.model.ErrorResponse;
import com.decisionlens.client.model.PortfolioPlanGrades;
import com.decisionlens.client.model.PortfolioPlanInsights;
import com.decisionlens.client.model.WhatsIn;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PlansApi {
    private ApiClient apiClient;

    public PlansApi() {
        this(Configuration.getDefaultApiClient());
    }

    public PlansApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for exportWhatsIn
     * @param portfolioId portfolioId (required)
     * @param portfolioPlanIds portfolioPlanIds to be exported (required)
     * @param exportFormat export format type (XLSX) (required)
     * @param startDate Start time period for which the grades are computed for. (required)
     * @param endDate End time period for which the grades are computed for. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call exportWhatsInCall(String portfolioId, String portfolioPlanIds, Object exportFormat, Long startDate, Long endDate, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/portfolioPlans/whatsin/export";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (portfolioId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("portfolioId", portfolioId));
        if (portfolioPlanIds != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("portfolioPlanIds", portfolioPlanIds));
        if (exportFormat != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("exportFormat", exportFormat));
        if (startDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("startDate", startDate));
        if (endDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("endDate", endDate));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call exportWhatsInValidateBeforeCall(String portfolioId, String portfolioPlanIds, Object exportFormat, Long startDate, Long endDate, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'portfolioId' is set
        if (portfolioId == null) {
            throw new ApiException("Missing the required parameter 'portfolioId' when calling exportWhatsIn(Async)");
        }
        
        // verify the required parameter 'portfolioPlanIds' is set
        if (portfolioPlanIds == null) {
            throw new ApiException("Missing the required parameter 'portfolioPlanIds' when calling exportWhatsIn(Async)");
        }
        
        // verify the required parameter 'exportFormat' is set
        if (exportFormat == null) {
            throw new ApiException("Missing the required parameter 'exportFormat' when calling exportWhatsIn(Async)");
        }
        
        // verify the required parameter 'startDate' is set
        if (startDate == null) {
            throw new ApiException("Missing the required parameter 'startDate' when calling exportWhatsIn(Async)");
        }
        
        // verify the required parameter 'endDate' is set
        if (endDate == null) {
            throw new ApiException("Missing the required parameter 'endDate' when calling exportWhatsIn(Async)");
        }
        

        com.squareup.okhttp.Call call = exportWhatsInCall(portfolioId, portfolioPlanIds, exportFormat, startDate, endDate, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Export Whats In Comparison
     * 
     * @param portfolioId portfolioId (required)
     * @param portfolioPlanIds portfolioPlanIds to be exported (required)
     * @param exportFormat export format type (XLSX) (required)
     * @param startDate Start time period for which the grades are computed for. (required)
     * @param endDate End time period for which the grades are computed for. (required)
     * @return byte[]
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public byte[] exportWhatsIn(String portfolioId, String portfolioPlanIds, Object exportFormat, Long startDate, Long endDate) throws ApiException {
        ApiResponse<byte[]> resp = exportWhatsInWithHttpInfo(portfolioId, portfolioPlanIds, exportFormat, startDate, endDate);
        return resp.getData();
    }

    /**
     * Export Whats In Comparison
     * 
     * @param portfolioId portfolioId (required)
     * @param portfolioPlanIds portfolioPlanIds to be exported (required)
     * @param exportFormat export format type (XLSX) (required)
     * @param startDate Start time period for which the grades are computed for. (required)
     * @param endDate End time period for which the grades are computed for. (required)
     * @return ApiResponse&lt;byte[]&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<byte[]> exportWhatsInWithHttpInfo(String portfolioId, String portfolioPlanIds, Object exportFormat, Long startDate, Long endDate) throws ApiException {
        com.squareup.okhttp.Call call = exportWhatsInValidateBeforeCall(portfolioId, portfolioPlanIds, exportFormat, startDate, endDate, null, null);
        Type localVarReturnType = new TypeToken<byte[]>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Export Whats In Comparison (asynchronously)
     * 
     * @param portfolioId portfolioId (required)
     * @param portfolioPlanIds portfolioPlanIds to be exported (required)
     * @param exportFormat export format type (XLSX) (required)
     * @param startDate Start time period for which the grades are computed for. (required)
     * @param endDate End time period for which the grades are computed for. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call exportWhatsInAsync(String portfolioId, String portfolioPlanIds, Object exportFormat, Long startDate, Long endDate, final ApiCallback<byte[]> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = exportWhatsInValidateBeforeCall(portfolioId, portfolioPlanIds, exportFormat, startDate, endDate, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<byte[]>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getGradesForPortfolioPlan
     * @param id Portfolio Plan id (required)
     * @param startDate Start time period for which the grades are computed for. (optional)
     * @param endDate End time period for which the grades are computed for. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getGradesForPortfolioPlanCall(String id, Long startDate, Long endDate, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/portfolioPlans/{id}/grades"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (startDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("startDate", startDate));
        if (endDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("endDate", endDate));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getGradesForPortfolioPlanValidateBeforeCall(String id, Long startDate, Long endDate, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getGradesForPortfolioPlan(Async)");
        }
        

        com.squareup.okhttp.Call call = getGradesForPortfolioPlanCall(id, startDate, endDate, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieves grades for portfolio plan.
     * 
     * @param id Portfolio Plan id (required)
     * @param startDate Start time period for which the grades are computed for. (optional)
     * @param endDate End time period for which the grades are computed for. (optional)
     * @return PortfolioPlanGrades
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PortfolioPlanGrades getGradesForPortfolioPlan(String id, Long startDate, Long endDate) throws ApiException {
        ApiResponse<PortfolioPlanGrades> resp = getGradesForPortfolioPlanWithHttpInfo(id, startDate, endDate);
        return resp.getData();
    }

    /**
     * Retrieves grades for portfolio plan.
     * 
     * @param id Portfolio Plan id (required)
     * @param startDate Start time period for which the grades are computed for. (optional)
     * @param endDate End time period for which the grades are computed for. (optional)
     * @return ApiResponse&lt;PortfolioPlanGrades&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PortfolioPlanGrades> getGradesForPortfolioPlanWithHttpInfo(String id, Long startDate, Long endDate) throws ApiException {
        com.squareup.okhttp.Call call = getGradesForPortfolioPlanValidateBeforeCall(id, startDate, endDate, null, null);
        Type localVarReturnType = new TypeToken<PortfolioPlanGrades>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieves grades for portfolio plan. (asynchronously)
     * 
     * @param id Portfolio Plan id (required)
     * @param startDate Start time period for which the grades are computed for. (optional)
     * @param endDate End time period for which the grades are computed for. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getGradesForPortfolioPlanAsync(String id, Long startDate, Long endDate, final ApiCallback<PortfolioPlanGrades> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getGradesForPortfolioPlanValidateBeforeCall(id, startDate, endDate, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PortfolioPlanGrades>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getInsightsForPortfolioPlan
     * @param id Portfolio Plan id (required)
     * @param startDate Start time period for which the grades are computed for. (required)
     * @param endDate End time period for which the grades are computed for. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getInsightsForPortfolioPlanCall(String id, Long startDate, Long endDate, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/portfolioPlans/{id}/insights"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (startDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("startDate", startDate));
        if (endDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("endDate", endDate));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getInsightsForPortfolioPlanValidateBeforeCall(String id, Long startDate, Long endDate, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getInsightsForPortfolioPlan(Async)");
        }
        
        // verify the required parameter 'startDate' is set
        if (startDate == null) {
            throw new ApiException("Missing the required parameter 'startDate' when calling getInsightsForPortfolioPlan(Async)");
        }
        
        // verify the required parameter 'endDate' is set
        if (endDate == null) {
            throw new ApiException("Missing the required parameter 'endDate' when calling getInsightsForPortfolioPlan(Async)");
        }
        

        com.squareup.okhttp.Call call = getInsightsForPortfolioPlanCall(id, startDate, endDate, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieves insights for portfolio plan.
     * 
     * @param id Portfolio Plan id (required)
     * @param startDate Start time period for which the grades are computed for. (required)
     * @param endDate End time period for which the grades are computed for. (required)
     * @return PortfolioPlanInsights
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PortfolioPlanInsights getInsightsForPortfolioPlan(String id, Long startDate, Long endDate) throws ApiException {
        ApiResponse<PortfolioPlanInsights> resp = getInsightsForPortfolioPlanWithHttpInfo(id, startDate, endDate);
        return resp.getData();
    }

    /**
     * Retrieves insights for portfolio plan.
     * 
     * @param id Portfolio Plan id (required)
     * @param startDate Start time period for which the grades are computed for. (required)
     * @param endDate End time period for which the grades are computed for. (required)
     * @return ApiResponse&lt;PortfolioPlanInsights&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PortfolioPlanInsights> getInsightsForPortfolioPlanWithHttpInfo(String id, Long startDate, Long endDate) throws ApiException {
        com.squareup.okhttp.Call call = getInsightsForPortfolioPlanValidateBeforeCall(id, startDate, endDate, null, null);
        Type localVarReturnType = new TypeToken<PortfolioPlanInsights>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieves insights for portfolio plan. (asynchronously)
     * 
     * @param id Portfolio Plan id (required)
     * @param startDate Start time period for which the grades are computed for. (required)
     * @param endDate End time period for which the grades are computed for. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getInsightsForPortfolioPlanAsync(String id, Long startDate, Long endDate, final ApiCallback<PortfolioPlanInsights> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getInsightsForPortfolioPlanValidateBeforeCall(id, startDate, endDate, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PortfolioPlanInsights>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getWhatsIn
     * @param portfolioId portfolioId (required)
     * @param portfolioPlanIds portfolioPlanIds for which projects are returned (required)
     * @param startDate Start time period for which the grades are computed for. (required)
     * @param endDate End time period for which the grades are computed for. (required)
     * @param maxLimit Maximum limit for project; 0 &lt; number of returned project(is variable, NOT fixed) &lt; maxLimit (required)
     * @param offset Pagination offset (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getWhatsInCall(String portfolioId, String portfolioPlanIds, Long startDate, Long endDate, Integer maxLimit, Integer offset, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/portfolioPlans/whatsin";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (portfolioId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("portfolioId", portfolioId));
        if (portfolioPlanIds != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("portfolioPlanIds", portfolioPlanIds));
        if (startDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("startDate", startDate));
        if (endDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("endDate", endDate));
        if (maxLimit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("maxLimit", maxLimit));
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("offset", offset));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getWhatsInValidateBeforeCall(String portfolioId, String portfolioPlanIds, Long startDate, Long endDate, Integer maxLimit, Integer offset, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'portfolioId' is set
        if (portfolioId == null) {
            throw new ApiException("Missing the required parameter 'portfolioId' when calling getWhatsIn(Async)");
        }
        
        // verify the required parameter 'portfolioPlanIds' is set
        if (portfolioPlanIds == null) {
            throw new ApiException("Missing the required parameter 'portfolioPlanIds' when calling getWhatsIn(Async)");
        }
        
        // verify the required parameter 'startDate' is set
        if (startDate == null) {
            throw new ApiException("Missing the required parameter 'startDate' when calling getWhatsIn(Async)");
        }
        
        // verify the required parameter 'endDate' is set
        if (endDate == null) {
            throw new ApiException("Missing the required parameter 'endDate' when calling getWhatsIn(Async)");
        }
        
        // verify the required parameter 'maxLimit' is set
        if (maxLimit == null) {
            throw new ApiException("Missing the required parameter 'maxLimit' when calling getWhatsIn(Async)");
        }
        

        com.squareup.okhttp.Call call = getWhatsInCall(portfolioId, portfolioPlanIds, startDate, endDate, maxLimit, offset, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieves portfolioPlans with projects for WhatsIn
     * 
     * @param portfolioId portfolioId (required)
     * @param portfolioPlanIds portfolioPlanIds for which projects are returned (required)
     * @param startDate Start time period for which the grades are computed for. (required)
     * @param endDate End time period for which the grades are computed for. (required)
     * @param maxLimit Maximum limit for project; 0 &lt; number of returned project(is variable, NOT fixed) &lt; maxLimit (required)
     * @param offset Pagination offset (optional)
     * @return WhatsIn
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public WhatsIn getWhatsIn(String portfolioId, String portfolioPlanIds, Long startDate, Long endDate, Integer maxLimit, Integer offset) throws ApiException {
        ApiResponse<WhatsIn> resp = getWhatsInWithHttpInfo(portfolioId, portfolioPlanIds, startDate, endDate, maxLimit, offset);
        return resp.getData();
    }

    /**
     * Retrieves portfolioPlans with projects for WhatsIn
     * 
     * @param portfolioId portfolioId (required)
     * @param portfolioPlanIds portfolioPlanIds for which projects are returned (required)
     * @param startDate Start time period for which the grades are computed for. (required)
     * @param endDate End time period for which the grades are computed for. (required)
     * @param maxLimit Maximum limit for project; 0 &lt; number of returned project(is variable, NOT fixed) &lt; maxLimit (required)
     * @param offset Pagination offset (optional)
     * @return ApiResponse&lt;WhatsIn&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<WhatsIn> getWhatsInWithHttpInfo(String portfolioId, String portfolioPlanIds, Long startDate, Long endDate, Integer maxLimit, Integer offset) throws ApiException {
        com.squareup.okhttp.Call call = getWhatsInValidateBeforeCall(portfolioId, portfolioPlanIds, startDate, endDate, maxLimit, offset, null, null);
        Type localVarReturnType = new TypeToken<WhatsIn>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieves portfolioPlans with projects for WhatsIn (asynchronously)
     * 
     * @param portfolioId portfolioId (required)
     * @param portfolioPlanIds portfolioPlanIds for which projects are returned (required)
     * @param startDate Start time period for which the grades are computed for. (required)
     * @param endDate End time period for which the grades are computed for. (required)
     * @param maxLimit Maximum limit for project; 0 &lt; number of returned project(is variable, NOT fixed) &lt; maxLimit (required)
     * @param offset Pagination offset (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getWhatsInAsync(String portfolioId, String portfolioPlanIds, Long startDate, Long endDate, Integer maxLimit, Integer offset, final ApiCallback<WhatsIn> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getWhatsInValidateBeforeCall(portfolioId, portfolioPlanIds, startDate, endDate, maxLimit, offset, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<WhatsIn>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
