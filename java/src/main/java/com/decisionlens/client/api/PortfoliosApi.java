/*
 * Decision Lens API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.decisionlens.client.api;

import com.decisionlens.client.ApiCallback;
import com.decisionlens.client.ApiClient;
import com.decisionlens.client.ApiException;
import com.decisionlens.client.ApiResponse;
import com.decisionlens.client.Configuration;
import com.decisionlens.client.Pair;
import com.decisionlens.client.ProgressRequestBody;
import com.decisionlens.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.decisionlens.client.model.Activities;
import com.decisionlens.client.model.CustomName;
import com.decisionlens.client.model.ErrorResponse;
import com.decisionlens.client.model.FieldValue;
import com.decisionlens.client.model.FieldValuePatchItem;
import java.io.File;
import com.decisionlens.client.model.Operations;
import com.decisionlens.client.model.Portfolio;
import com.decisionlens.client.model.Portfolios;
import com.decisionlens.client.model.Projects;
import com.decisionlens.client.model.ResourcePool;
import com.decisionlens.client.model.ResourcePoolBudgetAmountPatchItem;
import com.decisionlens.client.model.ResourcePools;
import com.decisionlens.client.model.Source;
import com.decisionlens.client.model.SpreadsheetReport;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PortfoliosApi {
    private ApiClient apiClient;

    public PortfoliosApi() {
        this(Configuration.getDefaultApiClient());
    }

    public PortfoliosApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for archivePortfolio
     * @param id Portfolio id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call archivePortfolioCall(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/portfolios/{id}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call archivePortfolioValidateBeforeCall(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling archivePortfolio(Async)");
        }
        

        com.squareup.okhttp.Call call = archivePortfolioCall(id, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Archive a portfolio.
     * 
     * @param id Portfolio id (required)
     * @return Portfolio
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Portfolio archivePortfolio(String id) throws ApiException {
        ApiResponse<Portfolio> resp = archivePortfolioWithHttpInfo(id);
        return resp.getData();
    }

    /**
     * Archive a portfolio.
     * 
     * @param id Portfolio id (required)
     * @return ApiResponse&lt;Portfolio&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Portfolio> archivePortfolioWithHttpInfo(String id) throws ApiException {
        com.squareup.okhttp.Call call = archivePortfolioValidateBeforeCall(id, null, null);
        Type localVarReturnType = new TypeToken<Portfolio>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Archive a portfolio. (asynchronously)
     * 
     * @param id Portfolio id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call archivePortfolioAsync(String id, final ApiCallback<Portfolio> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = archivePortfolioValidateBeforeCall(id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Portfolio>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for createPortfolio
     * @param body Portfolio to create (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createPortfolioCall(Portfolio body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/portfolios";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createPortfolioValidateBeforeCall(Portfolio body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createPortfolio(Async)");
        }
        

        com.squareup.okhttp.Call call = createPortfolioCall(body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Creates a new portfolio.
     * 
     * @param body Portfolio to create (required)
     * @return Portfolio
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Portfolio createPortfolio(Portfolio body) throws ApiException {
        ApiResponse<Portfolio> resp = createPortfolioWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * Creates a new portfolio.
     * 
     * @param body Portfolio to create (required)
     * @return ApiResponse&lt;Portfolio&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Portfolio> createPortfolioWithHttpInfo(Portfolio body) throws ApiException {
        com.squareup.okhttp.Call call = createPortfolioValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<Portfolio>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Creates a new portfolio. (asynchronously)
     * 
     * @param body Portfolio to create (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createPortfolioAsync(Portfolio body, final ApiCallback<Portfolio> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createPortfolioValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Portfolio>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for downloadSpreadsheetTemplate
     * @param portfolioId Portfolio id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call downloadSpreadsheetTemplateCall(String portfolioId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/portfolios/{portfolioId}/spreadsheet/template"
            .replaceAll("\\{" + "portfolioId" + "\\}", apiClient.escapeString(portfolioId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call downloadSpreadsheetTemplateValidateBeforeCall(String portfolioId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'portfolioId' is set
        if (portfolioId == null) {
            throw new ApiException("Missing the required parameter 'portfolioId' when calling downloadSpreadsheetTemplate(Async)");
        }
        

        com.squareup.okhttp.Call call = downloadSpreadsheetTemplateCall(portfolioId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Download spreadsheet template for portfolio
     * 
     * @param portfolioId Portfolio id (required)
     * @return byte[]
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public byte[] downloadSpreadsheetTemplate(String portfolioId) throws ApiException {
        ApiResponse<byte[]> resp = downloadSpreadsheetTemplateWithHttpInfo(portfolioId);
        return resp.getData();
    }

    /**
     * Download spreadsheet template for portfolio
     * 
     * @param portfolioId Portfolio id (required)
     * @return ApiResponse&lt;byte[]&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<byte[]> downloadSpreadsheetTemplateWithHttpInfo(String portfolioId) throws ApiException {
        com.squareup.okhttp.Call call = downloadSpreadsheetTemplateValidateBeforeCall(portfolioId, null, null);
        Type localVarReturnType = new TypeToken<byte[]>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Download spreadsheet template for portfolio (asynchronously)
     * 
     * @param portfolioId Portfolio id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call downloadSpreadsheetTemplateAsync(String portfolioId, final ApiCallback<byte[]> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = downloadSpreadsheetTemplateValidateBeforeCall(portfolioId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<byte[]>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for exportPortfolioData
     * @param id Portfolio id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call exportPortfolioDataCall(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/portfolios/{id}/pod"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call exportPortfolioDataValidateBeforeCall(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling exportPortfolioData(Async)");
        }
        

        com.squareup.okhttp.Call call = exportPortfolioDataCall(id, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Export portfolio data in JSON format
     * 
     * @param id Portfolio id (required)
     * @return byte[]
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public byte[] exportPortfolioData(String id) throws ApiException {
        ApiResponse<byte[]> resp = exportPortfolioDataWithHttpInfo(id);
        return resp.getData();
    }

    /**
     * Export portfolio data in JSON format
     * 
     * @param id Portfolio id (required)
     * @return ApiResponse&lt;byte[]&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<byte[]> exportPortfolioDataWithHttpInfo(String id) throws ApiException {
        com.squareup.okhttp.Call call = exportPortfolioDataValidateBeforeCall(id, null, null);
        Type localVarReturnType = new TypeToken<byte[]>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Export portfolio data in JSON format (asynchronously)
     * 
     * @param id Portfolio id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call exportPortfolioDataAsync(String id, final ApiCallback<byte[]> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = exportPortfolioDataValidateBeforeCall(id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<byte[]>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getPortfolio
     * @param id Portfolio id (required)
     * @param expand JSON string containing an array expand specifications for fields.  An expand specification must have a path and includes optional properties match, unique, allPossible, limit, offset, orderBy. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getPortfolioCall(String id, String expand, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/portfolios/{id}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (expand != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("expand", expand));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getPortfolioValidateBeforeCall(String id, String expand, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getPortfolio(Async)");
        }
        

        com.squareup.okhttp.Call call = getPortfolioCall(id, expand, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieves a portfolio.
     * 
     * @param id Portfolio id (required)
     * @param expand JSON string containing an array expand specifications for fields.  An expand specification must have a path and includes optional properties match, unique, allPossible, limit, offset, orderBy. (optional)
     * @return Portfolio
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Portfolio getPortfolio(String id, String expand) throws ApiException {
        ApiResponse<Portfolio> resp = getPortfolioWithHttpInfo(id, expand);
        return resp.getData();
    }

    /**
     * Retrieves a portfolio.
     * 
     * @param id Portfolio id (required)
     * @param expand JSON string containing an array expand specifications for fields.  An expand specification must have a path and includes optional properties match, unique, allPossible, limit, offset, orderBy. (optional)
     * @return ApiResponse&lt;Portfolio&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Portfolio> getPortfolioWithHttpInfo(String id, String expand) throws ApiException {
        com.squareup.okhttp.Call call = getPortfolioValidateBeforeCall(id, expand, null, null);
        Type localVarReturnType = new TypeToken<Portfolio>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieves a portfolio. (asynchronously)
     * 
     * @param id Portfolio id (required)
     * @param expand JSON string containing an array expand specifications for fields.  An expand specification must have a path and includes optional properties match, unique, allPossible, limit, offset, orderBy. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPortfolioAsync(String id, String expand, final ApiCallback<Portfolio> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPortfolioValidateBeforeCall(id, expand, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Portfolio>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getPortfolioActivities
     * @param id Portfolio id (required)
     * @param limit Pagination limit (optional)
     * @param offset Pagination offset (optional)
     * @param match Semi-colon delimited list of expressions to include in the response only the items in a collections that satisfy the expression(s). All other items should be exluded. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getPortfolioActivitiesCall(String id, Integer limit, Integer offset, String match, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/portfolios/{id}/activities"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("offset", offset));
        if (match != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("match", match));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getPortfolioActivitiesValidateBeforeCall(String id, Integer limit, Integer offset, String match, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getPortfolioActivities(Async)");
        }
        

        com.squareup.okhttp.Call call = getPortfolioActivitiesCall(id, limit, offset, match, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieves portfolio activities log.
     * 
     * @param id Portfolio id (required)
     * @param limit Pagination limit (optional)
     * @param offset Pagination offset (optional)
     * @param match Semi-colon delimited list of expressions to include in the response only the items in a collections that satisfy the expression(s). All other items should be exluded. (optional)
     * @return Activities
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Activities getPortfolioActivities(String id, Integer limit, Integer offset, String match) throws ApiException {
        ApiResponse<Activities> resp = getPortfolioActivitiesWithHttpInfo(id, limit, offset, match);
        return resp.getData();
    }

    /**
     * Retrieves portfolio activities log.
     * 
     * @param id Portfolio id (required)
     * @param limit Pagination limit (optional)
     * @param offset Pagination offset (optional)
     * @param match Semi-colon delimited list of expressions to include in the response only the items in a collections that satisfy the expression(s). All other items should be exluded. (optional)
     * @return ApiResponse&lt;Activities&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Activities> getPortfolioActivitiesWithHttpInfo(String id, Integer limit, Integer offset, String match) throws ApiException {
        com.squareup.okhttp.Call call = getPortfolioActivitiesValidateBeforeCall(id, limit, offset, match, null, null);
        Type localVarReturnType = new TypeToken<Activities>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieves portfolio activities log. (asynchronously)
     * 
     * @param id Portfolio id (required)
     * @param limit Pagination limit (optional)
     * @param offset Pagination offset (optional)
     * @param match Semi-colon delimited list of expressions to include in the response only the items in a collections that satisfy the expression(s). All other items should be exluded. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPortfolioActivitiesAsync(String id, Integer limit, Integer offset, String match, final ApiCallback<Activities> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPortfolioActivitiesValidateBeforeCall(id, limit, offset, match, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Activities>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getPortfolioResourcePools
     * @param id Portfolio id (required)
     * @param expand JSON string containing an array expand specifications for fields.  An expand specification must have a path and includes optional properties match, unique, allPossible, limit, offset, orderBy. (optional)
     * @param limit Pagination limit (optional)
     * @param offset Pagination offset (optional)
     * @param orderBy Comma delimited list of order by expressions. Use &#39;-&#39; in front of expression for reverse order. (optional)
     * @param match Semi-colon delimited list of expressions to include in the response only the items in a collections that satisfy the expression(s). All other items should be exluded. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getPortfolioResourcePoolsCall(String id, String expand, Integer limit, Integer offset, String orderBy, String match, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/portfolios/{id}/resourcePools"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (expand != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("expand", expand));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("offset", offset));
        if (orderBy != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("orderBy", orderBy));
        if (match != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("match", match));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getPortfolioResourcePoolsValidateBeforeCall(String id, String expand, Integer limit, Integer offset, String orderBy, String match, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getPortfolioResourcePools(Async)");
        }
        

        com.squareup.okhttp.Call call = getPortfolioResourcePoolsCall(id, expand, limit, offset, orderBy, match, progressListener, progressRequestListener);
        return call;

    }

    /**
     * (Deprecated. Use getResourcePoolsForPortfolioPlan) Retrieves resource pools in a portfolio.
     * 
     * @param id Portfolio id (required)
     * @param expand JSON string containing an array expand specifications for fields.  An expand specification must have a path and includes optional properties match, unique, allPossible, limit, offset, orderBy. (optional)
     * @param limit Pagination limit (optional)
     * @param offset Pagination offset (optional)
     * @param orderBy Comma delimited list of order by expressions. Use &#39;-&#39; in front of expression for reverse order. (optional)
     * @param match Semi-colon delimited list of expressions to include in the response only the items in a collections that satisfy the expression(s). All other items should be exluded. (optional)
     * @return ResourcePools
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResourcePools getPortfolioResourcePools(String id, String expand, Integer limit, Integer offset, String orderBy, String match) throws ApiException {
        ApiResponse<ResourcePools> resp = getPortfolioResourcePoolsWithHttpInfo(id, expand, limit, offset, orderBy, match);
        return resp.getData();
    }

    /**
     * (Deprecated. Use getResourcePoolsForPortfolioPlan) Retrieves resource pools in a portfolio.
     * 
     * @param id Portfolio id (required)
     * @param expand JSON string containing an array expand specifications for fields.  An expand specification must have a path and includes optional properties match, unique, allPossible, limit, offset, orderBy. (optional)
     * @param limit Pagination limit (optional)
     * @param offset Pagination offset (optional)
     * @param orderBy Comma delimited list of order by expressions. Use &#39;-&#39; in front of expression for reverse order. (optional)
     * @param match Semi-colon delimited list of expressions to include in the response only the items in a collections that satisfy the expression(s). All other items should be exluded. (optional)
     * @return ApiResponse&lt;ResourcePools&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResourcePools> getPortfolioResourcePoolsWithHttpInfo(String id, String expand, Integer limit, Integer offset, String orderBy, String match) throws ApiException {
        com.squareup.okhttp.Call call = getPortfolioResourcePoolsValidateBeforeCall(id, expand, limit, offset, orderBy, match, null, null);
        Type localVarReturnType = new TypeToken<ResourcePools>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * (Deprecated. Use getResourcePoolsForPortfolioPlan) Retrieves resource pools in a portfolio. (asynchronously)
     * 
     * @param id Portfolio id (required)
     * @param expand JSON string containing an array expand specifications for fields.  An expand specification must have a path and includes optional properties match, unique, allPossible, limit, offset, orderBy. (optional)
     * @param limit Pagination limit (optional)
     * @param offset Pagination offset (optional)
     * @param orderBy Comma delimited list of order by expressions. Use &#39;-&#39; in front of expression for reverse order. (optional)
     * @param match Semi-colon delimited list of expressions to include in the response only the items in a collections that satisfy the expression(s). All other items should be exluded. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPortfolioResourcePoolsAsync(String id, String expand, Integer limit, Integer offset, String orderBy, String match, final ApiCallback<ResourcePools> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPortfolioResourcePoolsValidateBeforeCall(id, expand, limit, offset, orderBy, match, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResourcePools>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getPortfolios
     * @param expand JSON string containing an array expand specifications for fields.  An expand specification must have a path and includes optional properties match, unique, allPossible, limit, offset, orderBy. (optional)
     * @param limit Pagination limit (optional)
     * @param offset Pagination offset (optional)
     * @param orderBy Comma delimited list of order by expressions. Use &#39;-&#39; in front of expression for reverse order. (optional)
     * @param match Semi-colon delimited list of expressions to include in the response only the items in a collections that satisfy the expression(s). All other items should be exluded. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getPortfoliosCall(String expand, Integer limit, Integer offset, String orderBy, String match, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/portfolios";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (expand != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("expand", expand));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("offset", offset));
        if (orderBy != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("orderBy", orderBy));
        if (match != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("match", match));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getPortfoliosValidateBeforeCall(String expand, Integer limit, Integer offset, String orderBy, String match, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = getPortfoliosCall(expand, limit, offset, orderBy, match, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get portfolios.
     * 
     * @param expand JSON string containing an array expand specifications for fields.  An expand specification must have a path and includes optional properties match, unique, allPossible, limit, offset, orderBy. (optional)
     * @param limit Pagination limit (optional)
     * @param offset Pagination offset (optional)
     * @param orderBy Comma delimited list of order by expressions. Use &#39;-&#39; in front of expression for reverse order. (optional)
     * @param match Semi-colon delimited list of expressions to include in the response only the items in a collections that satisfy the expression(s). All other items should be exluded. (optional)
     * @return Portfolios
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Portfolios getPortfolios(String expand, Integer limit, Integer offset, String orderBy, String match) throws ApiException {
        ApiResponse<Portfolios> resp = getPortfoliosWithHttpInfo(expand, limit, offset, orderBy, match);
        return resp.getData();
    }

    /**
     * Get portfolios.
     * 
     * @param expand JSON string containing an array expand specifications for fields.  An expand specification must have a path and includes optional properties match, unique, allPossible, limit, offset, orderBy. (optional)
     * @param limit Pagination limit (optional)
     * @param offset Pagination offset (optional)
     * @param orderBy Comma delimited list of order by expressions. Use &#39;-&#39; in front of expression for reverse order. (optional)
     * @param match Semi-colon delimited list of expressions to include in the response only the items in a collections that satisfy the expression(s). All other items should be exluded. (optional)
     * @return ApiResponse&lt;Portfolios&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Portfolios> getPortfoliosWithHttpInfo(String expand, Integer limit, Integer offset, String orderBy, String match) throws ApiException {
        com.squareup.okhttp.Call call = getPortfoliosValidateBeforeCall(expand, limit, offset, orderBy, match, null, null);
        Type localVarReturnType = new TypeToken<Portfolios>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get portfolios. (asynchronously)
     * 
     * @param expand JSON string containing an array expand specifications for fields.  An expand specification must have a path and includes optional properties match, unique, allPossible, limit, offset, orderBy. (optional)
     * @param limit Pagination limit (optional)
     * @param offset Pagination offset (optional)
     * @param orderBy Comma delimited list of order by expressions. Use &#39;-&#39; in front of expression for reverse order. (optional)
     * @param match Semi-colon delimited list of expressions to include in the response only the items in a collections that satisfy the expression(s). All other items should be exluded. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPortfoliosAsync(String expand, Integer limit, Integer offset, String orderBy, String match, final ApiCallback<Portfolios> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPortfoliosValidateBeforeCall(expand, limit, offset, orderBy, match, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Portfolios>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getProjectsForPortfolio
     * @param portfolioId Portfolio id (required)
     * @param limit Pagination limit (optional)
     * @param offset Pagination offset (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getProjectsForPortfolioCall(String portfolioId, Integer limit, Integer offset, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/portfolios/{portfolioId}/projects"
            .replaceAll("\\{" + "portfolioId" + "\\}", apiClient.escapeString(portfolioId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("offset", offset));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getProjectsForPortfolioValidateBeforeCall(String portfolioId, Integer limit, Integer offset, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'portfolioId' is set
        if (portfolioId == null) {
            throw new ApiException("Missing the required parameter 'portfolioId' when calling getProjectsForPortfolio(Async)");
        }
        

        com.squareup.okhttp.Call call = getProjectsForPortfolioCall(portfolioId, limit, offset, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieves projects for portfolio
     * 
     * @param portfolioId Portfolio id (required)
     * @param limit Pagination limit (optional)
     * @param offset Pagination offset (optional)
     * @return Projects
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Projects getProjectsForPortfolio(String portfolioId, Integer limit, Integer offset) throws ApiException {
        ApiResponse<Projects> resp = getProjectsForPortfolioWithHttpInfo(portfolioId, limit, offset);
        return resp.getData();
    }

    /**
     * Retrieves projects for portfolio
     * 
     * @param portfolioId Portfolio id (required)
     * @param limit Pagination limit (optional)
     * @param offset Pagination offset (optional)
     * @return ApiResponse&lt;Projects&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Projects> getProjectsForPortfolioWithHttpInfo(String portfolioId, Integer limit, Integer offset) throws ApiException {
        com.squareup.okhttp.Call call = getProjectsForPortfolioValidateBeforeCall(portfolioId, limit, offset, null, null);
        Type localVarReturnType = new TypeToken<Projects>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieves projects for portfolio (asynchronously)
     * 
     * @param portfolioId Portfolio id (required)
     * @param limit Pagination limit (optional)
     * @param offset Pagination offset (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getProjectsForPortfolioAsync(String portfolioId, Integer limit, Integer offset, final ApiCallback<Projects> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getProjectsForPortfolioValidateBeforeCall(portfolioId, limit, offset, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Projects>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getSpreadsheetReportForPortfolio
     * @param portfolioId Portfolio id (required)
     * @param spreadsheetId Spreadsheet id (required)
     * @param sheetName Spreadsheet name (required)
     * @param expand JSON string containing an array expand specifications for fields.  An expand specification must have a path and includes optional properties match, unique, allPossible, limit, offset, orderBy. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getSpreadsheetReportForPortfolioCall(String portfolioId, String spreadsheetId, String sheetName, String expand, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/portfolios/{portfolioId}/spreadsheet/{spreadsheetId}/report"
            .replaceAll("\\{" + "portfolioId" + "\\}", apiClient.escapeString(portfolioId.toString()))
            .replaceAll("\\{" + "spreadsheetId" + "\\}", apiClient.escapeString(spreadsheetId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (sheetName != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sheetName", sheetName));
        if (expand != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("expand", expand));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getSpreadsheetReportForPortfolioValidateBeforeCall(String portfolioId, String spreadsheetId, String sheetName, String expand, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'portfolioId' is set
        if (portfolioId == null) {
            throw new ApiException("Missing the required parameter 'portfolioId' when calling getSpreadsheetReportForPortfolio(Async)");
        }
        
        // verify the required parameter 'spreadsheetId' is set
        if (spreadsheetId == null) {
            throw new ApiException("Missing the required parameter 'spreadsheetId' when calling getSpreadsheetReportForPortfolio(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling getSpreadsheetReportForPortfolio(Async)");
        }
        

        com.squareup.okhttp.Call call = getSpreadsheetReportForPortfolioCall(portfolioId, spreadsheetId, sheetName, expand, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Retrieves spreadsheet report for portfolio
     * 
     * @param portfolioId Portfolio id (required)
     * @param spreadsheetId Spreadsheet id (required)
     * @param sheetName Spreadsheet name (required)
     * @param expand JSON string containing an array expand specifications for fields.  An expand specification must have a path and includes optional properties match, unique, allPossible, limit, offset, orderBy. (optional)
     * @return SpreadsheetReport
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SpreadsheetReport getSpreadsheetReportForPortfolio(String portfolioId, String spreadsheetId, String sheetName, String expand) throws ApiException {
        ApiResponse<SpreadsheetReport> resp = getSpreadsheetReportForPortfolioWithHttpInfo(portfolioId, spreadsheetId, sheetName, expand);
        return resp.getData();
    }

    /**
     * Retrieves spreadsheet report for portfolio
     * 
     * @param portfolioId Portfolio id (required)
     * @param spreadsheetId Spreadsheet id (required)
     * @param sheetName Spreadsheet name (required)
     * @param expand JSON string containing an array expand specifications for fields.  An expand specification must have a path and includes optional properties match, unique, allPossible, limit, offset, orderBy. (optional)
     * @return ApiResponse&lt;SpreadsheetReport&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SpreadsheetReport> getSpreadsheetReportForPortfolioWithHttpInfo(String portfolioId, String spreadsheetId, String sheetName, String expand) throws ApiException {
        com.squareup.okhttp.Call call = getSpreadsheetReportForPortfolioValidateBeforeCall(portfolioId, spreadsheetId, sheetName, expand, null, null);
        Type localVarReturnType = new TypeToken<SpreadsheetReport>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieves spreadsheet report for portfolio (asynchronously)
     * 
     * @param portfolioId Portfolio id (required)
     * @param spreadsheetId Spreadsheet id (required)
     * @param sheetName Spreadsheet name (required)
     * @param expand JSON string containing an array expand specifications for fields.  An expand specification must have a path and includes optional properties match, unique, allPossible, limit, offset, orderBy. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getSpreadsheetReportForPortfolioAsync(String portfolioId, String spreadsheetId, String sheetName, String expand, final ApiCallback<SpreadsheetReport> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getSpreadsheetReportForPortfolioValidateBeforeCall(portfolioId, spreadsheetId, sheetName, expand, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SpreadsheetReport>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for importPortfolioData
     * @param id Portfolio id (required)
     * @param podFile The pod file to upload. (optional)
     * @param templateName pod template name to load (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call importPortfolioDataCall(String id, File podFile, String templateName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/portfolios/{id}/pod"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (templateName != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("templateName", templateName));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (podFile != null)
        localVarFormParams.put("podFile", podFile);

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call importPortfolioDataValidateBeforeCall(String id, File podFile, String templateName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling importPortfolioData(Async)");
        }
        

        com.squareup.okhttp.Call call = importPortfolioDataCall(id, podFile, templateName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Import portfolio data in JSON format
     * 
     * @param id Portfolio id (required)
     * @param podFile The pod file to upload. (optional)
     * @param templateName pod template name to load (optional)
     * @return Portfolio
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Portfolio importPortfolioData(String id, File podFile, String templateName) throws ApiException {
        ApiResponse<Portfolio> resp = importPortfolioDataWithHttpInfo(id, podFile, templateName);
        return resp.getData();
    }

    /**
     * Import portfolio data in JSON format
     * 
     * @param id Portfolio id (required)
     * @param podFile The pod file to upload. (optional)
     * @param templateName pod template name to load (optional)
     * @return ApiResponse&lt;Portfolio&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Portfolio> importPortfolioDataWithHttpInfo(String id, File podFile, String templateName) throws ApiException {
        com.squareup.okhttp.Call call = importPortfolioDataValidateBeforeCall(id, podFile, templateName, null, null);
        Type localVarReturnType = new TypeToken<Portfolio>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Import portfolio data in JSON format (asynchronously)
     * 
     * @param id Portfolio id (required)
     * @param podFile The pod file to upload. (optional)
     * @param templateName pod template name to load (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call importPortfolioDataAsync(String id, File podFile, String templateName, final ApiCallback<Portfolio> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = importPortfolioDataValidateBeforeCall(id, podFile, templateName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Portfolio>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for regenerateUserRegistrationToken
     * @param id Portfolio id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call regenerateUserRegistrationTokenCall(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/portfolios/{id}/regenerateUserRegistrationToken"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call regenerateUserRegistrationTokenValidateBeforeCall(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling regenerateUserRegistrationToken(Async)");
        }
        

        com.squareup.okhttp.Call call = regenerateUserRegistrationTokenCall(id, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Generates a new registration token
     * 
     * @param id Portfolio id (required)
     * @return Portfolio
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Portfolio regenerateUserRegistrationToken(String id) throws ApiException {
        ApiResponse<Portfolio> resp = regenerateUserRegistrationTokenWithHttpInfo(id);
        return resp.getData();
    }

    /**
     * Generates a new registration token
     * 
     * @param id Portfolio id (required)
     * @return ApiResponse&lt;Portfolio&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Portfolio> regenerateUserRegistrationTokenWithHttpInfo(String id) throws ApiException {
        com.squareup.okhttp.Call call = regenerateUserRegistrationTokenValidateBeforeCall(id, null, null);
        Type localVarReturnType = new TypeToken<Portfolio>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Generates a new registration token (asynchronously)
     * 
     * @param id Portfolio id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call regenerateUserRegistrationTokenAsync(String id, final ApiCallback<Portfolio> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = regenerateUserRegistrationTokenValidateBeforeCall(id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Portfolio>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for saveSpreadsheetForPortfolio
     * @param portfolioId Portfolio id (required)
     * @param spreadsheetId Spreadsheet id (required)
     * @param sheetName Spreadsheet name (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call saveSpreadsheetForPortfolioCall(String portfolioId, String spreadsheetId, String sheetName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/portfolios/{portfolioId}/spreadsheet/{spreadsheetId}"
            .replaceAll("\\{" + "portfolioId" + "\\}", apiClient.escapeString(portfolioId.toString()))
            .replaceAll("\\{" + "spreadsheetId" + "\\}", apiClient.escapeString(spreadsheetId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (sheetName != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sheetName", sheetName));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call saveSpreadsheetForPortfolioValidateBeforeCall(String portfolioId, String spreadsheetId, String sheetName, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'portfolioId' is set
        if (portfolioId == null) {
            throw new ApiException("Missing the required parameter 'portfolioId' when calling saveSpreadsheetForPortfolio(Async)");
        }
        
        // verify the required parameter 'spreadsheetId' is set
        if (spreadsheetId == null) {
            throw new ApiException("Missing the required parameter 'spreadsheetId' when calling saveSpreadsheetForPortfolio(Async)");
        }
        
        // verify the required parameter 'sheetName' is set
        if (sheetName == null) {
            throw new ApiException("Missing the required parameter 'sheetName' when calling saveSpreadsheetForPortfolio(Async)");
        }
        

        com.squareup.okhttp.Call call = saveSpreadsheetForPortfolioCall(portfolioId, spreadsheetId, sheetName, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Saves spreadsheet for portfolio
     * 
     * @param portfolioId Portfolio id (required)
     * @param spreadsheetId Spreadsheet id (required)
     * @param sheetName Spreadsheet name (required)
     * @return SpreadsheetReport
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SpreadsheetReport saveSpreadsheetForPortfolio(String portfolioId, String spreadsheetId, String sheetName) throws ApiException {
        ApiResponse<SpreadsheetReport> resp = saveSpreadsheetForPortfolioWithHttpInfo(portfolioId, spreadsheetId, sheetName);
        return resp.getData();
    }

    /**
     * Saves spreadsheet for portfolio
     * 
     * @param portfolioId Portfolio id (required)
     * @param spreadsheetId Spreadsheet id (required)
     * @param sheetName Spreadsheet name (required)
     * @return ApiResponse&lt;SpreadsheetReport&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SpreadsheetReport> saveSpreadsheetForPortfolioWithHttpInfo(String portfolioId, String spreadsheetId, String sheetName) throws ApiException {
        com.squareup.okhttp.Call call = saveSpreadsheetForPortfolioValidateBeforeCall(portfolioId, spreadsheetId, sheetName, null, null);
        Type localVarReturnType = new TypeToken<SpreadsheetReport>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Saves spreadsheet for portfolio (asynchronously)
     * 
     * @param portfolioId Portfolio id (required)
     * @param spreadsheetId Spreadsheet id (required)
     * @param sheetName Spreadsheet name (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call saveSpreadsheetForPortfolioAsync(String portfolioId, String spreadsheetId, String sheetName, final ApiCallback<SpreadsheetReport> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = saveSpreadsheetForPortfolioValidateBeforeCall(portfolioId, spreadsheetId, sheetName, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SpreadsheetReport>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for saveSpreadsheetSourceForPortfolio
     * @param id Portfolio id (required)
     * @param file  (required)
     * @param saveZeroAsBlank  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call saveSpreadsheetSourceForPortfolioCall(String id, File file, Boolean saveZeroAsBlank, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/portfolios/{id}/sources/spreadsheet"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (saveZeroAsBlank != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("saveZeroAsBlank", saveZeroAsBlank));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (file != null)
        localVarFormParams.put("file", file);

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call saveSpreadsheetSourceForPortfolioValidateBeforeCall(String id, File file, Boolean saveZeroAsBlank, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling saveSpreadsheetSourceForPortfolio(Async)");
        }
        
        // verify the required parameter 'file' is set
        if (file == null) {
            throw new ApiException("Missing the required parameter 'file' when calling saveSpreadsheetSourceForPortfolio(Async)");
        }
        

        com.squareup.okhttp.Call call = saveSpreadsheetSourceForPortfolioCall(id, file, saveZeroAsBlank, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Save spreadsheet source for a portfolio
     * 
     * @param id Portfolio id (required)
     * @param file  (required)
     * @param saveZeroAsBlank  (optional)
     * @return Source
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Source saveSpreadsheetSourceForPortfolio(String id, File file, Boolean saveZeroAsBlank) throws ApiException {
        ApiResponse<Source> resp = saveSpreadsheetSourceForPortfolioWithHttpInfo(id, file, saveZeroAsBlank);
        return resp.getData();
    }

    /**
     * Save spreadsheet source for a portfolio
     * 
     * @param id Portfolio id (required)
     * @param file  (required)
     * @param saveZeroAsBlank  (optional)
     * @return ApiResponse&lt;Source&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Source> saveSpreadsheetSourceForPortfolioWithHttpInfo(String id, File file, Boolean saveZeroAsBlank) throws ApiException {
        com.squareup.okhttp.Call call = saveSpreadsheetSourceForPortfolioValidateBeforeCall(id, file, saveZeroAsBlank, null, null);
        Type localVarReturnType = new TypeToken<Source>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Save spreadsheet source for a portfolio (asynchronously)
     * 
     * @param id Portfolio id (required)
     * @param file  (required)
     * @param saveZeroAsBlank  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call saveSpreadsheetSourceForPortfolioAsync(String id, File file, Boolean saveZeroAsBlank, final ApiCallback<Source> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = saveSpreadsheetSourceForPortfolioValidateBeforeCall(id, file, saveZeroAsBlank, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Source>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for setCustomNames
     * @param portfolioId Portfolio id (required)
     * @param customNames Custom names (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call setCustomNamesCall(String portfolioId, List<CustomName> customNames, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = customNames;

        // create path and map variables
        String localVarPath = "/portfolios/{portfolioId}/customNames"
            .replaceAll("\\{" + "portfolioId" + "\\}", apiClient.escapeString(portfolioId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call setCustomNamesValidateBeforeCall(String portfolioId, List<CustomName> customNames, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'portfolioId' is set
        if (portfolioId == null) {
            throw new ApiException("Missing the required parameter 'portfolioId' when calling setCustomNames(Async)");
        }
        
        // verify the required parameter 'customNames' is set
        if (customNames == null) {
            throw new ApiException("Missing the required parameter 'customNames' when calling setCustomNames(Async)");
        }
        

        com.squareup.okhttp.Call call = setCustomNamesCall(portfolioId, customNames, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Updates custom names for portfolio
     * 
     * @param portfolioId Portfolio id (required)
     * @param customNames Custom names (required)
     * @return List&lt;CustomName&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<CustomName> setCustomNames(String portfolioId, List<CustomName> customNames) throws ApiException {
        ApiResponse<List<CustomName>> resp = setCustomNamesWithHttpInfo(portfolioId, customNames);
        return resp.getData();
    }

    /**
     * Updates custom names for portfolio
     * 
     * @param portfolioId Portfolio id (required)
     * @param customNames Custom names (required)
     * @return ApiResponse&lt;List&lt;CustomName&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<CustomName>> setCustomNamesWithHttpInfo(String portfolioId, List<CustomName> customNames) throws ApiException {
        com.squareup.okhttp.Call call = setCustomNamesValidateBeforeCall(portfolioId, customNames, null, null);
        Type localVarReturnType = new TypeToken<List<CustomName>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Updates custom names for portfolio (asynchronously)
     * 
     * @param portfolioId Portfolio id (required)
     * @param customNames Custom names (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call setCustomNamesAsync(String portfolioId, List<CustomName> customNames, final ApiCallback<List<CustomName>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = setCustomNamesValidateBeforeCall(portfolioId, customNames, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<CustomName>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updatePortfolio
     * @param id Portfolio id (required)
     * @param body JSON Patch Operations to update a portfolio. (required)
     * @param expand JSON string containing an array expand specifications for fields.  An expand specification must have a path and includes optional properties match, unique, allPossible, limit, offset, orderBy. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updatePortfolioCall(String id, Operations body, String expand, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/portfolios/{id}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (expand != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("expand", expand));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json-patch+json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return apiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updatePortfolioValidateBeforeCall(String id, Operations body, String expand, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updatePortfolio(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updatePortfolio(Async)");
        }
        

        com.squareup.okhttp.Call call = updatePortfolioCall(id, body, expand, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update a portfolio.
     * 
     * @param id Portfolio id (required)
     * @param body JSON Patch Operations to update a portfolio. (required)
     * @param expand JSON string containing an array expand specifications for fields.  An expand specification must have a path and includes optional properties match, unique, allPossible, limit, offset, orderBy. (optional)
     * @return Portfolio
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Portfolio updatePortfolio(String id, Operations body, String expand) throws ApiException {
        ApiResponse<Portfolio> resp = updatePortfolioWithHttpInfo(id, body, expand);
        return resp.getData();
    }

    /**
     * Update a portfolio.
     * 
     * @param id Portfolio id (required)
     * @param body JSON Patch Operations to update a portfolio. (required)
     * @param expand JSON string containing an array expand specifications for fields.  An expand specification must have a path and includes optional properties match, unique, allPossible, limit, offset, orderBy. (optional)
     * @return ApiResponse&lt;Portfolio&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Portfolio> updatePortfolioWithHttpInfo(String id, Operations body, String expand) throws ApiException {
        com.squareup.okhttp.Call call = updatePortfolioValidateBeforeCall(id, body, expand, null, null);
        Type localVarReturnType = new TypeToken<Portfolio>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update a portfolio. (asynchronously)
     * 
     * @param id Portfolio id (required)
     * @param body JSON Patch Operations to update a portfolio. (required)
     * @param expand JSON string containing an array expand specifications for fields.  An expand specification must have a path and includes optional properties match, unique, allPossible, limit, offset, orderBy. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updatePortfolioAsync(String id, Operations body, String expand, final ApiCallback<Portfolio> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updatePortfolioValidateBeforeCall(id, body, expand, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Portfolio>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updatePortfolioFieldValues
     * @param id Portfolio id (required)
     * @param body JSON Patch Operations to update multiple field values. (required)
     * @param expand JSON string containing an array expand specifications for fields.  An expand specification must have a path and includes optional properties match, unique, allPossible, limit, offset, orderBy. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updatePortfolioFieldValuesCall(Object id, List<FieldValuePatchItem> body, String expand, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/portfolios/{id}/fieldValues"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (expand != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("expand", expand));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json-patch+json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return apiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updatePortfolioFieldValuesValidateBeforeCall(Object id, List<FieldValuePatchItem> body, String expand, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updatePortfolioFieldValues(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updatePortfolioFieldValues(Async)");
        }
        

        com.squareup.okhttp.Call call = updatePortfolioFieldValuesCall(id, body, expand, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update field values in a portfolio
     * 
     * @param id Portfolio id (required)
     * @param body JSON Patch Operations to update multiple field values. (required)
     * @param expand JSON string containing an array expand specifications for fields.  An expand specification must have a path and includes optional properties match, unique, allPossible, limit, offset, orderBy. (optional)
     * @return List&lt;FieldValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<FieldValue> updatePortfolioFieldValues(Object id, List<FieldValuePatchItem> body, String expand) throws ApiException {
        ApiResponse<List<FieldValue>> resp = updatePortfolioFieldValuesWithHttpInfo(id, body, expand);
        return resp.getData();
    }

    /**
     * Update field values in a portfolio
     * 
     * @param id Portfolio id (required)
     * @param body JSON Patch Operations to update multiple field values. (required)
     * @param expand JSON string containing an array expand specifications for fields.  An expand specification must have a path and includes optional properties match, unique, allPossible, limit, offset, orderBy. (optional)
     * @return ApiResponse&lt;List&lt;FieldValue&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<FieldValue>> updatePortfolioFieldValuesWithHttpInfo(Object id, List<FieldValuePatchItem> body, String expand) throws ApiException {
        com.squareup.okhttp.Call call = updatePortfolioFieldValuesValidateBeforeCall(id, body, expand, null, null);
        Type localVarReturnType = new TypeToken<List<FieldValue>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update field values in a portfolio (asynchronously)
     * 
     * @param id Portfolio id (required)
     * @param body JSON Patch Operations to update multiple field values. (required)
     * @param expand JSON string containing an array expand specifications for fields.  An expand specification must have a path and includes optional properties match, unique, allPossible, limit, offset, orderBy. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updatePortfolioFieldValuesAsync(Object id, List<FieldValuePatchItem> body, String expand, final ApiCallback<List<FieldValue>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updatePortfolioFieldValuesValidateBeforeCall(id, body, expand, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<FieldValue>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updatePortfolioResourcePoolBudgetAmounts
     * @param id Portfolio id (required)
     * @param body JSON Patch Operations to update multiple resource pool budget amounts (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updatePortfolioResourcePoolBudgetAmountsCall(Object id, List<ResourcePoolBudgetAmountPatchItem> body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/portfolios/{id}/resourcePoolBudgetAmounts"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json-patch+json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return apiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updatePortfolioResourcePoolBudgetAmountsValidateBeforeCall(Object id, List<ResourcePoolBudgetAmountPatchItem> body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updatePortfolioResourcePoolBudgetAmounts(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updatePortfolioResourcePoolBudgetAmounts(Async)");
        }
        

        com.squareup.okhttp.Call call = updatePortfolioResourcePoolBudgetAmountsCall(id, body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * (Deprecated. Use updateResourcePoolBudgetAmountsForPortfolioPlan) Update resource pool budget amounts in a portfolio
     * 
     * @param id Portfolio id (required)
     * @param body JSON Patch Operations to update multiple resource pool budget amounts (required)
     * @return List&lt;ResourcePool&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<ResourcePool> updatePortfolioResourcePoolBudgetAmounts(Object id, List<ResourcePoolBudgetAmountPatchItem> body) throws ApiException {
        ApiResponse<List<ResourcePool>> resp = updatePortfolioResourcePoolBudgetAmountsWithHttpInfo(id, body);
        return resp.getData();
    }

    /**
     * (Deprecated. Use updateResourcePoolBudgetAmountsForPortfolioPlan) Update resource pool budget amounts in a portfolio
     * 
     * @param id Portfolio id (required)
     * @param body JSON Patch Operations to update multiple resource pool budget amounts (required)
     * @return ApiResponse&lt;List&lt;ResourcePool&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<ResourcePool>> updatePortfolioResourcePoolBudgetAmountsWithHttpInfo(Object id, List<ResourcePoolBudgetAmountPatchItem> body) throws ApiException {
        com.squareup.okhttp.Call call = updatePortfolioResourcePoolBudgetAmountsValidateBeforeCall(id, body, null, null);
        Type localVarReturnType = new TypeToken<List<ResourcePool>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * (Deprecated. Use updateResourcePoolBudgetAmountsForPortfolioPlan) Update resource pool budget amounts in a portfolio (asynchronously)
     * 
     * @param id Portfolio id (required)
     * @param body JSON Patch Operations to update multiple resource pool budget amounts (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updatePortfolioResourcePoolBudgetAmountsAsync(Object id, List<ResourcePoolBudgetAmountPatchItem> body, final ApiCallback<List<ResourcePool>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updatePortfolioResourcePoolBudgetAmountsValidateBeforeCall(id, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<ResourcePool>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
